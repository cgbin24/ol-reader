import{_ as e}from"./app.BdTF1atn.js";import{j as i,i as s,Z as p}from"./chunks/@vue.D6nrJjhM.js";/* empty css                          */import"./chunks/@vueuse.ErXst1iV.js";const m=JSON.parse('{"title":"","description":"","frontmatter":{},"headers":[],"relativePath":"mdviewer/XIAOCE/Node + React 实战：从 0 到 1 实现记账本 5.98/12 前端预备：Vite 2.0 下一代前度开发构建工具.md","filePath":"mdviewer/XIAOCE/Node + React 实战：从 0 到 1 实现记账本 5.98/12 前端预备：Vite 2.0 下一代前度开发构建工具.md"}'),a={name:"mdviewer/XIAOCE/Node + React 实战：从 0 到 1 实现记账本 5.98/12 前端预备：Vite 2.0 下一代前度开发构建工具.md"},d=p(`<h3 id="前言" tabindex="-1">前言 ​</h3><p>我还是那句话，工具永远是服务于需求的。纵观整个前端生态的项目构建工具，有服务于 <code>React</code> 生态的 <code>create-react-app</code>、<code>umi</code>、<code>Next.js</code> 等。服务于 Vue 生态的 <code>Vue CLI</code>、<code>Vite</code>、<code>Nuxt.js</code> 等。它们都是耳熟能详的团队和大佬，为了解决各自需求而研发出来的前端构建工具。而我们要做的其实就是根据项目的需求，进行合理的选择和学习。说白了，在你没有决定权的时候，公司用什么，你就学什么。在你有话语权，能自己抉择的时候，哪个让你开发起来比较舒服，就用哪个。</p><p>这些构建工具中，有一个比较特殊，那就是 <code>Vite</code>，它是尤雨溪在发布 <code>Vue 3.0</code> 时，同步推出的一款前端构建工具。它不光服务于 <code>Vue</code>，同时也对其他的框架如 <code>React</code>、<code>Svelte</code>、<code>Preact</code> 都有一定的支持，我们本着学新不学旧的理念，在项目中引进了 <code>Vite</code> 作为构建工具。</p><p>在开始使用 <code>Vite</code> 之前，我们来认识一下它。</p><h4 id="知识点" tabindex="-1">知识点 ​</h4><ul><li><p><code>Vite</code> 是什么。</p></li><li><p><code>Vite</code> 与 <code>Webpack</code> 相比优势在哪里。</p></li><li><p><code>Vite</code> 的构建原理。</p></li></ul><h3 id="vite-是什么" tabindex="-1">Vite 是什么 ​</h3><p>我们引用官方的一句话来介绍它，“<strong>下一代前端开发与构建工具</strong>”。</p><p>它有以下几个特点：</p><p>1、 快速启动，<code>Vite</code> 会在本地启动一个开发服务器，来管理开发环境的资源请求。</p><p>2、相比 <code>Webpack</code> 的开发环境打包构建，它在开发环境下是无需打包的，热更新相比 <code>Webpack</code> 会快很多。</p><p>3、原生 <code>ES Module</code>，要什么就当场给你什么。而 <code>Webpack</code> 则是先将资源构建好之后，再根据你的需要，分配给你想要的资源。</p><p>尤雨溪在发布 <code>Vite</code> 前，发过这么一条微博。</p><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/5b6344806ae94c96b9060fb0a3b13381~tplv-k3u1fbpfcp-jj-mark:3024:0:0:0:q75.awebp" alt=""></p><p>从话语间可以看出，尤雨溪团队对该打包工具也是报以厚望，所以这里大家可以不必担心后续它们会放弃维护这个项目，当然也不能打包票。</p><h3 id="vite-与-webpack-相比优势在哪里" tabindex="-1">Vite 与 Webpack 相比优势在哪里 ​</h3><p>接下来我们来聊聊，为什么说它是下一代前端开发与构建工具。是不是当代构建工具出了什么问题？</p><p>我们知道当代的前端构建工具有很多，比较受欢迎的有 <code>Webpack</code>、<code>Rollup</code>、<code>Parcel</code>等，绝大多数脚手架工具都是使用 <code>Webpack</code> 作为构建工具，如 <code>Vue-CLI</code>。</p><p>在利用 <code>Webpack</code> 作为构建工具时，开发过程中，每次修改代码，都会导致重新编译，随着项目代码量的增多，热更新的速度也随之变慢，甚至要几秒钟才能看到视图的更新。</p><p>生产环境下，它将各个模块之间通过编码的方式联系在一起，最终生成一个庞大的 <code>bundle</code> 文件。</p><p>导致这些问题出现的原因，有以下几点：</p><p>1、<code>HTTP 1.1</code> 时代，各个浏览器资源请求并发是有上限的（如谷歌浏览器为 6 个，这导致你必须要减少资源请求数）。</p><p>2、浏览器并不支持 <code>CommonJS</code> 模块化系统（它不能直接运行在浏览器环境下，它是 <code>Node</code> 提出的模块化规范，所以需要经过 <code>Webpack</code> 的打包，编译成浏览器可识别的 <code>JS</code> 脚本）</p><p>3、模块与模块之间的依赖顺序和管理问题（文件依赖层级越多，静态资源也就变得越多，如果一个资源有 100 个依赖关系，可能需要加载 100 个网络请求，这对生产环境可能是灾难，所以在生产环境最终会打包成一个 <code>bundle</code> 脚本，会提前进行资源按需加载的配置。）</p><h4 id="那么为什么现在又出现了不打包的构建趋势" tabindex="-1">那么为什么现在又出现了不打包的构建趋势？ ​</h4><p>1、工程越来越庞大，热更新变得缓慢，十分影响开发体验。推动着我们不断地去创新，不断地尝试着去突破瓶颈。</p><p>2、各大浏览器已经开始慢慢的支持原生 <code>ES Module</code> (谷歌、火狐、Safari、Edge 的最新版本，都已支持。这让我们看到了希望)。</p><p>3、<code>HTTP 2.0</code> 采用的多路复用。不用太担心请求并发量的问题。</p><p>4、越来越多的 <code>npm</code> 包开始采用了原生 <code>ESM</code> 的开发形式。虽然还有很多包不支持，但是我相信这将会是趋势。</p><p>我们通过表格的形式，对比一下 <code>bundle</code> 和 <code>bundleless</code> 的区别。</p><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/ff916f65816b469989198bdc2ec18fd1~tplv-k3u1fbpfcp-jj-mark:3024:0:0:0:q75.awebp" alt=""></p><h3 id="vite-构建原理" tabindex="-1">Vite 构建原理 ​</h3><p>众所周知，<code>Vite</code> 的生产模式和开发模式是不同的概念。我们先聊聊，<code>Vite</code> 的开发模式。</p><p>首先要明确一点，<code>Vite</code> 在开发模式下，有一个 依赖预构建 的概念。</p><h4 id="什么是依赖预构建" tabindex="-1">什么是依赖预构建 ​</h4><p>在 <code>Vite</code> 启动开发服务器之后，它将第三方依赖的多个静态资源整合为一个，比如 <code>lodash</code>、<code>qs</code>、<code>axios</code> 等这类资源包，存入 <code>node_modules/.vite</code> 文件下。</p><h4 id="为什么需要依赖预构建" tabindex="-1">为什么需要依赖预构建 ​</h4><p>如果直接采用 <code>ES Module</code> 的形式开发代码，会产生一大串依赖，就好像俄罗斯套娃一样，一层一层的嵌套，在浏览器资源有限的情况下，同时请求大量的静态资源，会造成浏览器的卡顿，并且资源响应的时间也会变慢。</p><p>我们先不通过 <code>Vite</code>，而是手动搭建原生 <code>ES Module</code> 开发形式，通过引入 <code>lodash-es</code> 包，实现一个数组去重的小例子，来详细分析为什么需要依赖预构建。</p><p>新建 <code>test1</code> 文件夹，通过 <code>npm init -y</code> 初始化了一个前端工程：</p><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/eabc5b637e734347b8e7965496669fee~tplv-k3u1fbpfcp-jj-mark:3024:0:0:0:q75.awebp" alt=""></p><p>手动新建 <code>index.html</code>，通过 <code>script</code> 标签，引入 <code>main.js</code>。这里注意，需要将 <code>type</code> 属性设置为 <code>module</code>，这样才能支持 <code>ES Module</code> 模块化开发。</p><p>通过 <code>npm</code> 安装 <code>lodash-es</code>，这里我们之所以不使用 <code>lodash</code>，是因为 <code>lodash</code> 不是通过 <code>ES Module</code> 形式开发的，直接通过相对路径引入会报错，需要通过 <code>Webpack</code> 打包构建。</p><div class="language-sh vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">npm</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> i</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> lodash-es</span></span></code></pre></div><p>新建 <code>main.js</code> 添加去重逻辑：</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> uniq </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">from</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;./node_modules/lodash-es/uniq.js&#39;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> arr</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> [</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">2</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">3</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">3</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">4</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">]</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">uniq</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(arr))</span></span></code></pre></div><p>这里我们采用 <code>VSCode</code> 的插件，<code>Live Server</code>，来启动项目。</p><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/30054fefbeaf485a96db8d4a4d8f5aad~tplv-k3u1fbpfcp-jj-mark:3024:0:0:0:q75.awebp" alt=""></p><p>安装完之后，在项目中双击 <code>index.html</code>，找到右下角的 <code>「Go Live」</code>，如下所示：</p><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/64858bc1bd3e4206a4b996c8ba4f5d74~tplv-k3u1fbpfcp-jj-mark:3024:0:0:0:q75.awebp" alt=""></p><p>点击后，自动启动一个 <code>Web</code> 服务，浏览器自动打开，如下所示：</p><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/3858ec887f744781b6c45fadad638c2c~tplv-k3u1fbpfcp-jj-mark:3024:0:0:0:q75.awebp" alt=""></p><p>结果正确，数组中的 3 被去除了，接下来关键的一个点，我们点击 <code>Network</code> 查看，资源引入情况：</p><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/9b9e60c097184e20a78cb8198968b199~tplv-k3u1fbpfcp-jj-mark:3024:0:0:0:q75.awebp" alt=""></p><p>我们只是获取去重方法，却意外引入了 59 资源，这是为什么呢？</p><p>我们先查看 <code>main.js</code> 内的代码，如下所示：</p><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/f001d806817f4ed5a9ad521c9a91a6d5~tplv-k3u1fbpfcp-jj-mark:3024:0:0:0:q75.awebp" alt=""></p><p>代码中只有在首行通过 <code>import</code> 引入了 <code>./node_modules/lodash-es/uniq.js</code>，所以 <code>uniq.js</code> 被作为资源引入进来，我们再看 <code>uniq.js</code> 的情况：</p><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/7b21e238127c47ec8f69b16775b4bb08~tplv-k3u1fbpfcp-jj-mark:3024:0:0:0:q75.awebp" alt=""></p><p><code>uniq.js</code> 中，首行通过 <code>import</code> 引入了 <code>_baseUniq.js</code>，我们继续：</p><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/6392953fd6b043ea99355687a5569763~tplv-k3u1fbpfcp-jj-mark:3024:0:0:0:q75.awebp" alt=""></p><p><code>_baseUniq.js</code> 中，引入了上图箭头中的一些脚本，不用往下看，我盲猜这种俄罗斯套娃的模式，会一直引用到 <code>uniq.js</code> 相关的所有脚本代码。</p><p>这只是一个 <code>uniq</code> 方法，足足就引入了 59 个资源，这仿佛是在军训浏览器，也就是谷歌能跟它博弈几个回合，引入的包再多几个，我估计也是顶不住的。</p><p>所以这时候 <code>Vite</code> 便引入了「依赖预构建」的概念。</p><h4 id="依赖现预构建浅析" tabindex="-1">依赖现预构建浅析 ​</h4><p>同样的，再通过 <code>Vite</code> 构建出一个 <code>React</code> 项目，去实现上述逻辑，我们观察 <code>Vite</code> 是怎么作的。</p><p>首先通过 <code>Vite</code> 指令生成项目：</p><div class="language-sh vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">npm</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> init</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> @vitejs/app</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> test2</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --template</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> react</span></span></code></pre></div><p>并安装 <code>lodash-es</code>，修改入口脚本 <code>main.jsx</code>：</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> uniq </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">from</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;lodash-es/uniq.js&#39;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> arr</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> [</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">2</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">3</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">3</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">4</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">]</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">uniq</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(arr))</span></span></code></pre></div><p>我们观察浏览器的 <code>Network</code>，如下所示：</p><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/dce2afc266e84fa79ee8c9a0c0266c85~tplv-k3u1fbpfcp-jj-mark:3024:0:0:0:q75.awebp" alt=""></p><p>注意上图，执行 <code>npm run dev</code> 后，脚本中引用 <code>lodash-es/uniq</code> 的路径是在 <code>/node_modules/.vite</code> 文件夹下，并且左下角的请求资源数，也没有我们之前原生 <code>ES Module</code> 时的多，少了足足 <code>3/4</code> 还多。</p><p>再观察文件目录：</p><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/715c51aaea93420dac55e3ccca003222~tplv-k3u1fbpfcp-jj-mark:3024:0:0:0:q75.awebp" alt=""></p><p><code>lodash-es/uniq</code> 已经被 <code>Vite</code> 提前预编译到了 <code>.vite</code> 文件夹下，这样代码中直接去这个文件夹拿现成的包，就不必再递归地去加载很多静态资源脚本。</p><h3 id="总结" tabindex="-1">总结 ​</h3><p>本章节，通过实例分析，对 <code>Vite</code> 有了初步的了解。那么下一章节，我将带大家通过 <code>Vite</code> 去搭建一个 <code>React</code> 的完整开发环境。</p>`,78),c=[d];function o(t,n,h,l,k,r){return s(),i("div",null,c)}const f=e(a,[["render",o]]);export{m as __pageData,f as default};
