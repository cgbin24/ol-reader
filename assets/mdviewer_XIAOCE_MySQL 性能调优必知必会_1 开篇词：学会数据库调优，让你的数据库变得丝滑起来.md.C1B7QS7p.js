import{_ as o}from"./app.BdTF1atn.js";import{j as e,i as t,Z as p}from"./chunks/@vue.D6nrJjhM.js";/* empty css                          */import"./chunks/@vueuse.ErXst1iV.js";const g=JSON.parse('{"title":"","description":"","frontmatter":{},"headers":[],"relativePath":"mdviewer/XIAOCE/MySQL 性能调优必知必会/1 开篇词：学会数据库调优，让你的数据库变得丝滑起来.md","filePath":"mdviewer/XIAOCE/MySQL 性能调优必知必会/1 开篇词：学会数据库调优，让你的数据库变得丝滑起来.md"}'),i={name:"mdviewer/XIAOCE/MySQL 性能调优必知必会/1 开篇词：学会数据库调优，让你的数据库变得丝滑起来.md"},_=p('<p>MySQL 数据库是时下最流行的关系型数据库之一，但是经常使用 MySQL 数据库的朋友应该有所体会，就是 MySQL 数据库<strong>在面临高并发大数据的情况下，性能会急转直下</strong>。此时的 MySQL 数据库就会变得像《疯狂动物城》中的闪电一样，以至于你的每一查询都需要 N 长时间才能返回呢！那么在面临数据库可能会变得缓慢的情况下，如何才能尽可能地让你的数据库变得“丝滑”起来呢？</p><p>例如，你可能经常会遇到 MySQL 数据库的<code>性能瓶颈</code>，那么此时又该如何调优 MySQL 数据库的性能呢？</p><p>此时，我猜你大概率会选择去百度、Google，但是比较尴尬的是，会发现大多数情况下查询出来的方法对于你的帮助也是微乎其微的。它可能会告诉你，遇到这种情况应该执行<code>xxx</code>这条 SQL，但是此时你真的敢执行吗？如果执行之后导致了数据库崩溃怎么办呢？</p><p>说到这里，我特别想跟你分享我之前在工作中曾经遇到的一个实际案例。</p><p>有一次，我们数据库出现了一个奇怪的现象：<code>write</code> 速度很慢，<code>TPS</code> 也很低，但是数据库主机的<code>磁盘 IO</code> 的压力并不大。这不禁让我们产生了疑问：为什么在<code>磁盘 IO</code> 不高时，数据库的 <code>write</code> 速度仍然很慢呢？</p><p>我们百度和 Google 了很久仍不得其解，最后我们突然想起来 <code>MySQL 数据库</code>并不是直接根据硬盘的性能来调节其 <code>write</code> 速度，而是靠 <code>innodb_io_capacity</code> 参数来告诉 <code>MySQL 数据库</code>磁盘的性能。后来，我们修改了<code>innodb_io_capacity</code> 参数之后，<code>MySQL 数据库</code> 的性能就直接蹭蹭蹭地提升了一个数量级。对，就这么就解决了，靠的就是对<code>MySQL 数据库</code>底层运行原理的了解。</p><p>（这个案例我在这本小册之中也会有分析，后续我们再详细说明。）</p><p>因此，我希望你在学习完这本小册之后，就可以很<strong>深入地了解 MySQL 的底层原理，然后根据 MySQL 的底层原理去从根本上解决常见的痛点问题</strong>。比如：</p><ul><li>哪些因素影响了查询速度？</li><li>哪些因素影响了写入的速度？</li><li>MySQL 数据库主机的内存和 MySQL 数据库的缓冲池之间的最佳比例是多少？</li><li>对于一个需要保证唯一的字段我们是不是必须要使用唯一索引？</li><li>唯一索引和普通索引在底层上的区别又是什么呢？</li><li>等等（一连串诸如此类的问题）。</li></ul><p>而且为了帮助你更好地理解 MySQL 数据库中很多枯燥的概念和底层逻辑，我还会充分利用各种<code>小故事和段子</code>来讲解相关知识点，这样我们可以一起<strong>趣学提升 MySQL 性能的技术要点</strong>，例如：</p><ul><li>改编刘备、吴用以及李逵之间的爱情关系，讲述了 MySQL 事务中的回滚与提交的底层原理；</li><li>结合给媳妇发送红包的段子来讲述“如果没有 MySQL 事务，红包发送失败”会是一个怎样的结果；</li><li>通过“打电话问老师什么是爱情，老师该先回答谁”这个小故事来讲述 MySQL 数据库中的锁机制。</li></ul><p>也就是说，我会将一个个枯燥繁琐的 MySQL 数据库底层原理转换为一个又一个有趣耐看的小故事，告诉你：哦！原来 MySQL 数据库的底层是这样滴！</p><h3 id="我们小册的思路和亮点" tabindex="-1">我们小册的思路和亮点 ​</h3><p>本小册着重于解决在<code>工作中或面试中遇到的各种 MySQL 数据库的“疑难杂症”</code>，其中具体包括如下 4 个层面。</p><ul><li><p><strong>数据架构层面</strong>：主要讲述 MySQL 主从架构之间可能遇到的问题，例如主从架构如何提高稳定性，以及主从复制主要是什么地方导致了延时等。</p></li><li><p><strong>SQL 层面</strong>：这部分主要包括 SQL 的生命周期、权限管理、count(*) 的底层原理、底层的排序原理、连表原理等几个方面，讲述了从 SQL 层面我们该如何提高 MySQL 数据库的查询性能等问题。</p></li><li><p><strong>存储引擎层面</strong>：这部分包括了 InnoDB 存储引擎的底层架构、索引的算法、事务的原理、锁机制、隔离机制、幻读等方面的内容，讲述了在存储引擎层面我们该如何使用索引、事务的底层原理是什么、锁机制解决了什么问题、隔离机制的具体作用等问题。</p></li><li><p><strong>数据安全层面</strong>：这部分包括了 MySQL 数据快速迁移、如何保证数据库的主从数据一致、数据库到底在什么地方延时等方面的内容，讲述了 MySQL 数据库如何保证数据安全、MySQL 数据延时问题是怎么回事、如何保证数据一致等问题。</p></li></ul><p>总之，这本小册能让你<strong>深入理解 MySQL 数据库的底层原理，这样在面对各种无论是工作上的、还是面试上的 MySQL 数据库问题时，都能够做到有迹可循，有“法”可依，帮助你在维护 MySQL 数据库时，进行查缺补漏</strong>。</p><h3 id="我是谁" tabindex="-1">我是谁 ​</h3><p>你好，我是<strong>小阳爱技术</strong>，一名数据库管理员 &amp;&amp; 容器云狂热分子，就职于国内某大型集团公司，主要负责数据库维护和云原生互联网架构。</p><p>精通 MySQL 高可用集群架构和 Kubernetes 容器云架构。广泛涉猎 MySQL 高可用、容器云、混合云等技术；对从 0 到 1 构建 MySQL 高可用集群架构和企业容器化集群架构有着不可多得的实际生产经验。</p><h3 id="阅读本小册的一些建议" tabindex="-1">阅读本小册的一些建议 ​</h3><p>接下来，我们就一起开始提高 MySQL 数据性能的学习之旅吧！</p><p>无论你是想进大厂的求职者，还是开发工程师、运维工程师、架构师，又或者是团队负责人，都可以加入我们。</p><p>我会从 4 个大层面去讲明白数据库的底层原理，进而让你知道如何优化才能真正地提升 MySQL 数据库的性能，妥妥地攻克工作中或面试中可能会遇到的各种 MySQL 数据库的“疑难杂症”。</p><p>需要提前说明的是，这本小册的内容并没有严格的先后顺序，如果你被某些章节卡住了，一下理解不了，不用过于纠结，可以先暂时跳过它，并阅读其他章节。后续再回过头来理解也许有些问题就“船到桥头自然直”了。如果还是理解不了，欢迎你在留言区或者交流群中向我提问，或者当你有好的经验和想法时，也欢迎你跟我分享，我们一起交流、一起成长。</p><p>但不管怎样，请你务必坚持到最后，相信这本小册一定会让你对 MySQL 数据库底层原理有更深刻的认识。 <strong>我们一起加油! Fighting</strong>！</p>',25),d=[_];function c(n,r,S,L,Q,l){return t(),e("div",null,d)}const m=o(i,[["render",c]]);export{g as __pageData,m as default};
