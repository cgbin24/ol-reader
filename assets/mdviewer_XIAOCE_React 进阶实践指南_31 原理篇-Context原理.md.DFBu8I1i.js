import{_ as s}from"./app.BdTF1atn.js";import{j as i,i as e,Z as n}from"./chunks/@vue.D6nrJjhM.js";/* empty css                          */import"./chunks/@vueuse.ErXst1iV.js";const C=JSON.parse('{"title":"","description":"","frontmatter":{},"headers":[],"relativePath":"mdviewer/XIAOCE/React 进阶实践指南/31 原理篇-Context原理.md","filePath":"mdviewer/XIAOCE/React 进阶实践指南/31 原理篇-Context原理.md"}'),a={name:"mdviewer/XIAOCE/React 进阶实践指南/31 原理篇-Context原理.md"},t=n(`<h2 id="过时的-react-api" tabindex="-1">过时的 React API ​</h2><p>接下来将介绍 <code>context</code> 原理。重点流程放在 context 的<strong>传递和更新</strong>两个方面。对于原理部分，我在这里只介绍了新版本 Context 的原理。感兴趣的同学可以看一下源码。</p><p>以 <code>React 16.8</code> 为例子🌰：</p><ul><li>新版本 Context 位置：<code>react-reconciler/src/ReactFiberNewContext.js</code></li><li>老版本 Context 位置：<code>react-reconciler/src/ReactFiberContext.js</code></li></ul><p>希望大家带着这些问题去阅读</p><ul><li>1 Provder 如何传递 context？</li><li>2 三种获取 context 原理 （ <code>Consumer</code>， <code>useContext</code>，<code>contextType</code> ）？</li><li>3 消费 <code>context</code> 的组件，context 改变，为什么会订阅更新 （如何实现） 。</li><li>4 context 更新，如何避免 <code>pureComponent</code> ， <code>shouldComponentUpdate</code> 渲染控制策略的影响。</li><li>5 如何实现的 context 嵌套传递 （ 多个 Povider ）?</li></ul><h3 id="_1-context-对象" tabindex="-1">1 context 对象 ​</h3><p>上述所说的老版本 context 就是 Legacy Context 模式下的 context ，老版本的 context 是采用约定式的使用规则，于是有了 <code>getChildContext</code> 和 <code>childContextTypes</code> 协商的属性和方法，这种方式不仅不够灵活，而且对于函数组件也存在局限性，所以在 <code>v16.3</code> 推出了新版本的 context，开发者能够更加灵活的运用 <code>Context</code>。新版本引入 context 对象的概念，而且 context 对象上除了保留了传递的信息 <code>value</code> 外 ， 还有提供者 <code>Provder</code> 和消费者 <code>Consumer</code>。</p><h4 id="context-对象" tabindex="-1">context 对象 ​</h4><p>要想吃透 context ，首先要研究一下 Context 对象是什么。上述讲到可以通过 <code>createContext</code> 创建一个 context 。那么万物之源就是这个 API ，接下来一起揭开 context 对象面纱。</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">export</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> function</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> createContext</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">defaultValue</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">calculateChangedBits</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">){</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">   /* context 对象本质  */</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> </span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> context</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        $$typeof: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">REACT_CONTEXT_TYPE</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">/* 本质上就是 Consumer element 类型 */</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        _calculateChangedBits: calculateChangedBits,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        _currentValue: defaultValue,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        _threadCount: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        Provider: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">null</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        Consumer: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">null</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  };</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  /* 本质上就是 Provider element 类型。  */</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  context.Provider </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    $$typeof: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">REACT_PROVIDER_TYPE</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    _context: context,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  };</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  context.Consumer </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> context </span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>如上可以很容易的看清楚 context 对象的本质，这里重点介绍三个属性</p><ul><li><code>Provider</code> 本质上是一个 element 对象 $$typeof -&gt; <code>REACT_PROVIDER_TYPE</code></li><li><code>Consumer</code> 本质上也是一个 element 对象 $$typeof -&gt; <code>REACT_CONTEXT_TYPE</code></li><li><code>_currentValue</code> 这个用来保存传递给 Provider 的 value 。</li></ul><h4 id="provider-提供者" tabindex="-1">Provider 提供者 ​</h4><p>上述明白了 Provider 本质上是一个特殊的 React Element 对象，那么接下来重点看一下 Provider 的实现原理，研究 Provider 重点围绕这两个点。</p><ul><li>Provider 如何传递 context 状态的。</li><li>Provider 中 value 改变，如何通知订阅 context。</li></ul><p>之前的章节讲述了 <strong>jsx -&gt; element -&gt; fiber</strong> 的流程，按照这个逻辑，接下来看一下 Provdier 的处理。</p><ul><li>首先标签形式的 <code>&lt;Provider&gt;</code> 本质上就是 <code>REACT_PROVIDER_TYPE</code> 的 React Element 。<code>&lt;Provider&gt;</code> -&gt; <code>REACT_PROVIDER_TYPE</code> React element 。</li><li>接下来 element 会转化成 fiber ，fiber 类型为 <strong>ContextProvider</strong> ， React element -&gt; <code>ContextProvide fiber</code>。</li></ul><p>ContextProvider 类型的 fiber ，在 fiber 调和阶段会进入到 <code>beginWork</code> 流程，这个阶段会发生两件事。</p><ul><li>如果当前类型的 fiber 不需要更新，那么会 <code>FinishedWork</code> 中止当前节点和子节点的更新。</li><li>如果当前类型 fiber 需要更新，那么会调用不同类型 fiber 的处理方法。当然 <code>ContextProvider</code> 也有特有的 fiber 更新方法 —— <code>updateContextProvider</code>，那么如果想要深入 <code>Provder</code> 的奥秘，有必要看一下这个方法做了些什么？</li></ul><blockquote><p>react-reconciler/src/ReactFiberBeginWork.js</p></blockquote><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">function</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> updateContextProvider</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">current</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> ,</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">workInProgress</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">renderExpirationTime</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,) {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  /*  获取 Provder 上的 value  */</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  pushProvider</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(workInProgress, newProps.value;);</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  /* 更新 context  */</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (oldProps </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">!==</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> null</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> changedBits</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> calculateChangedBits</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(context, newProps.value;, oldProps.value);</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (changedBits </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">===</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">      //context 没有变化。如果孩子们都是一样的话。那么不需要更新</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">      if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        oldProps.children </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">===</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> newProps.children </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&amp;&amp;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        !</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">hasLegacyContextChanged</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() </span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      ) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">         return</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> ...</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  // 停止调合子节点,收尾工作</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    } </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">else</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">/* context 改变，更新 context */</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">      propagateContextChange</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">( workInProgress,context, changedBits, renderExpirationTime,);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  }</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  /* 继续向下调和子代 fiber  */</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  ...</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>如上保留了 <code>updateContextProvider</code> 的核心流程如下：</p><ul><li><p>第一步： 首先会调用 <code>pushProvider</code>，<code>pushProvider</code> 会获取 type 属性上的 _context 对象，就是上述通过 <code>createContext</code> 创建的 context 对象。然后将 Provider 的 value 属性，赋值给 context 的 _currentValue 属性上。<strong>这里解释了 Provder 通过什么手段传递 context value，即通过挂载 context 的 _currentValue 属性</strong>。</p></li><li><p>第二步： 通过 <code>calculateChangedBits</code> 计算出 changedBits ，<code>calculateChangedBits</code> 内部触发 context 对象上的 <code>_calculateChangedBits</code> ，细心的同学可以发现，在调用 <code>createContext</code> 的时候，实际上是有第二个参数的 <code>calculateChangedBits</code>，在更新 Provider 的时候这个参数就派上用场了，当它返回的 <code>changedBits === 0</code> 的时候，那么还会浅比较 children 是否发生变化，还有就是有没有 <code>legacy context</code>，如果这三点都满足的话，那么会判断当前 Provider 和子节点不需要更新，那么会 return 停止向下调和子节点。</p></li><li><p>第三步（<strong>重点</strong>）：在实际开发中，绝大多数当 value 发生变化，会走 <code>propagateContextChange</code> 这个流程，也是 Provider 更新的特点。那么这个方法到底做了些什么呢？接下来重点看一下这个函数做了些什么？</p></li></ul><p><strong>propagateContextChange</strong> 函数流程很繁琐，这里简化了流程，保留了最核心的部分。</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">function</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> propagateContextChange</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">workInProgress</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">context</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">){</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    let</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> fiber </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> workInProgress.child;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (fiber </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">!==</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> null</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        fiber.return </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> workInProgress;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    while</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(fiber </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">!==</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> null</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">){</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> list</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> fiber.dependencies;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">         while</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (dependency </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">!==</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> null</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">              if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (dependency.context </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">===</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> context){</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">                   /* 类组件：不受 PureComponent 和 shouldComponentUpdate 影响 */</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">                   if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (fiber.tag </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">===</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> ClassComponent) {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">                         /* 会走 forceUpdate 逻辑 */</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">                        const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> update</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> createUpdate</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(renderExpirationTime, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">null</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">                        update.tag </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> ForceUpdate;</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">                        enqueueUpdate</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(fiber, update);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">                   }</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">                   /* 重要：TODO: 提高 fiber 的优先级，让当前 fiber 可以 beginWork ，并且向上更新父级 fiber 链上的优先级 */</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">                   ...</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">              } </span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">         }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p><code>propagateContextChange</code> 非常重要，它的职责就是深度遍历所有的子代 fiber ，然后找到里面具有 <code>dependencies</code> 的属性，对比 dependencies 中的 context 和当前 Provider 的 context 是否是同一个，如果是同一个，那么如果当前 fiber 是类组件，那么会给绑定一个 forceUpdate 标识 。然后会提高 fiber 的更新优先级，让 fiber 在接下来的调和过程中，处于一个高优先级待更新的状态。接下来的代码比较长，我这里没有全部罗列出来，大致逻辑就是，找到当前 fiber 向上的父级链上的 fiber ，统一更新他们的优先级，使之变成高优先级待更新状态。</p><p>那么上述流程中暴露出几个问题：</p><ul><li><p>1 什么情况下 fiber 会存在 dependencies ，首先 dependencies 在第十七章中会讲到，它保存的是 context 的依赖项，那么什么情况下会存在 <strong>context 依赖项</strong>。</p></li><li><p>2 为什么对于 class 类组件会创建一个 ForceUpdate 类型的 update 对象呢？ 知其然，知其所以然，首先看一下它是什么？</p></li></ul><p><strong>｜--------问与答--------｜</strong></p><p>问： <strong>ForceUpdate 类型 update</strong>： 什么是 forceUpdate 类型的 update 呢？</p><p>答：在类组件中，通过调用 <code>this.forceUpdate()</code> 带来的更新就会被打上 ForceUpdate 类型的 update tag，这里可以理解为强制更新。 生命周期章节讲过， 在类组件更新流程中，强制更新会跳过 <code>PureComponent</code> 和 <code>shouldComponentUpdate</code> 等优化策略。</p><p><strong>｜---------end---------｜</strong></p><ul><li>3 存在 dependency 的 fiber ，为什么要向上更新父级 fiber 链上的优先级，让所有父级 fiber 都处于一个高优先级。</li></ul><p>对于上面这三个问题，跟上我的思路逐一突破。</p><p><strong>第一个问题</strong>： 首先就是 dependencies 属性，这个属性可以把当前的 fiber 和 context 建立起关联，那么可以理解成，使用了当前 context 的 fiber 会把 context 放在 dependencies 中，dependencies 属性本身是一个链表结构，一个 fiber 可以有多个 context 与之对应。反过来推测一下，什么情况下会使用 context 呢。那么有以下几种可能：</p><ul><li>1 有 <code>contextType</code> 静态属性指向的类组件。</li><li>2 使用 <code>useContext</code> hooks 的函数组件。</li><li>3 context 提供的 <code>Consumer</code>。</li></ul><p>那么可以大胆的推测一下，<strong>使用过 contextType useContext 的组件对应 fiber,和 Consumer 类型 fiber，会和 dependencies 建立起联系，会把当前消费的 context 放入 dependencies 中。这个下面会给详细解释</strong></p><p><strong>第二个问题</strong>： 为什么对于 class 组件会创建一个 ForceUpdate 的 update 呢？</p><p>在<strong>生命周期章节和渲染控制章节</strong>，讲到过如果想要让类组件调用 render，得到新的 children，那么就要通过 <code>PureComponent</code> 和 <code>shouldComponentUpdate</code> 等层层阻碍，那么 context 要突破这些控制，就要做到当 value 改变，消费 context 的类组件更新，则需要通过 forceUpdate 强制更新。这样就解决了类组件更新限制。</p><p>那么总结一下流程，当 Provider 的 value 更新之后，Provider 下面的只要有消费了 context 的类组件，就会触发强制更新。这也就解释了最开始的问题——<strong>context 更新，如何避免 <code>pureComponent</code> ， <code>shouldComponentUpdate</code> 渲染控制策略的影响</strong>。 用一幅流程图表示：</p><p><img src="https://p1-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/6ad02d5d2b0640ca8d376abebff714a2~tplv-k3u1fbpfcp-jj-mark:3024:0:0:0:q75.awebp" alt="context7.jpg"></p><p><strong>第三个问题</strong>： 这个问题就要从 Provider 类型的 fiber 调和开始讲。</p><h4 id="provider-和-beiginwork-调和更新机制" tabindex="-1">Provider 和 beiginWork 调和更新机制 ​</h4><p>接下来重点介绍 Provider 和 beiginWork 调和更新机制。首先引出两个思考点：</p><ul><li>第一个类组件执行 render ，函数组件执行就是渲染么？</li><li>第二个 Context 改变如何做到消费 context 的组件更新的？（更新原理）</li></ul><p>先来看一下第一个思考点，关于渲染的思考，实际上在 React 整个 <code>Reconciler</code> 调和流程中，从更新调度任务的发起，再到在 commit 和 render 两大阶段，再到真实的 dom 元素绘制，每一个环节都属于渲染的一部分。而开发者能够控制的 render ，只是其中的一小部分——类组件执行 render ，函数组件执行。而且这些本质上都发生在 FunctionComponent fiber 和 ClassComponent fiber 上。但是整个 fiber 树在调和阶段都需要更新的。更新调和 fiber 的方法在 React 底层叫做 <code>beginWork</code>。有一个问题需要注意，就是 <code>beginWork</code> 非 render。先来看看两者的区别。</p><ul><li><code>beginWork</code> ： 在一次更新中，只要需要更新的 fiber 或者受到牵连的 fiber，都会执行 beginWork 。</li><li><code>render</code> ： 在一次更新中，只有组件类型的 fiber 会执行 render ，得到新的 children 。如果组件触发 render 那么它一定经历过 <code>beginWork</code></li></ul><p>这里如果有同学不明白不要紧，接着往下看。</p><p>比如发生一次更新任务，此次更新可能发生整个 fiber 树的任意枝叶上，但是因为 context props 穿透影响，React 不知道此次更新的波及范围，那么如何处理呢？ React 会从 rootFiber 开始更新，每一个更新 fiber 都会走 <code>beginWork</code> 流程，开始找不同，找到有没有需要更新的地方，那么指标是什么呢，其中一个重要的指标就是<strong>更新的优先级</strong>，老版本用的是 <code>expirationTime</code> ，新版本用的是 <code>lane</code>，那么就要保证一个问题，就是如果更新发生在一个子代节点，那么只有父节点 <code>beginWork</code> 才能让子代节点 <code>beginWork</code>。这样就形成了一条 root fiber -&gt; 父 fiber -&gt; 子 fiber 的 <code>beginWork</code> 链。在 beginwork 过程中，有几种情况：</p><ul><li>第一种： 如果遇到组件，而且更新不涉及当前组件，也不在当前组件的父子递归链上，那么就不会 render，也不会向下 beginWork 。</li><li>第二种： 如果遇到组件，而且更新不涉及当前组件，但是更新组件属于当前组件的子孙后代，那么不会 render，但是会向下 beginWork ，目的很明确，找到对应的更新组件。</li><li>第三种： 如果遇到其他类型的 fiber 比如 hostComponent <code>&lt;div&gt;</code>，那么会对比当前的更新优先级，如果低优先级，那么不需要向下 beginWork 。反之向下 beginWork。</li></ul><p>这么说可能大家不是很理解，我举一个例子：</p><p>如下当点击 componentB 下面的 span 触发 setState 更新 ，如下可以清晰看见 beginWork 和 render 流程。</p><p><img src="https://p9-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/4be69acfeb8d42c68249f96b8bbb7b98~tplv-k3u1fbpfcp-jj-mark:3024:0:0:0:q75.awebp" alt="context8.jpg"></p><ul><li>从 root 开始第一次调和， 三个 fiber 都会经历 beginWork ，通过对比优先级， <code>componentA</code> 和 <code>div</code> 停止向下 beginwork。</li><li>更新发生在 componentB ，所以 componentB 渲染，触发 <code>render</code> ，得到新的 element，通过对比， <code>div</code> <code>span</code> 都会 beginwork。</li><li>componentC 由于父组件更新，没有任何优化策略的情况，那么也会跟着 <code>render</code>，接着 div 也会跟着 <code>beginwork</code>。</li></ul><p>那么如上，如果 componentC 通过 <code>PureComponent</code> 或者 <code>shouldComponentUpdate</code> 限制更新之后。那么会变成如下的样子：</p><p><img src="https://p1-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/76bac2d4e134455dbdf31fa33cd7f27b~tplv-k3u1fbpfcp-jj-mark:3024:0:0:0:q75.awebp" alt="context9.jpg"></p><ul><li>如上 componentC 通过 <code>PureComponent</code> 处理后，不再 render ，当然也不会再向下 beginwork。</li></ul><p>接下来，如果点击 componentC 下的 div，触发 setState 更新，那么又会发生什么呢？</p><ul><li>此时更新发生在 <code>componentC</code> 上，所以 componentB 只会发生 beginwork ，不会发生 render。</li><li><code>componentB</code> 下面的 <code>div</code> 会停止向下的 beiginwork 。</li></ul><p><img src="https://p1-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/015b6ad8e1404fae88319b150cd05451~tplv-k3u1fbpfcp-jj-mark:3024:0:0:0:q75.awebp" alt="context10.jpg"></p><p><strong>我们总结流程如下：</strong></p><ul><li>1 如果一个组件发生更新，那么当前组件到 fiber root 上的父级链上的所有 fiber ，更新优先级都会升高，都会触发 beginwork 。</li><li>2 render 不等于 beginWork，但是 render 发生，一定触发了 beginwork 。</li><li>3 一次 beginwork ，一个 fiber 下的同级兄弟 fiber 会发生对比，找到任务优先级高的 fiber 。向下 beginwork 。</li></ul><p>对于 beginwork 的流程，接下来会有专门的章节维护。</p><p><strong>Context 原理</strong></p><p>接下来言归正传，我们来研究一下 context 的更新原理，上面说到 <code>Provider</code> 更新，会递归所有的子组件，只要消费了 context 的子代 fiber ，都会给一个高优先级。而且向上更新父级 fiber 链上的优先级，让所有父级 fiber 都处于一个高优先级。那么接下来高优先级的 fiber 都会 beginWork 。</p><p>那么将上述例子进行修改，<code>propagateContextChange</code> 的流程会下如下一样，把父级 fiber 的优先级提高。</p><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/84210209b512493889a9d2c3a066324e~tplv-k3u1fbpfcp-jj-mark:3024:0:0:0:q75.awebp" alt="context11.jpg"></p><p>那么整个 fiber 更新流程会像如下一样</p><p><img src="https://p1-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/761505beb9664b09a27599550b6a0cf7~tplv-k3u1fbpfcp-jj-mark:3024:0:0:0:q75.awebp" alt="context12.jpg"></p><h3 id="_2-consumer" tabindex="-1">2 Consumer ​</h3><p>我们已经讲了 Provider 核心原理，还有另外一部分就是 Consumer ，研究一下其原理。</p><h4 id="consumer-流程" tabindex="-1">Consumer 流程 ​</h4><p>上文说道，Consumer 本质上是类型为 <code>REACT_CONTEXT_TYPE</code> 的 element 对象。在调和阶段，会转化成 <code>ContextConsumer</code> 类型的 fiber 对象。在 beginwork 中，会调用 <code>updateContextConsumer</code> 方法。那么这个方法做了些什么呢？</p><blockquote><p>react/react-reconcider/src/ReactFiberBeginWork.js</p></blockquote><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">function</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> updateContextConsumer</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">current</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">workInProgress</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">renderExpirationTime</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  let</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> context  </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> workInProgress.type;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> newProps</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> workInProgress.pendingProps;</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  /* 得到 render props children */</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> render</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> newProps.children;</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  /* 读取 context */</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> </span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  prepareToReadContext</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(workInProgress, renderExpirationTime);</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  /* 得到最新的新的 context value */</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> newValue</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> readContext</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(context, newProps.unstable_observedBits);</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  let</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> newChildren;</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  /* 得到最新的 children element */</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  newChildren </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> render</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(newValue);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  workInProgress.effectTag </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">|=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> PerformedWork;</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  /* 调和 children */</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  reconcileChildren</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(current, workInProgress, newChildren, renderExpirationTime);</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> workInProgress.child;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p><code>updateContextConsumer</code>的核心流程：</p><ul><li>首先调用 <code>readContext</code> 获取最新的 value 。</li><li>然后通过 <code>render props</code> 函数，传入最新的 value，得到最新的 <code>children</code> 。</li><li>接下来调和 <code>children</code> 。</li></ul><p>那么有一个问题<strong>就是 fiber 上的 dependencies 如何和 context 建立起关联</strong>。 那么就是 <code>readContext</code> 这个函数做的事，可以提前透露一下，useContext 和 contextType 本质上也是</p><h4 id="readcontext" tabindex="-1">readContext ​</h4><p>readContext 是除了 <code>Provider</code> 之外，第二个核心知识点。</p><blockquote><p>react/react-reconcider/src/ReactFiberNewContext.js</p></blockquote><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">export</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> function</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> readContext</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">( </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">context</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">observedBits</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> ){</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    /* 创建一个 contextItem */</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> contextItem</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      context,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      observedBits: resolvedObservedBits,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      next: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">null</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    };</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    /* 不存在最后一个 context Dependency  */</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (lastContextDependency </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">===</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> null</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      lastContextDependency </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> contextItem;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      currentlyRenderingFiber.dependencies </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        expirationTime: NoWork,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        firstContext: contextItem,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        responders: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">null</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      };</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    } </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">else</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">      /* 存在的情况 */</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      lastContextDependency </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> lastContextDependency.next </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> contextItem;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">   </span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> isPrimaryRenderer </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">?</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> context._currentValue </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> context._currentValue2;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><ul><li>readContext 主要做的事情是这样的，首先会创建一个 contextItem ，上述说到过 fiber 上会存在多个 <code>dependencies</code> ，它们以链表的形式联系到一起，如果不存在最后一个 <code>context dependency</code> ，那证明 context dependencies 为空 ，那么会创建第一个 dependency ，如果存在最后一个 dependency ，那么 contextItem 会以链表形式保存，并变成最后一个 lastContextDependency 。</li></ul><h4 id="多个-provider-嵌套" tabindex="-1">多个 Provider 嵌套 ​</h4><p>如果有多个 Provider 的情况，那么后一个 contextValue 会覆盖前一个 contextValue，在开发者脑海中，要有一个定律就是：<strong><code>Provider</code> 是用来传递 value，而非保存 value</strong> 。</p><h3 id="_3-contexttype-和-usecontext" tabindex="-1">3 contextType 和 useContext ​</h3><h4 id="usecontext-原理" tabindex="-1">useContext 原理 ​</h4><p><code>useContext</code> 原理，调用 useContext 本质上调用 <code>readContext</code> 方法。</p><blockquote><p>react/react-reconcider/src/ReactFiberHooks.js</p></blockquote><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> HooksDispatcherOnMount</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    useContext: readContext</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><ul><li>函数组件通过 readContext ，将函数组件的 <code>dependencies</code> 和当前 context 建立起关联，context 改变，将当前函数组件设置高优先级，促使其渲染。</li></ul><h4 id="contexttype-原理" tabindex="-1">contextType 原理 ​</h4><p>类组件的静态属性 <code>contextType</code> 和 useContext 一样，本质上就是调用 readContext 方法。</p><blockquote><p>react/react-reconcider/src/ReactFiberClassComponent.js</p></blockquote><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">function</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> constructClassInstance</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">workInProgress</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">ctor</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">props</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">){</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">     if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">typeof</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> contextType </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">===</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;object&#39;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> &amp;&amp;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> contextType </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">!==</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> null</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">         /* 读取 context  */</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        context </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> readContext</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(contextType);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    } </span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> instance</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> ctor</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(props, context);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><ul><li>静态属性 contextType ，在类组件实例化的时候被使用，本质上也是调用 <code>readContext</code>将 context 和 fiber 上的 <code>dependencies</code> 建立起关联。</li></ul><h3 id="_4-context-流程总结" tabindex="-1">4 Context 流程总结 ​</h3><p>下面对整个 context 原理部分做总结。</p><ul><li><p>Provider 传递流程：Provider 的更新，会深度遍历子代 fiber，消费 context 的 fiber 和父级链都会提升更新优先级。 对于类组件的 fiber ，会 forceUpdate 处理。接下来所有消费的 fiber，都会 beginWork 。</p></li><li><p>context 订阅流程： <code>contextType</code> ， <code>useContext</code>， <code>Consumer</code> 会内部调用 <code>readContext</code> ，readContext 会把 fiber 上的 <code>dependencies</code> 属性和 context 对象建立起关联。</p></li></ul><h3 id="_5-总结" tabindex="-1">5 总结 ​</h3><p>本章节知识点总结:</p><ul><li>context 原理，Provider 做了些什么。</li><li>beginWork 和 render 的更新原则和区别。</li><li>三种 context 传递模式原理。</li><li>context 订阅消费原理。</li><li>Provider 嵌套传递原理。</li></ul><p>透漏一下，接下来会更新另外一个新的章节 fiber 初始化和调和流程。</p>`,104),p=[t];function l(h,k,r,d,o,c){return e(),i("div",null,p)}const x=s(a,[["render",l]]);export{C as __pageData,x as default};
