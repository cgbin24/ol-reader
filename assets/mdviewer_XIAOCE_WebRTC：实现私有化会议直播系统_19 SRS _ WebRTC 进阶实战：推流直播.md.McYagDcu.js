import{_ as s}from"./app.BdTF1atn.js";import{j as i,i as a,Z as h}from"./chunks/@vue.D6nrJjhM.js";/* empty css                          */import"./chunks/@vueuse.ErXst1iV.js";const C=JSON.parse('{"title":"","description":"","frontmatter":{},"headers":[],"relativePath":"mdviewer/XIAOCE/WebRTC：实现私有化会议直播系统/19 SRS + WebRTC 进阶实战：推流直播.md","filePath":"mdviewer/XIAOCE/WebRTC：实现私有化会议直播系统/19 SRS + WebRTC 进阶实战：推流直播.md"}'),n={name:"mdviewer/XIAOCE/WebRTC：实现私有化会议直播系统/19 SRS + WebRTC 进阶实战：推流直播.md"},p=h(`<p>上一节我们在测试 SRS 是否搭建成功的时候，使用 Ffmpeg 推 mp4 视频流到 SRS，并使用 <code>FLV</code> 的形式在页面播放视频流，而我们小册的主题是 <code>WebRTC</code>，因此必不可少的就是用 <code>WebRTC</code> 去和 SRS “打交道”，接下来我们就看看 <code>WebRTC</code> 是怎样和 SRS 流媒体服务器搭配并控制媒体的。</p><p>首先我们来看看 “推流”，推流指的是将媒体流推送到流媒体服务器，这个媒体流包括摄像头、普通视频、第三方链接流（Http、RTMP 等格式）、图片、音频等各种多媒体格式。而我们的重点则是<code>摄像头的流</code>去推到流媒体服务器。虽然摄像头的流是本节课重点，但是为了让大家对推流有更深刻的认识，我会将各种格式的流都演示下。</p><h3 id="推流播放器" tabindex="-1">推流播放器 ​</h3><p>我们推流到流媒体服务器之后，如果用原始的形式，比如 RTMP 推流，再用 RTMP 拉流，由于浏览器已经不再支持了，也就无法直接播放了。因此我们现阶段都是通过 flv 格式的拉流并播放，而播放需要用到的播放器就是 flv 播放器：FLV播放器官方地址。</p><p>SRS 服务自带的控制台也是利用这个开发的，我们小册代码中也有，如下：</p><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/215c69d8bd5446e4a189705c400de0a5~tplv-k3u1fbpfcp-jj-mark:3024:0:0:0:q75.awebp" alt=""></p><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/bd107d9dd1254797974d1e1190e51aa9~tplv-k3u1fbpfcp-jj-mark:3024:0:0:0:q75.awebp" alt=""></p><h3 id="普通推流实战" tabindex="-1">普通推流实战 ​</h3><p>首先，请注意我在推流的时候会携带一些参数（大部分参数在上一节解释过，但是没有实战，这里我会借助推流去实际应用下）。</p><p>其次，推送到流媒体服务器的流是通过 live 后的参数区分的，比如我在小册中举例的推流地址为：<code>rtmp://192.168.101.99:1935/live/suke001</code>，前一部分为 SRS 部署服务器，中间的端口则为 RTMP 默认端口，最后面部分<code>/live/{streamId}</code>，为具体的流区分地址，其中<code>streamId</code>就是核心区分参数，不同的流，这个参数不一样就行，自定义即可。</p><p>最后就是预览流<code>http://\`\`192.168.101.99\`\`:8085/live/1001.flv</code>，这个就是推送后预览流的地址，所有推送的 SRS 流媒体服务器的流都会自动转为 <code>FLV</code> 格式，这个流最后的 <code>1001</code>就是推流时候的<code>streamId</code>，推的时候是什么，那么播放的时候就是什么。</p><p>预览流并不是只有<code>FLV</code>一种，也有 <code>HLS</code> 格式的，SRS 的配置中是默认开启推流自动转换为这两种格式的，预览格式和<code>FLV</code> 类似，只不过后缀不一样：<code>http://192.168.101.99:8085/live/1001.\`\`m3u8</code>。</p><p><strong>以上两种预览流就是我们现阶段大多数平台直播常用的两种直播流格式</strong>。</p><h4 id="本地视频推流" tabindex="-1">本地视频推流 ​</h4><p>代码中用到参数详解：</p><ul><li><p><code>-c:v copy</code>：复制原有视频格式，比如我本地的视频格式为 H.264，那么当前在将此视频推到流媒体服务器过程中，视频编码格式是不会变的。拉流的时候，视频编码格式也同样是 H.264。但是大家要注意，现阶段浏览器默认支持播放的视频编解码格式是有限的，比如常见的支持的两种：H.264 和 VP8，而其他的比如：H.265、VP9、AV1 等格式并不是所有浏览器都兼容编解码的。</p><p>因此如果你本地视频是 H.265 格式，那么你当前编码格式设置就不能为 <code>copy</code>，否则浏览器就没法播放了。具体看下面代码第三种指定编码为 <code>libx264</code>推流。</p></li><li><p><code>-c:a aac：</code>指定音频编码格式为 AAC。和视频格式一样，浏览器默认支持播放的音频格式也是有限的，常见支持的格式有：Opus、AAC、PCM 等。而 G.711、Ogg 等在不同浏览器是无法兼容播放的。</p></li></ul><div class="language-sh vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">//第一种</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> H.264视频</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">  aac音频格式</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> 推流</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  </span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">ffmpeg</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -i</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> target.mp4</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -c:v</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> copy</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  -c:a</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> aac</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -f</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> flv</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> rtmp://192.168.101.99:1935/live/1001</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">//第二种</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> H.264视频</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> 并去除音频格式</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> 推流</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">ffmpeg</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -i</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> target.mp4</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -c:v</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> copy</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  -an</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -f</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> flv</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> rtmp://192.168.101.99:1935/live/1001</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">//第三种</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> H.265/H.264</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> 编码为</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> 264格式</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> 去除音频推流</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">ffmpeg</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -i</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> target.mp4</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -c:v</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> libx264</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  -an</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -f</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> flv</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> rtmp://192.168.101.99:1935/live/1001</span></span></code></pre></div><h4 id="网络地址流播放" tabindex="-1">网络地址流播放 ​</h4><p>下面第一个例子是我将本地流推送到流媒体服务器，通过 RTMP 拉流再继续推到流媒体服务器（注意区分流的<code>流ID</code>）。</p><div class="language-sh vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">//RTMP流</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> 推送到</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> rtmp://192.168.101.99:1935/live/1002</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> 并去除音频</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">ffmpeg</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -i</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> rtmp://192.168.101.99:1935/live/1001</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -c:v</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> copy</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -an</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -f</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> flv</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> rtmp://192.168.101.99:1935/live/1002</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">//RTSP</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> 流</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> 推流到</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> RTMP服务器</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> （流ID</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> 1003）</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">ffmpeg</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -i</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> rtsp://wowzaec2demo.streamlock.net/vod/mp4:BigBuckBunny_115k.mp4</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -c:v</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> copy</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -c:a</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> copy</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -f</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> flv</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> rtmp://192.168.101.99:1935/live/1003</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">//普通mp4流推流</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> 上一节课演示过</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">ffmpeg</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -i</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">  http://vfx.mtime.cn/Video/2019/02/04/mp4/190204084208765161.mp4</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -c:v</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> copy</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -c:a</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> copy</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -f</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> flv</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> rtmp://192.168.101.99:1935/live/suke01</span></span></code></pre></div><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/e74cdf153fdf4f7dbe7fd6fcf9d8fbd7~tplv-k3u1fbpfcp-jj-mark:3024:0:0:0:q75.awebp" alt=""></p><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/08bfee09ea8f46f69501f784eb4c4eb1~tplv-k3u1fbpfcp-jj-mark:3024:0:0:0:q75.awebp" alt=""></p><h4 id="图片推流" tabindex="-1">图片推流 ​</h4><p>图片推流要注意的是单张图片并不能构成一个视频，这里我们可以通过无限循环推送图片，同时图片也不具备视频格式，我们可以通过指定编码为 H.264，让媒体服务器认为它是 H.264 的视频格式。</p><p>温馨提示：无限循环参数：<code>-loop 1</code> 仅适用在图片循环，如果是本地视频推流，若要本地视频无限循环播放，请使用 <code>-stream_loop -1</code>。</p><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/061fa9d8f6854bc885b83f51b5d67d79~tplv-k3u1fbpfcp-jj-mark:3024:0:0:0:q75.awebp" alt=""></p><div class="language-sh vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">//</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> local.png</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> 为本地截图</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  -loop</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 1</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">  为图片无限循环</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">ffmpeg</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -loop</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 1</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  -i</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> local.png</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -c:v</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> libx264</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -an</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -f</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> flv</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> rtmp://192.168.101.99:1935/live/1001</span></span></code></pre></div><p>是不是很惊喜，图片竟然也可以当作视频来推流？这就是 Ffmpeg 的强大之处。</p><h4 id="屏幕分享推流" tabindex="-1">屏幕分享推流 ​</h4><p>借助 Ffmpeg 的强大，我们可以直接捕获桌面的视频流，然后推送到 SRS 流媒体服务器中。</p><div class="language-sh vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">//gdigrab</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">  桌面捕获器</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> </span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">ffmpeg</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -f</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> gdigrab</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -i</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> desktop</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -c:v</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> libx264</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -an</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -f</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> flv</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> rtmp://192.168.101.99:1935/live/1001</span></span></code></pre></div><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/a2ce1ebb95644cc8ac48d707af6cd6b2~tplv-k3u1fbpfcp-jj-mark:3024:0:0:0:q75.awebp" alt=""></p><p>举例这么多，就是为了让大家熟悉流媒体服务器的场景多样性，以及扩宽我们对 SRS 流媒体服务的认识。</p><p>但是这几个例子都和我们的 <code>WebRTC</code> 没直接联系，接下来我们就要看看如何让 <code>WebRTC</code> 给 SRS 推流。</p><h3 id="webrtc-推流" tabindex="-1">WebRTC 推流 ​</h3><p>使用<code>WebRTC</code> 给 SRS 流媒体推流也需要遵循 <code>WebRTC</code> 的核心会话流程的，和前面的 Janus 类似，你需要和服务器进行 <code>WebRTC</code> 关联。</p><h4 id="流媒体服务器交互流程" tabindex="-1">流媒体服务器交互流程 ​</h4><ol><li>本地获取媒体流。</li></ol><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">async </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">getLocalUserMedia</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(audioId,videoId){</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">   const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> constraints</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">       audio: {deviceId: audioId </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">?</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {exact: audioId} </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> undefined</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">},</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">       video: {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">           deviceId: videoId </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">?</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {exact: videoId} </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> undefined</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">           width:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1920</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">           height:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1080</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">           frameRate: { ideal: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">15</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, max: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">24</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">       }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">   };</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">   if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (window.stream) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">       window.stream.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">getTracks</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">().</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">forEach</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">track</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">           track.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">stop</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">       });</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">   }</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">return</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> await</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> navigator.mediaDevices.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">getUserMedia</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(constraints).</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">catch</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(handleError)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">},</span></span></code></pre></div><ol start="2"><li>初始化核心关联对象 <code>PeerConnection</code>实例，并添加媒体流。</li></ol><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> that</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> this</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">that.pc </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> await</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> PeerConnection</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">null</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">//sendonly 参数请注意 不要设置操作 同时请注意 audio和video的顺序 如果发送和接收顺序不一样 那么你的RTC关联建立是不能成功</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">that.pc.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">addTransceiver</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;audio&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, {direction: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;sendonly&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">});</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">that.pc.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">addTransceiver</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;video&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, {direction: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;sendonly&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">});</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">//stream 为本地获取到的媒体流</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">stream.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">getTracks</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">().</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">forEach</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">function</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">track</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        that.pc.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">addTrack</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(track);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">});</span></span></code></pre></div><ol start="3"><li>创建<code>offer sdp</code> 信息，并组装 SRS 流媒体服务 API 需要的参数。</li></ol><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">//创建 offer sdp </span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">let</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> offer </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> await</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> that.pc.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">createOffer</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">await</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> that.pc.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">setLocalDescription</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(offer)</span></span></code></pre></div><ol start="4"><li>利用上述参数交换流媒体服务端生成的<code>answer sdp</code>信息，交换后，设置到本地完成<code>WebRTC</code> 的交换流程。</li></ol><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">//按照 SRS 开放的API组装参数 </span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">let</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> data </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">  &quot;api&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">this</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.$srsServerAPIURL</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">+</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;rtc/v1/publish/&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">  &quot;streamurl&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">this</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.$srsServerRTCURL</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">+</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">streamId,</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">  &quot;sdp&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: offer.sdp</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">//和服务器请求获取回调的SDP信息 并添加到本地 实例化后的 PeerConnection 中</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">axios.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">post</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">this</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.$srsServerAPIURL</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">+</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;rtc/v1/publish/&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,data)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">then</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">( </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">async</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;"> res</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        res </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> res.data</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(res)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(res.code </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">===</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">){</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">                await</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> that.pc.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">setRemoteDescription</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> RTCSessionDescription</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">({type: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;answer&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, sdp: res.sdp}))</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">                that.scanUrl </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> that.$srsServerFlvURL</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">+</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">streamId</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">+</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;.flv&#39;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}).</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">catch</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">err</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">error</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;SRS 推流异常&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,err)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">})</span></span></code></pre></div><h4 id="演示" tabindex="-1">演示 ​</h4><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/eaa30e8561c54e999aac497f8fa32319~tplv-k3u1fbpfcp-jj-mark:3024:0:0:0:q75.awebp" alt=""></p><p>以上，就是通过 <code>WebRTC</code> 将我们摄像头的流直接推送到 SRS 流媒体服务器中，然后通过<code>FLV</code> 拉流播放，当然也可以通过 HLS 拉流。</p><h3 id="本节课源代码" tabindex="-1">本节课源代码 ​</h3><p>本节课相关源码地址</p><p>本节课相关源码地址</p><h3 id="课后题" tabindex="-1">课后题 ​</h3><p>请大家观察 B 站直播地址，看看 B 站直播流的格式。另外，我在项目中只写了 <code>FLV</code> 格式播放的页面，请大家扩展下播放<code>HLS</code>格式的播放器。</p>`,53),k=[p];function t(l,e,d,r,E,F){return a(),i("div",null,k)}const B=s(n,[["render",t]]);export{C as __pageData,B as default};
