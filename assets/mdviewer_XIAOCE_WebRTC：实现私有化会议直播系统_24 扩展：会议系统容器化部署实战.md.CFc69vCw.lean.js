import{_ as s}from"./app.BdTF1atn.js";import{j as i,i as a,Z as n}from"./chunks/@vue.D6nrJjhM.js";/* empty css                          */import"./chunks/@vueuse.ErXst1iV.js";const C=JSON.parse('{"title":"","description":"","frontmatter":{},"headers":[],"relativePath":"mdviewer/XIAOCE/WebRTC：实现私有化会议直播系统/24 扩展：会议系统容器化部署实战.md","filePath":"mdviewer/XIAOCE/WebRTC：实现私有化会议直播系统/24 扩展：会议系统容器化部署实战.md"}'),p={name:"mdviewer/XIAOCE/WebRTC：实现私有化会议直播系统/24 扩展：会议系统容器化部署实战.md"},l=n(`<p>上节课我们从会议系统本身的基础配置出发，系统讲解并演示了会议系统部署到线上后云服务器需要注意的点，以及信令服务、流媒体服务、<code>WebRTC</code>网关服务、网络穿透服务如何配置在前端项目中，同时我们也实际操作，将信令服务和会议系统前端文件结合通过 <code>Nginx</code>映射到指定的域名，并让其支持<code>HTTPS</code>访问。</p><p>这节课，我们的核心是会议服务容器化，容器化对于现在云原生时代而言是必要的，通过容器我们可以更方便的管理和迁移我们的各种服务。</p><h3 id="基础服务容器化" tabindex="-1">基础服务容器化 ​</h3><p>首先从信令服务出发，将信令服务容器化。容器化的方式我们则通过 <code>Docker</code> 容器来承载基础服务，那么第一步应该是制作特定的<code>Dockerfile</code>文件。</p><p><code>Dockerfile</code>文件是自有服务制作 Docker 镜像的核心文件，我们现在用到的 Docker 镜像都离不开该文件。</p><ul><li>第一行：信令服务需要依赖 <code>Node</code>环境，因此我们的基准镜像选择 <code>node:14.21.0-buster</code>。</li><li>第二行：需要注意的是时区，如果当前服务依赖对时间有严格要求的，请注意时区配置。<strong><code>Docker</code>容器默认时区是 UTC ，此时如果获取服务器时间则比北京时间少8小时</strong>。</li><li>第三行：<code>CMD</code>表示自定义的命令，这里我输出的是一段话。</li><li>第四行：拷贝文件夹到容器内部。我们所有的核心<code>服务</code>就是这个文件夹，因此需要将这些文件拷贝到镜像中去，后面根据镜像启动容器的时候才可以找到对应的<code>服务</code>。</li><li>第五行：设置工作空间，即容器默认启动的工作目录。</li><li>第六行：<code>ENTRYPOINT</code>，容器启动后需要执行的命令。这个命令只有在启动容器的时候才会执行，构建镜像的时候不会。</li></ul><div class="language-dockerfile vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">dockerfile</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">FROM</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> node:14.21.0-buster</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">ENV</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> TZ=Asia/Shanghai</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">CMD</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;echo 信令服务器启动 dist目录为音视频前端目录，请使用nginx代理后访问，代理前端口：18080&quot;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">COPY</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> ./server /server</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">WORKDIR</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> /server</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">ENTRYPOINT</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> [</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;node&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;/app.js&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">]</span></span></code></pre></div><p><strong>整体目录</strong></p><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/ead305f879e84f9299a2d68c237cef75~tplv-k3u1fbpfcp-jj-mark:3024:0:0:0:q75.awebp" alt=""></p><p><strong>构建 Docker 镜像</strong></p><div class="language-sh vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 在Dockerfile文件同目录执行下面语句 -t 表示指定的标签+版本号 ；不要网络后面那个点</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">root@VM-4-3-ubuntu:/home/ubuntu/suke-nrtc#</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> docker</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> build</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -t</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> suke-media-nrtc:2.0</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">  .</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Sending</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> build</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> context</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> to</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> Docker</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> daemon</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">  70.83MB</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Step</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> 1/6</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> :</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> FROM</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> node:14.21.0-buster</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> ---</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt; </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">bd24482b8c86</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Step</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> 2/6</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> :</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> ENV</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> TZ=Asia/Shanghai</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> ---</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt; </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">Using</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> cache</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> ---</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt; </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">1331b3ea89ea</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Step</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> 3/6</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> :</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> CMD</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;echo 信令服务器启动 dist目录为音视频前端目录，请使用nginx代理后访问，代理前端口：18080&quot;</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> ---</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt; </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">Using</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> cache</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> ---</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt; </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">1a642db0ce12</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Step</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> 4/6</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> :</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> COPY</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> ./server</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> /server</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> ---</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt; </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">Using</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> cache</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> ---</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt; </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">c0e2a8a0009e</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Step</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> 5/6</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> :</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> WORKDIR</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> /server</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> ---</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt; </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">Using</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> cache</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> ---</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt; </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">dfcf81c0644c</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Step</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> 6/6</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> :</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> ENTRYPOINT</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> [</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;node&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;app.js&quot;]</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> ---</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt; </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">Using</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> cache</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> ---</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt; </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">b0ddd996a31d</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Successfully</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> built</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> b0ddd996a31d</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Successfully</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> tagged</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> suke-media-nrtc:2.0</span></span></code></pre></div><p><strong>构建完成后启动容器</strong></p><blockquote><p><code>--name</code>：指定容器名称；<code>--restart</code> ：自动重启，比如服务器关机重启后，容器会自动重启； <code>-p</code>： <code>宿主机端口:容器内部服务暴露端口</code>；最后面参数为上一步构建的<code>镜像+版本</code>。</p></blockquote><div class="language-sh vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">sudo</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> docker</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> run</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -d</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --name</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> suke-media-nrtc</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --restart=always</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  -p</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> 18080:18080</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> suke-media-nrtc:2.0</span></span></code></pre></div><h3 id="前后端分离容器化部署" tabindex="-1">前后端分离容器化部署 ​</h3><p>上一步容器化部署是将会议前端和信令服务结合一起部署的，但是有些人并不想前端和后端信令服务绑定到一起，因此就需要拆分部署，也就是所谓的前端和后端分离部署，这个时候就需要用到<code>Nginx</code>了。</p><p>我们先大体上梳理下，前后分离部署的基础步骤：</p><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/59ef82eb205d48a78fa8de0d454fe657~tplv-k3u1fbpfcp-jj-mark:3024:0:0:0:q75.awebp" alt=""></p><p>本质上和基础服务容器化一样，都是制作自己的镜像，接下来我们按照上图中的内容步骤制作我们自己的镜像。</p><ol><li>准备 Nginx 配置文件 <code>nginx.conf</code>。</li></ol><blockquote><p><code>server_name</code> 绑定自己的域名即可。</p><p>注意下面的两个路径 <code>/usr/web/nginx/ssl</code>、<code>/usr/web/nginx/html</code>，一个是SSL证书位置，一个是前端静态文件夹。</p><p><code>/signal-api/</code>为<code>Nginx</code>代理路径。被代理的服务地址：<code>proxy_pass http://x.x.x.x;</code> 。</p></blockquote><div class="language-conf vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">conf</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>server {</span></span>
<span class="line"><span>listen       19003 ssl;</span></span>
<span class="line"><span>server_name  localhost;</span></span>
<span class="line"><span>client_max_body_size 1024M;</span></span>
<span class="line"><span>ssl_certificate /usr/web/nginx/ssl/cert.crt;</span></span>
<span class="line"><span>ssl_certificate_key /usr/web/nginx/ssl/private.key;</span></span>
<span class="line"><span>ssl_protocols TLSv1 TLSv1.1 TLSv1.2 TLSv1.3;</span></span>
<span class="line"><span>access_log  /var/log/nginx/host.access.log  main;</span></span>
<span class="line"><span>error_log  /var/log/nginx/error.log  error;</span></span>
<span class="line"><span>location / {</span></span>
<span class="line"><span>    root   /usr/web/nginx/html;</span></span>
<span class="line"><span>    index  index.html index.htm;</span></span>
<span class="line"><span>}</span></span>
<span class="line"><span> location  /signal-api/ {</span></span>
<span class="line"><span>            proxy_pass http://x.x.x.x:18088; # 信令服务地址配置</span></span>
<span class="line"><span>            proxy_http_version 1.1;</span></span>
<span class="line"><span>            proxy_set_header Upgrade $http_upgrade;</span></span>
<span class="line"><span>            proxy_set_header Connection &quot;upgrade&quot;;</span></span>
<span class="line"><span>        }</span></span>
<span class="line"><span>error_page   500 502 503 504  /50x.html;</span></span>
<span class="line"><span>location = /50x.html {</span></span>
<span class="line"><span>    root   /usr/share/nginx/html;</span></span>
<span class="line"><span>}</span></span>
<span class="line"><span>}</span></span></code></pre></div><ol start="2"><li>制作镜像基准文件 Dockerfile。</li></ol><div class="language-sh vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 基准镜像</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">FROM</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> nginx</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 拷贝前端资源</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">COPY</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> ./dist</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> /usr/web/nginx/html/</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 拷贝SSL证书</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">COPY</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> ./ssl</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> /usr/web/nginx/ssl/</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 拷贝 nginx配置文件</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">COPY</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> nginx.conf</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> /etc/nginx/conf.d/default.conf</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 声明暴露端口</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">EXPOSE</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 19003</span></span></code></pre></div><ol start="3"><li>修改会议前端<code>Prod</code>环境信令服务地址。</li></ol><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Vue</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">prototype</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.$serverSocketUrl </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> process.env.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">NODE_ENV</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> ===</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;development&#39;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> ?</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;ws://127.0.0.1:18080&#39;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> :</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;/signal-api/&#39;</span></span></code></pre></div><ol start="4"><li>准备好上述文件开始构建镜像。</li></ol><div class="language-sh vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># Dockerfile 所在目录执行命令 注意看下图</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">docker</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> build</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -t</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> test-online-meeting:1.0.2</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> .</span></span></code></pre></div><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/3bebdc721cb547ff9fe6ac7ab230894e~tplv-k3u1fbpfcp-jj-mark:3024:0:0:0:q75.awebp" alt=""></p><ol start="5"><li>启动容器。</li></ol><div class="language-sh vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 这里 --rm 为 停止后自动删除退出容器 仅用于测试 正式部署去掉--rm 并使用 -d 后台进程执行</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 19003 为前面声明的 Nginx 配置文件中的端口，同时宿主机端口也是19003 【-p 宿主机端口:容器内服务端口】</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">docker</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> run</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --rm</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -p</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> 19003:19003</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> test-online-meeting:1.0.2</span></span></code></pre></div><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/f0a0e9a5477449339064568203aa25a9~tplv-k3u1fbpfcp-jj-mark:3024:0:0:0:q75.awebp" alt=""></p><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/8e38244db0ac4a7f8855aa98f497ccfc~tplv-k3u1fbpfcp-jj-mark:3024:0:0:0:q75.awebp" alt=""></p><p>这里<code>SSL</code>证书为自签名测试证书，因此浏览器不信任，不过可以继续访问。正式环境请使用<code>443端口</code>+域名的正式<code>SSL</code>证书。</p><h4 id="注意事项" tabindex="-1">注意事项 ​</h4><p>前后端分离部署后，对于服务管理和迁移虽然方便了很多，而且所有的过程仅需要脚本就能自动化部署，搭配现有的各种自动化工具也是很方便的，比如 Jenkins、k8s、k3s 等，但是对于不熟悉的人而言会遇到很多问题。</p><ul><li><code>nginx</code>路径配置问题。这个算是前后端分离部署后所有项目必须要解决的一个问题，不仅仅是我们的会议系统。比如我前面配置的 <code>location /signal-api/ {}</code>信令服务路径，那么你在前端线上环境也要同步做出更改，否则前端无法找到对应的 API 接口服务。</li><li>端口映射问题。<code>nginx</code>暴露端口必须要在启动容器的时候映射出去，否则服务无法访问。</li><li>静态资源频繁变更问题。上面我们一开始就将静态资源打到镜像里面了，这种方法对于频繁更改的文件而言并不是很友好，因此我们可以优化下，将静态资源通过动态挂载的方式绑定到宿主机文件系统中。</li></ul><div class="language-sh vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># /home/html/dist 为宿主机文件位置 /usr/web/nginx/html/为容器内nginx映射的资源位置。</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">docker</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> run</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --rm</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -p</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> 19003:19003</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -v</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> /home/html/dist:/usr/web/nginx/html/</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> test-online-meeting:1.0.2</span></span></code></pre></div><h3 id="最后" tabindex="-1">最后 ​</h3><p>在实际的企业应用部署中，大多数服务部署都和这两节部署实战课所讲的方式大同小异，希望学完部署实战的内容，不仅仅对于我们自身会议系统的部署有所帮助，对于大家在实际工作中所有的服务部署都能起到推进作用。</p><p>这节课是我们课程的最后一节，从第一节的基础知识，到使用<code>WebRTC</code>打造三种架构直播会议系统实战，再到系统的部署实战，我们算是从 0 到 1 系统性地熟悉了 <code>WebRTC</code>这门技术，这也算是目前为止全网第一本将<code>WebRTC+</code>各种开源流媒体组合打造多样性应用的课程，<strong>希望这节课仅仅是本课程的最后一节，更是你开启前端音视频的第一节课，是大家将技术带入实际工作的第一节课</strong>。</p><p>加油！我们共同进步，后续有任何疑问评论区或者社群大家一起交流。课程会停止，但是技术会一直迭代更新，而我们更需要持续的进步。</p>`,42),e=[l];function t(h,k,d,r,F,c){return a(),i("div",null,e)}const B=s(p,[["render",t]]);export{C as __pageData,B as default};
