import{_ as s}from"./app.BdTF1atn.js";import{j as i,i as a,Z as n}from"./chunks/@vue.D6nrJjhM.js";/* empty css                          */import"./chunks/@vueuse.ErXst1iV.js";const C=JSON.parse('{"title":"","description":"","frontmatter":{},"headers":[],"relativePath":"mdviewer/XIAOCE/分布式IM原理与实战: 从0到1打造即时通讯云/8 基础篇：网络传输详解.md","filePath":"mdviewer/XIAOCE/分布式IM原理与实战: 从0到1打造即时通讯云/8 基础篇：网络传输详解.md"}'),t={name:"mdviewer/XIAOCE/分布式IM原理与实战: 从0到1打造即时通讯云/8 基础篇：网络传输详解.md"},h=n(`<p>经过前面几个章节的学习，相信读者对长连系统多少有了一定的理解。部分读者应该都听说过<strong>粘包与解包</strong>、<strong>网络字节序</strong>、<strong>缓冲</strong>等网络通信方向的知识，有些读者可能也有些疑问，比如：</p><ol><li>不是说tcp传输数据时会<strong>粘包</strong>吗，怎么在前面demo章节中没有发生这个现象？</li><li><strong>网络字节序</strong>是什么？</li><li><strong>缓冲</strong>在什么情况下使用？</li></ol><p>因此，本章我们来聊聊这方面的知识点！</p><p><img src="https://p6-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/197d8571b7f54f668836507acae6b3a4~tplv-k3u1fbpfcp-jj-mark:3024:0:0:0:q75.awebp" alt="chapter8.png"></p><h3 id="网络字节序" tabindex="-1">网络字节序 ​</h3><p>在计算机运算的过程中，cpu从内存读取数据都是从低位开始的，同样在网络传输中比如读取tcp缓冲区数据也是从前往后顺序读取。比如下面存放一个字节的char和4个字节的int类型，它的内存结构图如下：</p><p><img src="https://p1-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/9e38cbc00e9048e2b793a2865d0cb726~tplv-k3u1fbpfcp-jj-mark:3024:0:0:0:q75.awebp" alt="大端小端1.png"></p><p>像char(rune)这类只有一个字节的类型也就没有顺序一说了，但是超过1个字节的类型如果要写到其它地方比如硬盘或网络，就需要使用统一读写顺序，比如我们把<strong>0x0201</strong>这个值按<strong>计算机理解的方式</strong>写到缓冲中，就是如下样子：</p><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/d528aafb7514419082ecea2481518f0a~tplv-k3u1fbpfcp-jj-mark:3024:0:0:0:q75.awebp" alt="大小端2.png"></p><p>实际上这就是<code>小端序</code>，cpu处理时非常方便，但是这个排列顺序<strong>对人的习惯来说很不友好</strong>。如果我们按照人类习惯的顺序写入缓冲中，就是如下样子：</p><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/a13e82e3a7fe4fa0bb4827b2b076feec~tplv-k3u1fbpfcp-jj-mark:3024:0:0:0:q75.awebp" alt="大小端3.png"></p><p>这个顺序看着就好多了，与我们书写的0x0201顺序相同，这就是<code>大端序</code>。因此，总结下来网络字节序有两种形式表示：</p><ul><li><code>小端序</code>：低位字节在前，高位字节在后，<strong>计算机方便处理</strong>。</li><li><code>大端序</code>：高位字节在前，低位字节在后，<strong>与人的使用习惯相同</strong>。</li></ul><p><strong>示例：</strong></p><div class="language-go vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">go</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// golang</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">a </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:=</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> uint32</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">0x</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">01020304</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">arr </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> make</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">([]</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">byte</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">4</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">binary.BigEndian.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">PutUint32</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(arr, a)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">t.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(arr) </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">//[1 2 3 4]</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">binary.LittleEndian.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">PutUint32</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(arr, a)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">t.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(arr) </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">//[4 3 2 1]</span></span></code></pre></div><p>在网络应用中，字节序是一个必须被考虑的因素，因为不同机器类型可能采用不同标准的字节序，所以在设计通信层协议时必须要考虑大小端问题。</p><blockquote><p>那么字符串与字节序有关吗？读者可以理解了序列化的底层原理之后再来思考这个问题！</p></blockquote><h3 id="序列化" tabindex="-1">序列化 ​</h3><p>序列化(Serialization)是将对象的状态信息转换成可取用格式（例如存成文件，存于缓冲，或经由网络中发送），以留待后续在相同或另一台计算机环境中，能读取出来反序列化对象的状态，重新创建该对象。比如我们常用的序列化框架：</p><ul><li>Fastjson/Jackson</li><li>Thrift</li><li>Protobuf</li><li>Hessian</li><li>...</li></ul><p>相信读者对它们或多或少有一定了解，在本章节我不准备介绍每种序列化框架的原理与细节，而是通过下面的示例来演示<code>序列化的核心原理</code>，搞明白了底层原理，如果要再深入了解它们的实现差异与优缺点就不难了。</p><p>我们先来看下示例：</p><div class="language-go vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">go</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">var</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> pkt </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> struct</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        Source   </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">uint32</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        Sequence </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">uint64</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        Data     []</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">byte</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}{</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        Source:   </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">257</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        Sequence: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">5</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        Data:     []</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">byte</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;hello world&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">),</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 为了方便观看，使用大端序</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">endian </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> binary.BigEndian</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">buf </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> make</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">([]</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">byte</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1024</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// buffer</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">i </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 0</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">endian.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">PutUint32</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(buf[i:i</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">+</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">4</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">], pkt.Source)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">i </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">+=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 4</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">endian.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">PutUint64</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(buf[i:i</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">+</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">8</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">], pkt.Sequence)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">i </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">+=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 8</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 由于data长度不确定，必须先把长度写入buf, 这样在反序列化时就可以正确的解析出data</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">dataLen </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> len</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(pkt.Data)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">endian.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">PutUint32</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(buf[i:i</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">+</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">4</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">], </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">uint32</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(dataLen))</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">i </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">+=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 4</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 写入数据data</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">copy</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(buf[i:i</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">+</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">dataLen], pkt.Data)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">i </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">+=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> dataLen</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">t.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(buf[</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:i])</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">t.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;length&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, i)</span></span></code></pre></div><p>在上面的例子中，我们模拟了一个对象序列化的过程，得出的结果，用图表示如下：</p><p><img src="https://p9-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/bf2adfea14c24e54a8a43ea80fe49372~tplv-k3u1fbpfcp-jj-mark:3024:0:0:0:q75.awebp" alt="序列化示例1.png"></p><p>其中第一行是Pkt中第一行表示每个属性所占长度，第二行就是排列顺序，第三行是具体的值。</p><p><strong>它有几个特点：</strong></p><ol><li>顺序写，效率高。</li><li>不会把属性key序列化进去。</li><li>对[0 0 0 0 0 0 0 5]这样占用字节数多，但是值（5）很小的情况下有点浪费。</li><li>实现复杂。</li></ol><p>通过把这个pkt序列化，我们就可以把它通过网络传输到另一台主机，在接收方收到这条消息之后就可以<code>反序列化</code>出对象。</p><div class="language-go vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">go</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">var</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> pkt </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">struct</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">		Source   </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">uint32</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">		Sequence </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">uint64</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">		Data     []</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">byte</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">	}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">	recv </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> []</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">byte</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">5</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">11</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">104</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">101</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">108</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">108</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">111</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">32</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">119</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">111</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">114</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">108</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">100</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">	endian </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> binary.BigEndian</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">	i </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 0</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">	pkt.Source </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> endian.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Uint32</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(recv[i : i</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">+</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">4</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">])</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">	i </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">+=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 4</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">	pkt.Sequence </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> endian.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Uint64</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(recv[i : i</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">+</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">8</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">])</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">	i </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">+=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 8</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">	dataLen </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> endian.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Uint32</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(recv[i : i</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">+</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">4</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">])</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">	i </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">+=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 4</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">	pkt.Data </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> make</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">([]</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">byte</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, dataLen)</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">	copy</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(pkt.Data, recv[i:i</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">+int</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(dataLen)])</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">	t.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Logf</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Src:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">%d</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> Seq:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">%d</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">Data:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">%s</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, pkt.Source, pkt.Sequence, pkt.Data)</span></span></code></pre></div><p>输出：</p><div class="language-sh vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Src:257</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> Seq:5</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> Data:hello</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> world</span></span></code></pre></div><h4 id="protobuf序列化" tabindex="-1">protobuf序列化 ​</h4><p>接下来我们使用protobuf序列化框架测试。首先，定义相同结构的message:</p><div class="language-protobuf vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">protobuf</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>syntax = &quot;proto3&quot;;</span></span>
<span class="line"><span>package pkt;</span></span>
<span class="line"><span>option go_package = &quot;./pkt&quot;;</span></span>
<span class="line"><span></span></span>
<span class="line"><span>message Pkt {</span></span>
<span class="line"><span>    uint32 Source  = 1;</span></span>
<span class="line"><span>    uint64 Sequence = 3;</span></span>
<span class="line"><span>    bytes  Data = 5;</span></span>
<span class="line"><span>}</span></span></code></pre></div><blockquote><p>protoc -I proto/ --go_out=. proto/*.proto 编译成go文件</p></blockquote><div class="language-go vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">go</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">type</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Pkt</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> struct</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">	state         </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">protoimpl</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">MessageState</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">	sizeCache     </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">protoimpl</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">SizeCache</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">	unknownFields </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">protoimpl</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">UnknownFields</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">	Source   </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">uint32</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> \`protobuf:&quot;varint,1,opt,name=Source,proto3&quot; json:&quot;Source,omitempty&quot;\`</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">	Sequence </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">uint64</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> \`protobuf:&quot;varint,3,opt,name=Sequence,proto3&quot; json:&quot;Sequence,omitempty&quot;\`</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">	Data     []</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">byte</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> \`protobuf:&quot;bytes,5,opt,name=Data,proto3&quot; json:&quot;Data,omitempty&quot;\`</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>我们使用与上面同样的值写个测试代码：</p><div class="language-go vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">go</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">p </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Pkt</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        Source:   </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">257</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        Sequence: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">5</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        Data:     []</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">byte</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;hello world&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">),</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">bts, err </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> proto.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Marshal</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&amp;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">p)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">assert.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Nil</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(t, err)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">t.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(bts)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">t.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;length &quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">len</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(bts))</span></span></code></pre></div><p>得到如下的结果：</p><p><img src="https://p6-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/f394564be19f49f0b352ed58d281d01e~tplv-k3u1fbpfcp-jj-mark:3024:0:0:0:q75.awebp" alt="序列化protobuf.png"></p><p>对比之前我们自己实现的序列化占用了<code>27字节</code>，它居然只占用<code>18字节</code>。读者应该也发现了，<strong>它是把uint32/257和uint64/5这样的值优化了，成了可变长度的值</strong>。我们来验证下它的逻辑：</p><p><strong>把值改大：</strong></p><div class="language-go vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">go</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">p </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Pkt</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    Source:   </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">10000000</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    Sequence: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">2</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> &lt;&lt;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 60</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">+</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">3</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 使最低位有值</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    Data:     []</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">byte</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;hello world&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">),</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>得到的结果就是：</p><p><img src="https://p6-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/277da2283ffe4a34ab85fc5fecfd9cb6~tplv-k3u1fbpfcp-jj-mark:3024:0:0:0:q75.awebp" alt="序列化protobuf2.png"></p><p>它的长度就变成了<code>28bytes</code>，比我们的实现增长了1个字节。如果data的长度也是10000000，第三个值11的长度也会变成5bytes，但是前面我们自己实现的序列化长度是固定的，对比下来使用protobuf序列化时长度反而增长1+2+1=4个字节。</p><h4 id="json序列化" tabindex="-1">json序列化 ​</h4><p>同样的对象，如果使用json序列化：</p><div class="language-go vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">go</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">p </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Pkt</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        Source:   </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">10000000</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        Sequence: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">2</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;&lt;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">60</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> +</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 3</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        Data:     []</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">byte</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;hello world&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">),</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">bts, err </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> json.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Marshal</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&amp;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">p)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">assert.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Nil</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(t, err)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">t.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(bts)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">t.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;length &quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">len</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(bts))</span></span></code></pre></div><p>得到如下的结果：</p><div class="language-sh vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">$</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> [123 </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">34</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 83</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 111</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 117</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 114</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 99</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 101</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 34</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 58</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 49</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 48</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 48</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 48</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 48</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 48</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 48</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 48</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 44</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 34</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 83</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 101</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 113</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 117</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 101</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 110</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 99</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 101</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 34</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 58</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 50</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 51</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 48</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 53</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 56</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 52</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 51</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 48</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 48</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 57</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 50</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 49</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 51</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 54</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 57</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 51</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 57</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 53</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 53</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 44</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 34</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 68</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 97</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 116</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 97</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 34</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 58</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 34</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 97</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 71</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 86</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 115</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 98</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 71</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 56</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 103</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 100</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 50</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 57</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 121</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 98</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 71</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 81</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 61</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 34</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> 125]</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">$</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> {&quot;Source&quot;:10000000,&quot;Sequence&quot;:2305843009213693955,&quot;Data&quot;:&quot;aGVsbG8gd29ybGQ=&quot;}</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">$</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> length</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  76</span></span></code></pre></div><p>序列化之后的长度是76bytes，<strong>这个空间占用就与前面两种实现完全没有可比性了</strong>，但是它的优点就是使用简单。</p><blockquote><p>提示：<code>[]byte(&quot;hello world&quot;)</code> 字符串转byte数组的过程就是一次编码过程，在golang中默认使用utf-8编码，utf-8是Unicode编码的一种实现方式，<code>如果把自定义的序列化比作Unicode编码，utf-8与protobuf类似，是可变长度的编码方式</code>。</p></blockquote><h4 id="性能大pk" tabindex="-1">性能大PK ​</h4><p>我们对上面三种序列化方式做一个基准测试，从性能的角度看看它们的标准。</p><p>示例代码就只贴上Protobuf的：</p><div class="language-go vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">go</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">func</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Benchmark_Protobuf</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">t</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> *</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">testing</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">B</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">	p </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Pkt</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">		Source:   </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">10000000</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">		Sequence: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">2</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;&lt;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">60</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> +</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 3</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">		Data:     []</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">byte</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;hello world&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">),</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">	}</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">	for</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> i </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">; i </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> t.N; i</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">++</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;--</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> t.N 次</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">		bts, err </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> proto.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Marshal</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&amp;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">p)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">		assert.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Nil</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(t, err)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">		assert.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">NotEmpty</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(t, bts)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">	}</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><blockquote><p>环境 cpu: Intel(R) Core(TM) i5-8257U CPU @ 1.40GHz</p></blockquote><p>结果：</p><table tabindex="0"><thead><tr><th>name</th><th>t.N</th><th>ns/op</th><th>B/op</th><th>allocs/op</th></tr></thead><tbody><tr><td>自定义</td><td>290,041,615</td><td>4.299</td><td>0</td><td>0</td></tr><tr><td>Protobuf</td><td>5,633,020</td><td>205.6</td><td>56</td><td>2</td></tr><tr><td>Json</td><td>2,686,958</td><td>432.8</td><td>104</td><td>2</td></tr></tbody></table><p>其中三次测试执行时间在2秒内，t.N表示一共执行了多少次，op表示一次操作，alloc表示分配的内存。结果与我们的预期是相同的，<code>我们自定义的序列化在性能上是秒杀其它各类序列化框架的</code>，不过缺点就是要自己实现，有点累人哈。</p><blockquote><p>这就是通常情况下，我们定义的<code>消息头</code>都是使用自定义序列化来实现的原因，可以实现<code>空间与性能</code>的<strong>最大化</strong>。</p></blockquote><h3 id="粘包与拆包" tabindex="-1">粘包与拆包 ​</h3><p>粘包与拆包原理实际上非常简单，就比如我们向一个文件中不停写入<code>信息</code>，如果没有固定的格式（比如使用\\n区分），那么在读取时就无法区分<code>每个信息的起始位置</code>。大多数读者接触到的web系统中，都不用关心这个问题，因为使用http协议或者RPC协议时底层已经帮我们处理好了，但是在长连系统中底层需要我们自己处理，因此才需要关心这个问题。</p><p>在通信协议之状态篇中，我们介绍过TCP协议是面向<strong>字节流</strong>传输数据的，也就是说传输的数据是<strong>无边界</strong>的。TCP有读写缓冲区，应用程序通过Socket接口写入缓冲的数据不一定马上被封装成一个TCP包发送出去。TCP的可靠性中就包括了ACK机制，试想如果每次写一条消息到TCP缓冲都马上发送出去，发送5条消息就需要5条ACK，效率是很低的，如果我们把5个消息打包成一个TCP包发送出去，只需要一个ACK就可以了。</p><p><img src="https://p9-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/6b7849c2642046f7bc3e8490465aa6aa~tplv-k3u1fbpfcp-jj-mark:3024:0:0:0:q75.awebp" alt="tcp_buffer_sticky.png"></p><p>另一个影响因素与缓冲区空间大小有关，由于此时接收端的<code>读缓冲</code>可能只能存放3条消息，因此TCP通过窗口控制，可能的情况就是把这5个包分两次发送，第一次有3条消息封装成一个TCP包发送出去，等到接收端上层应用程序读取了一些数据，此时TCP读缓冲就有空闲的空间，发送方就可以把另外的2条消息打包发送过去了。</p><blockquote><p>简单来说就是因为tcp协议中没有定义<code>数据包大小</code>，<code>只校验数据完整性</code>。</p></blockquote><h4 id="拆包" tabindex="-1">拆包 ​</h4><p>其实其中一个方法，在前面的序列化中已经给出了解答，因为知道消息的结构，就可以直接解析出来。当然还有其它办法，比如</p><ol><li>消息的长度固定（会有一定浪费）</li><li>发送时写入：消息长度+消息</li><li>使用分隔符，如 消息+&#39;\\n&#39;</li></ol><blockquote><p>以上是协议层的逻辑决定的。但是在应用层，如果我们把多个数据包写入<code>应用层缓冲</code>之后，再一次性写入<code>TCP缓冲</code>，是可以提高效率的，但这也会导致多个包粘在一起。</p></blockquote><h3 id="缓冲区" tabindex="-1">缓冲区 ​</h3><p>在计算机中，缓冲无处不在，导致它存在的主要原因就是速度的不对等，缓冲区有buffer缓冲区和Cache缓存区两种，这里我们主要介绍buffer缓冲区在通信过程中的使用场景。</p><p>首先，TCP缓冲读写区已经在<strong>基础篇：通信协议之行为</strong>篇中介绍过了，这里就不再说明。而应用层缓冲就是指在我们编写网络应用程序时，为了减少IO读写操作，通常会在应用层定义读写缓冲区，通过批量操作就可以把多次IO操作变成一次IO操作，提高系统并发性能。</p><p>比如应用程序要向tcp连接中发送消息时，可以把数据发送到缓冲区然后直接返回，由另一个线程批量把缓冲区的数据一次性写入tcp写缓冲区。读缓冲的原理一样，通过一次性读取一个缓冲区的数据（比如4K），然后在应用层把消息包拆开。这里就会导致一个有趣的问题，就是<code>缓冲区导致的粘包</code>。我们以写缓冲为例：</p><blockquote><p>写缓冲粘包是指在<strong>用户态</strong>进程中，为了提高IO性能，把多个数据包写入一个缓冲，然后一次性Flush到<code>内核态TCP缓冲</code>。</p></blockquote><p><img src="https://p1-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/a43280866a0240d397f7e28148e5f018~tplv-k3u1fbpfcp-jj-mark:3024:0:0:0:q75.awebp" alt="写缓冲.png"></p><p>可以看到，<strong>无论底层协议是否会产生粘包情况，由于上层应用在写入时已经把多个包粘在一起了，在接收端读取出数据时，也是要拆包的</strong>。</p><blockquote><p>搞懂了粘包的基本原理，相信读者以后就不会认为粘包只与tcp有关了！</p></blockquote><h3 id="魔数" tabindex="-1">魔数 ​</h3><p>魔数这个词在不同领域代表不同的含义。在计算机领域，魔数有两个含义，一指用来判断文件类型的魔数；二指程序代码中的魔数，也称魔法值。</p><p>在网络通信中，我们在协议头中加入魔数，有两个主要作用：</p><ol><li><code>快速过滤无效数据包</code>。</li><li><code>支持多种不同的协议</code>。</li></ol><p>但是读者需要注意的是，<strong>在网络中数据可能是非法或者被篡改过</strong>，因此设计魔数时有两个基本要求：</p><ol><li><strong>长度不能太短</strong>。</li><li><strong>值不能简单</strong>。</li></ol><p><strong>比如我们设计一个值为0x01或者0x02这类的数据就没有太大的意义，一个非法的数据很容易就会命中这个值</strong>。下面我们设计两种不同的通信协议，其中都包括一个4字节的魔数；</p><p><strong>协议一</strong></p><table tabindex="0"><thead><tr><th>魔数</th><th>消息长度</th><th>消息载体</th></tr></thead><tbody><tr><td>0xf9e8a6c5</td><td>4bytes</td><td>n bytes</td></tr></tbody></table><p><strong>协议二</strong></p><table tabindex="0"><thead><tr><th>魔数</th><th>协议ID</th><th>序列号</th><th>消息体长</th><th>消息体</th></tr></thead><tbody><tr><td>0xf1e2b3d4</td><td>2bytes</td><td>4bytes</td><td>4bytes</td><td>n bytes</td></tr></tbody></table><ol><li><strong>协议一</strong>在底层不关心协议任何数据，读取出消息载体之后就回调给上层处理。</li><li><strong>协议二</strong>的头部长度固定，有协议ID与序列号，底层在解出协议头部之后就可以根据协议ID来作出对应的处理。</li></ol><p>可以看到，这两个协议的格式是实现不同的，在解析数据包，只需要判断二进制流中前面的4字节的值就可以判断出数据是否正确，以及<code>协议格式</code>。</p><p><strong>本章完！</strong></p>`,95),p=[h];function k(l,e,E,d,r,g){return a(),i("div",null,p)}const u=s(t,[["render",k]]);export{C as __pageData,u as default};
