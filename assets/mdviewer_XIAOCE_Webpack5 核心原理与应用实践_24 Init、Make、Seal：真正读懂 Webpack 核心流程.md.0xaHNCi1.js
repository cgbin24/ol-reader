import{_ as i}from"./app.BdTF1atn.js";import{j as s,i as a,Z as e}from"./chunks/@vue.D6nrJjhM.js";/* empty css                          */import"./chunks/@vueuse.ErXst1iV.js";const m=JSON.parse('{"title":"","description":"","frontmatter":{},"headers":[],"relativePath":"mdviewer/XIAOCE/Webpack5 核心原理与应用实践/24 Init、Make、Seal：真正读懂 Webpack 核心流程.md","filePath":"mdviewer/XIAOCE/Webpack5 核心原理与应用实践/24 Init、Make、Seal：真正读懂 Webpack 核心流程.md"}'),p={name:"mdviewer/XIAOCE/Webpack5 核心原理与应用实践/24 Init、Make、Seal：真正读懂 Webpack 核心流程.md"},n=e(`<p>前面章节中，我们详细讲解了 Webpack 的基本应用、性能优化、Loader 与 Plugin 组件开发方方面面的知识，相信学习过这些内容之后，你已经对 Webpack 有相当深入的理解了，可以开始从更底层的视角，自底向上重新审视 Webpack 实现原理。</p><p>Webpack 的功能集非常庞大：模块打包、代码分割、按需加载、Hot Module Replacement、文件监听、Tree-shaking、Sourcemap、Module Federation、Dev Server、DLL、多进程打包、Persistent Cache 等等，但抛开这些花里胡哨的能力，最最核心的功能依然是：<strong>At its core, webpack is a static module bundler for modern JavaScript applications</strong>，也就是所谓的<strong>静态模块打包能力</strong>。</p><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/f6c8846ed06646fdba24cc3053d66f5e~tplv-k3u1fbpfcp-jj-mark:3024:0:0:0:q75.awebp" alt="image.png" loading="lazy"></p><p>Webpack 能够将各种类型的资源 —— 包括图片、音视频、CSS、JavaScript 代码等，通通转译、组合、拼接、生成标准的、能够在不同版本浏览器兼容执行的 JavaScript 代码文件，这一特性能够轻易抹平开发 Web 应用时处理不同资源的逻辑差异，使得开发者以一致的心智模型开发、消费这些不同的资源文件。</p><p>打包功能的底层实现逻辑很复杂，抛去大多数分支逻辑后，大致包含如下步骤：</p><p><img src="https://p9-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/a26d60df160440adae904dcdeefb44d7~tplv-k3u1fbpfcp-jj-mark:3024:0:0:0:q75.awebp" alt="image.png" loading="lazy"></p><p>为了方便理解，我把上述过程划分为三个阶段：</p><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/3293ad8708e14a8db0567dac24fb8668~tplv-k3u1fbpfcp-jj-mark:3024:0:0:0:q75.awebp" alt="image.png" loading="lazy"></p><ol><li><strong>初始化阶段</strong>：修整配置参数，创建 Compiler、Compilation 等基础对象，并初始化插件及若干内置工厂、工具类，并最终根据 <code>entry</code> 配置，找到所有入口模块；</li><li><strong>构建阶段</strong>：从 <code>entry</code> 文件开始，调用 <code>loader</code> 将模块转译为 JavaScript 代码，调用 Acorn 将代码转换为 AST 结构，遍历 AST 从中找出该模块依赖的模块；之后 <strong>递归</strong> 遍历所有依赖模块，找出依赖的依赖，直至遍历所有项目资源后，构建出完整的 模块依赖关系图；</li><li><strong>生成阶段</strong>：根据 <code>entry</code> 配置，将模块组装为一个个 Chunk 对象，之后调用一系列 Template 工厂类翻译 Chunk 代码并封装为 Asset，最后写出到文件系统。</li></ol><blockquote><p>提示：单次构建过程自上而下按顺序执行，如果启动了 <code>watch</code> ，则构建完成后不会退出 Webpack 进程，而是持续监听文件内容，发生变化时回到「<strong>构建</strong>」阶段重新执行构建。</p></blockquote><p>三个阶段环环相扣，「初始化」的重点是根据用户配置设置好构建环境；「<strong>构建阶段</strong>」则重在解读文件输入与文件依赖关系；最后在「<strong>生成阶段</strong>」按规则组织、包装模块，并翻译为适合能够直接运行的产物包。三者结合，实现 Webpack 最核心的打包能力，其它功能特性也几乎都是在此基础上，通过 Hook 介入、修改不同阶段的对象状态、流程逻辑等方式实现。</p><p>可以说，深度理解这三个阶段，才算是真正掌握了 Webpack 核心原理，所以接下来，让我们一起深入底层源码，剖析各阶段的具体实现。</p><h3 id="初始化阶段" tabindex="-1">初始化阶段 ​</h3><p>初始化阶段主要完成三个功能：修整 &amp; 校验配置对象、运行插件、调用 <code>compiler.compile</code> 方法开始执行构建操作，代码比较简单，如下图：</p><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/83d697220d324ed5a3ddba7e90d332ca~tplv-k3u1fbpfcp-jj-mark:3024:0:0:0:q75.awebp" alt="image.png" loading="lazy"></p><p>首先，校验用户参数，并合并默认配置对象：</p><ol><li>启动时，首先将 <code>process.args</code> 参数与 <code>webpack.config.js</code> 文件合并成用户配置；</li><li>调用 validateSchema 校验配置对象（<code>validateSchema</code> 底层依赖于 schema-utils 库）；</li><li>调用 getNormalizedWebpackOptions + applyWebpackOptionsBaseDefaults 合并出最终配置。</li></ol><p>之后，创建 Compiler 对象并开始启动插件：</p><ol><li>调用 createCompiler 函数创建 <code>compiler</code> 对象。</li><li>遍历 配置中的 <code>plugins</code> 集合，执行插件的 <code>apply</code> 方法。</li><li>调用 <code>new WebpackOptionsApply().process</code> 方法，根据配置内容动态注入相应插件，包括：</li></ol><ul><li>调用 EntryOptionPlugin 插件，该插件根据 <code>entry</code> 值注入 <code>DynamicEntryPlugin</code> 或 <code>EntryPlugin</code> 插件；</li><li>根据 <code>devtool</code> 值注入 <code>Sourcemap</code> 插件，包括：<code>SourceMapDevToolPlugin</code>、<code>EvalSourceMapDevToolPlugin</code> 、<code>EvalDevToolModulePlugin</code>；</li><li>注入 <code>RuntimePlugin</code> ，用于根据代码内容动态注入 webpack 运行时。</li></ul><p><strong>最后，调用 <code>compiler.compile</code> 方法开始执行构建</strong>，这一步非常重要，源码：</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// webpack/lib/compiler.js </span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">compile</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(callback) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> params</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> this</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">newCompilationParams</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    this</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.hooks.beforeCompile.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">callAsync</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(params, </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">err</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">      // ...</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">      const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> compilation</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> this</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">newCompilation</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(params);</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">      this</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.hooks.make.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">callAsync</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(compilation, </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">err</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">        // ...</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">        this</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.hooks.finishMake.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">callAsync</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(compilation, </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">err</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">          // ...</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">          process.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">nextTick</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(() </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            compilation.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">finish</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">err</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">              // ...</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">              compilation.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">seal</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">err</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">                // ...</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">                this</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.hooks.afterCompile.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">callAsync</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(compilation, </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">err</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">                    if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (err) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">return</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> callback</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(err);</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">                    return</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> callback</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">null</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, compilation);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">                });</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">              });</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            });</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">          });</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        });</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      });</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    });</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  }</span></span></code></pre></div><p>虽然 compile 方法并没有任何实质的功能逻辑，但它搭建起了后续构建流程框架：</p><ul><li>调用 <code>newCompilation</code> 方法创建 <code>compilation</code> 对象；</li><li>触发 <code>make</code> 钩子，紧接着 EntryPlugin 在这个钩子中调用 <code>compilation</code> 对象的 <code>addEntry</code> 方法创建入口模块，主流程开始进入「<strong>构建阶段</strong>」；</li><li><code>make</code> 执行完毕后，触发 <code>finishMake</code> 钩子；</li><li>执行 <code>compilation.seal</code> 函数，进入「<strong>生成阶段</strong>」，开始封装 Chunk，生成产物；</li><li><code>seal</code> 函数结束后，触发 <code>afterCompile</code> 钩子，开始执行收尾逻辑。</li></ul><blockquote><p>提示：<code>compile</code> 函数是后续所有功能逻辑的起点，非常重要，请务必前往阅读 源码。</p></blockquote><p>调用 <code>compile</code> 函数触发 <code>make</code> 钩子后，初始化阶段就算是结束了，流程逻辑开始进入「<strong>构建阶段</strong>」。</p><h3 id="构建阶段" tabindex="-1">构建阶段 ​</h3><p>「<strong>构建阶段</strong>」从 <code>entry</code> 模块开始递归解析模块内容、找出模块依赖，按图索骥逐步构建出项目整体 <code>module</code> 集合以及 <code>module</code> 之间的 依赖关系图，这个阶段的主要作用就是读入并理解所有原始代码。</p><p>实现上，在上述「<strong>初始化阶段</strong>」的最后，<code>compiler.compile</code> 函数会触发 <code>compiler.hook.make</code> 钩子，<code>EntryPlugin</code> 监听该钩子并开始调用 <code>compilation.addEntry</code> 添加入口：</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> EntryPlugin</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    apply</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">compiler</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        const</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">entry</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">options</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">context</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> } </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> this</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">        // 创建入口 Dependency 对象</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> dep</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> EntryPlugin.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">createDependency</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(entry, options);</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        compiler.hooks.make.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">tapAsync</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;EntryPlugin&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, (</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">compilation</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">callback</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            compilation.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">addEntry</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(context, dep, options, </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">err</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">                callback</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(err);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            });</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        });</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p><code>addEntry</code> 之后的执行逻辑：</p><p><img src="https://p1-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/1bf47933e15042deb0b2051d907847fa~tplv-k3u1fbpfcp-jj-mark:3024:0:0:0:q75.awebp" alt="image.png" loading="lazy"></p><ol><li><p>调用 handleModuleCreation，根据文件类型构建 <code>module</code> 子类 —— 一般是 NormalModule；</p></li><li><p>调用 loader-runner 转译 <code>module</code> 内容，将各类资源类型转译为 Webpack 能够理解的标准 JavaScript 文本；</p></li><li><p>调用 acorn 将 JavaScript 代码解析为 AST 结构；</p></li><li><p>在 JavaScriptParser 类中遍历 AST，触发各种钩子，其中最关键的：</p><ul><li>遇到 <code>import</code> 语句时，触发 exportImportSpecifier 钩子；</li><li>HarmonyExportDependencyParserPlugin 监听该钩子，将依赖资源添加为 Dependency 对象；</li><li>调用 <code>module</code> 对象的 <code>addDependency</code>， 将 Dependency 对象转换为 Module 对象并添加到依赖数组中。</li></ul></li></ol><p><img src="https://p6-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/604e4c7e9dac4069be57bd3be9f9800c~tplv-k3u1fbpfcp-jj-mark:3024:0:0:0:q75.awebp" alt="image.png" loading="lazy"></p><ol start="5"><li>AST 遍历完毕后，调用 <code>module.handleParseResult</code> 处理模块依赖数组；</li><li>对于 <code>module</code> 新增的依赖，调用 <code>handleModuleCreate</code>，控制流回到第一步；</li><li>所有依赖都解析完毕后，构建阶段结束。</li></ol><p>过程中模块源码经历了 <code>module =&gt; ast =&gt; dependences =&gt; module</code> 的流转，先将源码解析为 AST 结构，再在 AST 中遍历 <code>import</code> 等模块导入语句，收集模块依赖数组 —— <code>dependences</code>，最后遍历 <code>dependences</code> 数组将 Dependency 转换为 Module 对象，之后递归处理这些新的 Module，直到所有项目文件处理完毕。</p><blockquote><p>提示：这个过程会调用 acorn 将模块内容 —— 包括 JS、CSS，甚至多媒体文件，解析为 AST 结构，所以需要使用 <code>loaders</code> 将不同类型的资源转译为标准 JavaScript 代码。</p></blockquote><p>这个递归处理流程是「<strong>构建阶段</strong>」的精髓，我们来看个例子，假设对于下图这种简单模块依赖关系：</p><p><img src="https://p1-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/bdb0ecf9b1144117851a8279aabe59e2~tplv-k3u1fbpfcp-jj-mark:3024:0:0:0:q75.awebp" alt="image.png" loading="lazy"></p><p>其中 <code>index.js</code> 为 entry 文件，依赖于 a/b 文件；a 依赖于 c/d 文件。初始化编译环境之后，<code>EntryPlugin</code> 根据 <code>entry</code> 配置找到 <code>index.js</code> 文件，并调用 <code>compilation.addEntry</code> 函数将之添加为 Module 对象，触发构建流程，构建完毕后内部会生成这样的数据结构：</p><p><img src="https://p6-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/29c82d31f5a144f1a63def697453caa5~tplv-k3u1fbpfcp-jj-mark:3024:0:0:0:q75.awebp" alt="image.png" loading="lazy"></p><p>之后，调用 Acorn 将 <code>index.js</code> 代码解析为 AST，并遍历 AST 找到 <code>index.js</code> 文件的依赖：</p><p><img src="https://p9-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/42239b4cb1c24df9981ccb1477f60877~tplv-k3u1fbpfcp-jj-mark:3024:0:0:0:q75.awebp" alt="image.png" loading="lazy"></p><p>得到两个新的依赖对象：<code>dependence[a.js]</code> 与 <code>dependence[b.js]</code> ，这是下一步操作的关键线索，紧接着调用 <code>module[index.js]</code> 的 <code>handleParseResult</code> 函数处理这两个依赖对象，得到 a、b 两个新的 Module 对象：</p><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/7066113b7aeb4f78bd21d67121e16602~tplv-k3u1fbpfcp-jj-mark:3024:0:0:0:q75.awebp" alt="image.png" loading="lazy"></p><p>接着，又触发 <code>module[a/b]</code> 的 <code>handleModuleCreation</code> 方法，从 <code>a.js</code> 模块中又解析到 <code>c.js/d.js</code> 两个新依赖，于是再继续调用 <code>module[a]</code> 的 <code>handleParseResult</code>，递归上述流程：</p><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/6cfc533ae9204df48bf70ebc2dfda0fa~tplv-k3u1fbpfcp-jj-mark:3024:0:0:0:q75.awebp" alt="image.png" loading="lazy"></p><p>最终得到 <code>a/b/c/d</code> 四个 Module 与对应的 Dependency 对象：</p><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/8daff06d0ef544bd979b18b22d265735~tplv-k3u1fbpfcp-jj-mark:3024:0:0:0:q75.awebp" alt="image.png" loading="lazy"></p><blockquote><p>提示：Dependency、Module、Entry 等都是 Webpack 内部非常重要的基本类型，在后续章节中我们会单独展开这几个类型的基本涵义与相互之间的关系。</p></blockquote><p>到这里解析完所有模块，没有新的依赖后就可以继续推进，进入「<strong>生成阶段</strong>」。</p><h3 id="生成阶段" tabindex="-1">生成阶段 ​</h3><p>「<strong>构建阶段</strong>」负责读入与分析源代码文件，将之一一转化为 Module、Dependency 对象，解决的是资源“输入”问题；而「生成阶段」则负责根据一系列内置规则，将上一步构建出的所有 Module 对象拆分编排进若干 Chunk 对象中，之后以 Chunk 粒度将源码转译为适合在目标环境运行的产物形态，并写出为产物文件，解决的是资源“输出”问题。</p><p>「<strong>生成阶段</strong>」发生在 <code>make</code> 阶段执行完毕，<code>compiler.compile</code> 调用 compilation.seal 函数时：</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// webpack/lib/compiler.js </span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">compile</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(callback) {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // ...</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> compilation</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> this</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">newCompilation</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(params);</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    this</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.hooks.make.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">callAsync</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(compilation, </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">err</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">        // ...</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        compilation.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">seal</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">err</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">/* */</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">});</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    });</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  }</span></span></code></pre></div><p>也就是说，<code>compilation.seal</code> 函数是「生成阶段」的入口函数，<code>seal</code> 原意密封、上锁，我个人理解在 Webpack 语境下接近于“将模块装进 Chunk”，核心流程：</p><p><img src="https://p6-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/2657e3ff33214d3aac023556d8858c77~tplv-k3u1fbpfcp-jj-mark:3024:0:0:0:q75.awebp" alt="image.png" loading="lazy"></p><ol><li><p>创建本次构建的 ChunkGraph 对象。</p></li><li><p>遍历 入口集合 <code>compilation.entries</code>：</p><ul><li>调用 <code>addChunk</code> 方法为每一个入口 创建 对应的 Chunk 对象（EntryPoint Chunk）；</li><li>遍历 该入口对应的 Dependency 集合，找到 相应 Module 对象并 关联 到该 Chunk。</li></ul></li><li><p>到这里可以得到若干 Chunk，之后调用 buildChunkGraph 方法将这些 Chunk 处理成 Graph 结构，方便后续处理。</p></li><li><p>之后，触发 <code>optimizeModules/optimizeChunks</code> 等钩子，由插件（如 SplitChunksPlugin）进一步修剪、优化 Chunk 结构。</p></li><li><p>一直到最后一个 Optimize 钩子 <code>optimizeChunkModules</code> 执行完毕后，开始调用 compilation.codeGeneration 方法生成 Chunk 代码，在 <code>codeGeneration</code> 方法内部：</p><ul><li>遍历每一个 Chunk 的 Module 对象，调用 _codeGenerationModule；</li><li><code>_codeGenerationModule</code> 又会继续往下调用 module.codeGeneration 生成单个 Module 的代码，这里注意不同 Module 子类有不同 <code>codeGeneration</code> 实现，对应不同产物代码效果。</li></ul></li></ol><p><img src="https://p1-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/d3fe03a7c0c745e199d1b4c3f817c955~tplv-k3u1fbpfcp-jj-mark:3024:0:0:0:q75.awebp" alt="image.png" loading="lazy"></p><ol start="6"><li>所有 Module 都执行完 <code>codeGeneration</code>，生成模块资产代码后，开始调用 createChunkAssets 函数，为每一个 Chunk 生成资产文件。</li><li>调用 compilation.emitAssets 函数“<strong>提交</strong>”资产文件，注意这里还只是记录资产文件信息，还未写出磁盘文件。</li><li>上述所有操作正常完成后，触发 <code>callback</code> 回调，控制流回到 <code>compiler</code> 函数。</li><li>最后，调用 <code>compiler</code> 对象的 emitAssets 方法，输出资产文件。</li></ol><p><code>seal</code> 很复杂，重点在于将 Module 按入口组织成多个 Chunk 对象，之后暴露 <code>optimizeXXX</code> 钩子，交由插件根据不同需求对 Chunk 做进一步修剪、整形、优化，最后按 Chunk 为单位做好代码合并与转换，输出为资产文件。</p><blockquote><p>提示：上述 <code>optimizeXXX</code> 钩子常被用于优化最终产物代码，例如 SplitChunksPlugin 就可以在这里分析 Chunk、Module 关系，将使用率较高的 Module 封装进新的 Chunk，实现 Common Chunk 效果。</p></blockquote><p>简单理解，Entry 与 Chunk 一一对应，而 Chunk 与最终输出的资源一一对应，我们来看个示例，假如有这样的配置：</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// webpack.config.js</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">module</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">exports</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  entry: {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    a: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;./src/a.js&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    b: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;./src/b.js&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  },</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  // ...</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">};</span></span></code></pre></div><p>实例配置中有两个入口，对应的文件结构：</p><p><img src="https://p6-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/150a2a6fd43f401a806b61975f69ce42~tplv-k3u1fbpfcp-jj-mark:3024:0:0:0:q75.awebp" alt="image.png" loading="lazy"></p><p>a 依赖于 c/e；b 依赖于 c/d；a/b 同时依赖于 c。最终生成的 Chunk 结构为：</p><p><img src="https://p9-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/58b94810c0df4ea485f9ab2c07c1d700~tplv-k3u1fbpfcp-jj-mark:3024:0:0:0:q75.awebp" alt="image.png" loading="lazy"></p><p>也就是根据依赖关系，<code>chunk[a]</code> 包含了 a/c/e 三个模块，<code>chunk[b]</code> 包含了 b/c/d 三个模块。</p><p><code>seal</code> 过程中会不断调用 <code>compilation.emitAssets</code> 提交资产记录，而直到 <code>seal</code> 结束后则调用 <code>compiler.emitAssets</code> 函数，函数内部调用 <code>compiler.outputFileSystem.writeFile</code> 方法将 <code>assets</code> 集合写入文件系统，Webpack 完成从源码到资产文件的转换，构建工作至此结束。</p><h3 id="资源形态流转" tabindex="-1">资源形态流转 ​</h3><p>OK，上面我们已经把逻辑层面的构造主流程梳理完了，最后我们再结合<strong>资源形态流转</strong>的角度重新考察整个过程，加深理解：</p><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/defaaadcd2f04cf4ae950a746455a86d~tplv-k3u1fbpfcp-jj-mark:3024:0:0:0:q75.awebp" alt="image.png" loading="lazy"></p><ul><li><p><code>compiler.make</code> 阶段：</p><ul><li><code>entry</code> 文件以 <code>dependence</code> 对象形式加入 <code>compilation</code> 的依赖列表，<code>dependence</code> 对象记录了 <code>entry</code> 的类型、路径等信息；</li><li>根据 <code>dependence</code> 调用对应的工厂函数创建 <code>module</code> 对象，之后读入 <code>module</code> 对应的文件内容，调用 <code>loader-runner</code> 对内容做转化，转化结果若有其它依赖则继续读入依赖资源，重复此过程直到所有依赖均被转化为 module。</li></ul></li><li><p><code>compilation.seal</code> 阶段：</p><ul><li>遍历 <code>module</code> 集合，根据 <code>entry</code> 配置及引入资源的方式，将 <code>module</code> 分配到不同的 Chunk；</li><li>Chunk 之间最终形成 <code>ChunkGraph</code> 结构；</li><li>遍历 <code>ChunkGraph</code>，调用 <code>compilation.emitAsset</code> 方法标记 <code>chunk</code> 的输出规则，即转化为 <code>assets</code> 集合。</li></ul></li><li><p><code>compiler.emitAssets</code> 阶段：</p><ul><li>将 <code>assets</code> 写入文件系统。</li></ul></li></ul><p>这个过程用到很多 Webpack 基础对象，包括：</p><ul><li><code>Entry</code>：编译入口；</li><li><code>Compiler</code>：编译管理器，Webpack 启动后会创建 <code>compiler</code> 对象，该对象一直存活直到构建结束进程退出；</li><li><code>Compilation</code>：单次构建过程的管理器，比如 <code>watch = true</code> 时，运行过程中只有一个 compiler，但每次文件变更触发重新编译时，都会创建一个新的 <code>compilation</code> 对象；</li><li><code>Dependence</code>：依赖对象，记录模块间依赖关系；</li><li><code>Module</code>：Webpack 内部所有资源都会以 Module 对象形式存在，所有关于资源的操作、转译、合并都是以 Module 为单位进行的；</li><li><code>Chunk</code>：编译完成准备输出时，将 Module 按特定的规则组织成一个一个的 Chunk。</li></ul><p>这里简单了解即可，后面章节中我们还会继续挖掘不同对象的作用与细节。</p><h3 id="总结" tabindex="-1">总结 ​</h3><p>综上，Webpack 底层源码非常复杂，但撇除所有分支逻辑后，构建主流程可以简单划分为三个阶段：</p><ul><li><strong>初始化阶段</strong>：负责设置构建环境，初始化若干工厂类、注入内置插件等；</li><li><strong>构建阶段</strong>：读入并分析 Entry 模块，找到模块依赖，之后递归处理这些依赖、依赖的依赖，直到所有模块都处理完毕，这个过程解决资源“输入”问题；</li><li><strong>生成阶段</strong>：根据 Entry 配置将模块封装进不同 Chunk 对象，经过一系列优化后，再将模块代码翻译成产物形态，按 Chunk 合并成最终产物文件，这个过程解决资源“输出”问题。</li></ul><p>这个过程串起资源「输入」到「输出」的关键步骤，可以说是 Webpack 最重要的流程骨架，没有之一！所以建议你务必跟随上述各个阶段的介绍，翻阅源码中对应的具体代码，深度理解 Webpack 构建功能的实现细节。</p><p>在后面章节中，我还会在这个流程骨架基础上，继续展开一些有代表性的对象、分支、功能实现逻辑，帮助你更体系化理解 Webpack 实现原理。</p><h3 id="思考题" tabindex="-1">思考题 ​</h3><p>在「构建阶段」，为什么需要先将依赖文件构建为 Dependency，之后再根据 Dependency 创建文件对应的 Module 对象？Dependency 对象到底有什么作用？欢迎在留言区讨论。</p>`,84),l=[n];function t(k,o,d,c,h,r){return a(),s("div",null,l)}const b=i(p,[["render",t]]);export{m as __pageData,b as default};
