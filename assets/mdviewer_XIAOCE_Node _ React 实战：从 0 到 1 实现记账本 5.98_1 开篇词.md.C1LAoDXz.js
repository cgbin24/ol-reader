import{_ as e}from"./app.BdTF1atn.js";import{j as o,i as p,Z as c}from"./chunks/@vue.D6nrJjhM.js";/* empty css                          */import"./chunks/@vueuse.ErXst1iV.js";const h=JSON.parse('{"title":"","description":"","frontmatter":{},"headers":[],"relativePath":"mdviewer/XIAOCE/Node + React 实战：从 0 到 1 实现记账本 5.98/1 开篇词.md","filePath":"mdviewer/XIAOCE/Node + React 实战：从 0 到 1 实现记账本 5.98/1 开篇词.md"}'),d={name:"mdviewer/XIAOCE/Node + React 实战：从 0 到 1 实现记账本 5.98/1 开篇词.md"},t=c('<h3 id="前言" tabindex="-1">前言 ​</h3><p>前后端项目目前已经部署到线上环境，大家可以通过以下地址进行访问：</p><p><strong>「掘掘记账本」在线预览</strong>： cost.chennick.wang</p><blockquote><p>测试账号：admin，测试密码：111111。也可以自行注册使用。</p></blockquote><p><strong>「掘掘记账本」前端代码开源地址</strong>：</p><ul><li>GitHub：github.com/Nick930826/…</li><li>GItee：gitee.com/cxy19930826…</li></ul><p><strong>「掘掘记账本」后端代码开源地址</strong>：</p><ul><li>GitHub：github.com/Nick930826/…</li><li>Gitee：gitee.com/cxy19930826…</li></ul><p><strong>「项目压缩包下载」</strong></p><p>s.yezgea02.com/16679894074…</p><p><strong>使用到的软件下载地址</strong></p><ul><li><p>VSCode：下载地址</p></li><li><p>DBeaver：下载地址</p></li><li><p>Postman：下载地址</p></li></ul><blockquote><p>笔者尽自己所能，帮助同学们减少一些不必要的时间消耗。</p></blockquote><h3 id="前端职业生涯中遇到的这些事儿" tabindex="-1">前端职业生涯中遇到的这些事儿 ​</h3><p>已经工作 1-3 年的前端同学，或多会少都会遇到一些问题，比如不知道自己还能学什么，每天像一只无头苍蝇一样，到处学一点。并且我相信，在你的微信公众号里也关注着不少前端相关的公众号，碎片化的知识充斥着你的微信，动则手写 Vue、React、吊打面试官等等。</p><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/c6b20a2e9f8b4fa3adefbb50ef29aa6b~tplv-k3u1fbpfcp-jj-mark:3024:0:0:0:q75.awebp" alt="" loading="lazy"></p><p>打一枪换一个地，今天讲 <code>Vue</code>，明天讲 <code>React</code>，后天讲 <code>Webpack</code>，面试文章更是让人心生焦虑，因为你看完之后，发现自己原来还有这么多不会的知识点，补到什么时候是个头。</p><p>你若是有很强的总结归纳能力，将所有碎片化的内容规整出来，形成自己的一套知识体系，那么以这样的学习能力，大可自学，不必买教程。</p><p><strong>但是大部分人焦虑的原因</strong>，归根结底还是因为自身的知识体系还不够完善，自身目前所处的高度还不够，导致看待问题的视野还比较模糊。所以，你需要对整个软件工程有一个全链路的学习，这样你的视野将升入新的高度，看待问题将不再局限于某个页面、用某个技术怎么实现。</p><p>我不敢保证，去学习 <code>Node.js</code> 这门技术，就能让你完全成为一个全栈工程师。但至少遇到问题，你思考问题的解决方案，不再局限于前端范畴，可以结合服务端的知识，去解决前端层面遇到的问题。</p><p>我认为，全栈工程师的定义是受到各方面因素影响的。</p><p>假如你在一个小厂工作，不限制你使用的技术，无论是用 PHP、Java、Node、Go、Python，只要你能一人或协同多人完成前后端的开发工作，那也是算一名全栈工程师，只不过这样的全栈工程师干的事情是比较杂的，甚至可以叫“全干工程师”。</p><p>如果你身在大厂，大厂的工作流程是非常规范及专注的，此时你利用自己的专业知识，去帮助团队在前后端衔接、项目发布持续集成、错误监测工具、脚手架的搭建、公用组件私有化等等方面提高工作效率，那你也可以成为一名全栈工程师。</p><h4 id="例子1" tabindex="-1">例子1 ​</h4><p>我现在有一个想法。我是一个爱看技术文章的勤奋少年，每天早上打开电脑会先去掘金、CSDN、思否等技术平台阅读当天最新的文章，并且将一些好的文章收藏到浏览器的收藏夹里吃灰。但是每天都要打开这些不同的网站，非常麻烦，我想做一个聚合页面，将诸如上述平台的当天最新文章收集到一个网页中，并且要有用户权限，可以收藏文章。</p><p>此时就要用到了 <code>Node</code> 的爬虫知识，可以利用 <code>puppeteer</code> 无头浏览器，获取到相应的网页，并拿到 <code>dom</code> 节点，通过 <code>cheerio</code> 插件将 <code>dom</code> 节点转化为，可通过 <code>jQuery</code> 操作的方法。获取到文章标题和详情链接，将数据存入 <code>MySQL</code>。利用 <code>Node</code> 抛出接口，浏览器通过 <code>API</code> 接口，获取存储在 <code>MySQL</code> 中的数据。</p><h4 id="案例2" tabindex="-1">案例2 ​</h4><p>Web 网站做得多了，想换换技术栈，学习用 <code>React Native</code> 做 <code>App</code> 应用。于是乎，本小册开发的这套服务端接口，便能派上用场。甚至可以将接口数据，对接到小程序里，实现一套服务端接口多终端使用，不用再用 <code>Mock</code> 数据去填充内容。</p><blockquote><p>上述例子想告诉大家，有全栈能力的你，可以实现很多，以前你想实现，却不能实现的想法。</p></blockquote><h3 id="为什么是-node" tabindex="-1">为什么是 Node ​</h3><p>为什么要选择 <code>Node</code> 进入全栈开发呢？很简单，作为前端，我们最熟悉的就是 <code>JS</code>，而 <code>Node</code> 赋予 <code>JS</code> 一些系统级的能力，这让我们学习 <code>Node</code> 时，不用再重新学习一门新的语言，只要你会 <code>JS</code>，结合本小册文档，以及合理的运用搜索引擎，你就能很好的入门 <code>Node</code>。</p><p><strong>Node 能做什么有趣的事情</strong></p><ul><li><p>爬虫</p></li><li><p>工具</p></li><li><p>脚本</p></li><li><p>硬件</p></li><li><p>中台</p></li><li><p>通信</p></li></ul><p><strong>Node 的就业情况</strong></p><p><img src="https://p1-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/cc81b3109f0b4ea1b74b0d365dc7c741~tplv-k3u1fbpfcp-jj-mark:3024:0:0:0:q75.awebp" alt="image.png" loading="lazy"></p><blockquote><p>数据来自BOSS直聘。</p></blockquote><p>无论是实习还是社招，<code>Node</code> 在行业的需求，以及薪资的水准，都是在普通前端之上的。你可以说我很庸俗，但是社会便是如此，你的付出和你的收获在一定程度上是成正比的。所以，现在就开启你的 <code>Node</code> 之旅，这可能会为你后期的职业生涯添上浓墨重彩的一笔。</p><h3 id="小册设计思路" tabindex="-1">小册设计思路 ​</h3><p>小册目的很明确，带一部分前端，从纯前端慢慢转变为伪全栈。为什么说是「伪全栈」呢？因为课程的深度不会涉及太多的性能相关的知识，如多集成、高并发、缓存优化、多进程部署之类的问题。这些都是需要你在课后自己去实践学习的内容。</p><blockquote><p>如果真的有通过学习一门课程就变成大神，希望知道的同学，把这门课程推荐给我，我也想学。</p></blockquote><p>先带大家拿起板砖🧱 ，敲开全栈的大门。知其然，而后使其然。</p><p>我们将会学习掌握下图流程：</p><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/7b61a509885e41fbba4d955933907797~tplv-k3u1fbpfcp-jj-mark:3024:0:0:0:q75.awebp" alt="" loading="lazy"></p><p><strong>需求分析</strong></p><p>项目的逻辑梳理，目的是为了下一步数据库设计做准备，需求分析和数据库设计其实是同步的，需要一边分析，一边设计。</p><p><strong>数据库设计</strong></p><p>本课程采用数据库为 <code>MySQL</code>，并且使用更加人性化的可视化工具 DBeaver，更易于新手上手操作数据库。数据库的作用说简单了，就是为了存储数据，至于用什么技术，不必太过于拘泥，你也可以选择 MongoDB。</p><p>可视化界面如下：</p><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/3705d4385742472f926205780ed4d5bb~tplv-k3u1fbpfcp-jj-mark:3024:0:0:0:q75.awebp" alt="" loading="lazy"></p><p><strong>服务端接口编写</strong></p><p>本课程采用 <code>Node</code> 的上层架构 Egg.js，它是由阿里研发维护的，并且是基于 <code>Koa</code> 开发，有着高度可扩展的插件机制，很多需求我们可以通过插件的形式来实现，大厂的使用率也很高，文档相对国人友好，学习成本较低。</p><p>这里有一份前端早早聊大会公开的各大公司团队的技术选型，可以看到 <code>Node</code> 这块技术栈，使用 <code>Egg.js</code> 的公司占不小的比例。并且大厂都会有自己的前端基建，多数情况下也是采用的 <code>Egg.js</code> 作为基础 <code>Node</code> 框架。</p><p>既然大厂都在使用 <code>Egg.js</code>，想要获得更强的竞争力，你需要好好地学习它。</p><p>我所在的公司也不例外，包括海报生成、二维码生成、截图服务、静态资源 CDN 服务都是基于 Egg.js 开发的。</p><p><strong>前端开发</strong></p><p>前端部分采用目前大厂最爱的 <code>React</code>，全程使用 <code>React Hook</code> 的形式编写。由于咱们做的是记账本，属于金融类项目，所以本小册采用的是 ZarmUI 作为组件库。组件库的使用需要根据项目而定，比如你开发的是 <code>toB</code> 的管理后台类项目，建议采用 Ant Design。</p><p>脚手架采用的是 <code>Vite2.0</code>，它在开发模式下的冷启动，让你真正体验到秒更新的快感。我认为 <code>esm</code> 的模块化规范会是未来的趋势，趁早学习，占据主动。</p><p>后续的章节会对 <code>Vite</code> 做一个详细全面的分析。</p><p>最终会带大家开发出一个 <code>toC</code> 项目，如下图所示：</p><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/6bcfa727648c4c73be85524e8b028550~tplv-k3u1fbpfcp-jj-mark:3024:0:0:0:q75.awebp" alt="" loading="lazy"></p><p><strong>部署上线</strong></p><p>服务端的部署会教大家如何在服务器环境下安装 <code>MySQL</code>，前端和后端的代码，会通过 <code>pm2</code> 完成自动化部署，部署线上的前提条件是，需要你有一台云服务器。</p><h3 id="适宜人群" tabindex="-1">适宜人群 ​</h3><p><strong>1、前端职业生涯前期，遇到学习瓶颈的同学。</strong></p><ul><li>局限于前端的知识体系，会让你的思路也同样局限于前端的领域，拓展你的知识面，可以让你对整个技术的认知进入新的高度。</li></ul><p><strong>2、在校学生，希望通过开发实战项目，完成毕设的同学。</strong></p><ul><li>本项目带大家从 0 到 1 开发出一个完整的前后端项目，有助于即将毕业的同学很好的理解整个项目的开发过程，在写论文的时候，也能游刃有余。</li></ul><p><strong>3、想通过学习 <code>Node</code>，拓展技能树，升职加薪的同学。</strong></p><ul><li>多数在小厂做前端开发的同学应该有所体会，一直都是做一些不那么锻炼技术的后台管理系统。这些技能树可能不能很好地支撑你的涨薪诉求，入门 <code>Node</code> 后，你可以做一些提高开发效率的工具，帮助你获得更好的升职加薪的机会。</li></ul><p><strong>4、想开启「远程工作」的同学。</strong></p><ul><li>远程工作，很多时候需要你既会前端，又得回后端，因为雇佣者开发成本有限，需要开发人员的技能树尽可能的多。</li></ul><h3 id="我的职责" tabindex="-1">我的职责 ​</h3><p>我并不是大佬，我只是一个处在这个内卷的 IT 大环境下，不得不埋头向前的普通前端。相信和我一样的普通前端是占多数的，没有过人的天分，靠的多是自己的自觉和自律。职业生涯是漫长的，希望我能陪你走过这漫长职业生涯中的一小段。用我喜欢的一句话结尾。</p><blockquote><p>“以大多数人的努力程度之低，根本轮不到拼天赋。”</p></blockquote><h3 id="总结" tabindex="-1">总结 ​</h3><p>风里雨里，我在交流群等你。</p>',76),i=[t];function l(a,n,s,r,g,b){return p(),o("div",null,i)}const _=e(d,[["render",l]]);export{h as __pageData,_ as default};
