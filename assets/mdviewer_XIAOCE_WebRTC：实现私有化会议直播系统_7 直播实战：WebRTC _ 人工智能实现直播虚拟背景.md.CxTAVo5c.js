import{_ as s}from"./app.BdTF1atn.js";import{j as i,i as a,Z as n}from"./chunks/@vue.D6nrJjhM.js";/* empty css                          */import"./chunks/@vueuse.ErXst1iV.js";const C=JSON.parse('{"title":"","description":"","frontmatter":{},"headers":[],"relativePath":"mdviewer/XIAOCE/WebRTC：实现私有化会议直播系统/7 直播实战：WebRTC + 人工智能实现直播虚拟背景.md","filePath":"mdviewer/XIAOCE/WebRTC：实现私有化会议直播系统/7 直播实战：WebRTC + 人工智能实现直播虚拟背景.md"}'),h={name:"mdviewer/XIAOCE/WebRTC：实现私有化会议直播系统/7 直播实战：WebRTC + 人工智能实现直播虚拟背景.md"},k=n(`<p>上节课给大家留了课后思考题，大家做的怎么样？如果能解决上节课的课后题，那么这节课的内容学习起来就很简单，无非是流的替换而已。接下来我们就一起实践下，如何借助 <code>虚拟背景</code> 美化我们前面做的简易直播系统。</p><p>开始之前，大家先回顾下我们在上节课的成果：将摄像头画面和虚拟背景通过机器学习模型融合后，展示在 <code>Canvas</code> 节点上，那么这节课我们就要对融合后的画面和 <code>WebRTC</code> 结合，并在我们之前写的简易直播中应用。</p><h3 id="canvas-画布流" tabindex="-1">Canvas 画布流 ​</h3><p><code>Canvas</code> 本身只是一个画布，但是有对应的 API，可以将画布上的每一帧捕捉并形成媒体流，我们可以改造下上节课的方法，如下：</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">async </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">virtualBg</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(){</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> that</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> this</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    let</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> video </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> document.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">getElementById</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;localdemo01&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">this</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.rfId){</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">            cancelAnimationFrame</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">this</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.rfId)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    let</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> lastTime </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Date</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    async</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> function</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> getFrames</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;timer&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,lastTime)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">            const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> now</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> video.currentTime;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">            if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(now </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> lastTime){</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">                    await</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> selfieSegmentation.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">send</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">({image: video});</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            lastTime </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> now;</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">            //无限定时循环 退出记得取消 cancelAnimationFrame() </span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            that.rfId </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> requestAnimationFrame</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(getFrames);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    };</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    getFrames</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> canvasElement.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">captureStream</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">25</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>核心实际上就是<code>canvasElement.captureStream</code>方法，通过此方法即可捕捉画布并转换成流。内部唯一的参数就是帧速率<code>FPS</code>，一般设置为 <code>20 到 25</code> 这个区间即可满足正常视觉上的视频流畅度。</p><p>拿到画布媒体流后就要思考如何将该流发送给<code>WebRTC</code>对端，也就是我们所说的<strong>观众端</strong>。这样直播间的直播画面就是带有虚拟背景的画面。</p><p>这个流程就很简单了，和之前发送普通流一样，这次只不过是发送的画布流而已，名字不管是画布流还是普通流，在我们的代码中仅仅是 <code>MediaStream</code> 对象，因此按照正常流程来即可，如下：</p><ol><li><strong>获取虚拟背景流</strong>：</li></ol><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">//虚拟背景流暂存变量</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">this</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.virtualMediaStream </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> await</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> this</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">virtualBg</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span></code></pre></div><ol start="2"><li><strong>建立关联关系后替换媒体流</strong>： <code>virtualMediaStream</code> :</li></ol><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">async </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">onRemoteOffer</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(fromUid,offer){</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> localUid</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> this</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.formInline.userId</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        let</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> pcKey </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> localUid</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">+</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;-&#39;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">+</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">fromUid</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        let</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> pc </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> PeerConnection</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">this</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.rtcPcParams)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        RtcPcMaps.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">set</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(pcKey,pc)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;主播监听到远端offer&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,pc);</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">        this</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">onPcEvent</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(pc,localUid,fromUid)</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">        //注意这里我们直接用的是虚拟背景流 替换原先的 localstream</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        for</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> track</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> of</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> this</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.virtualMediaStream.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">getTracks</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            pc.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">addTrack</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(track);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        pc.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">setRemoteDescription</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(offer)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        let</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> answer </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> await</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> pc.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">createAnswer</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        await</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> pc.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">setLocalDescription</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(answer);</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        let</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> params </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;targetUid&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:fromUid,</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;userId&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:localUid,</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;answer&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:answer}</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">        this</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.linkSocket.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">emit</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;answer&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,params)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  }</span></span></code></pre></div><p><strong>演示</strong>：</p><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/48afab45ac1344158908ad3777b674ea~tplv-k3u1fbpfcp-jj-mark:3024:0:0:0:q75.awebp" alt=""></p><p>上面的动态图中，第一个为主播俩画面，一个为原始画面，另一个为带有虚拟背景的画面。后面的两个则是观众观看到的为带有虚拟背景的画面。</p><p>到这里我们直播间带虚拟背景的问题算是解决了，并且虚拟背景可以传送到观众端。<strong>但是接下来就要思考我们这节课的另一个重要问题了，直播开始如果并不使用虚拟背景而是在直播过程中自主切换虚拟背景，如何做到呢？</strong></p><h3 id="问题思考和实战" tabindex="-1">问题思考和实战 ​</h3><p>实际上，我们可以把直播中切换背景看作是切换视频流。如果我们能够在直播过程中无缝替换视频流，那么这个问题最重要的一步也就迎刃而解了，剩下的无非就是按照前面的流程，生成新的虚拟背景画布并获取视频流。</p><p>那么，在本身直播过程中，如何做到视频的无缝替换呢？</p><p>如果按照前面的老路子，你可能会选择重新建立新的<code>WebRTC</code>连接并发布新的媒体流，但是你有没有想过，当你重新协商的时候，又需要重新走繁琐的信令协商过程，观众端需要经历重新协商这段时间，才能看到新的画面，这样不仅仅需要消耗信令服务器的资源，还浪费了观众端的时间，岂不是得不偿失？</p><p>大家不必担心，我们能考虑到这个问题，实际上<code>WebRTC</code>的开发者也早就考虑到了，因此开发了相应的 API ，我们可以通过现有的 API 完成视频流的无缝切换，请看下面代码：</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> senders</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> this</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.localRtcPc.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">getSenders</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">let</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> stream </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> await</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> this</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">getShareMedia</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> [</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">videoTrack</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">] </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> stream.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">getVideoTracks</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> send</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> senders.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">find</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">((</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">s</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> s.track.kind </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">===</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;video&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">send.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">replaceTrack</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(videoTrack)</span></span></code></pre></div><ul><li>第一行代码为获取和某个客户端建立连接的<code>WebRTC</code>关联的<strong>核心对象</strong> 。</li><li>第二行为获取新的媒体流。</li><li>第三行为获取新的媒体流中的视频流。</li><li>第四行为获取<strong>核心对象</strong>中正在发布的视频轨道。</li><li>第五行为用新的视频流替换旧的流。</li></ul><p>注意第一行代码中的 <code>localRtcPc.getSenders()</code>，这个方法的官方描述就是“返回一个对象数组 <code>RTCRtpSender</code>，每个对象代表负责传输一个轨道数据的 RTP 发送方。发送器对象提供用于<strong>检查和控制轨道数据的编码和传输的方法和属性</strong>。”</p><p>大白话就是，这个方法返回的数组中，维护着发送方的媒体信息（<strong>RTP 就是最原始的媒体流</strong>），我们可以通过这个对象去<strong>检查和控制发送方媒体的编码和传输</strong>。 这样是不是就很容易理解了？如果不明白没关系，这节课我们只要知道可以通过这个方法去替换视频流就行了，后面《10 | 会议实战：实时通话过程中音频、视频画面实时控制切换》节我会给大家详细解释。</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> senders</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> this</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.localRtcPc.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">getSenders</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> send</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> senders.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">find</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">((</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">s</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> s.track.kind </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">===</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;video&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">send.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">replaceTrack</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(xxx) # xxx 为新的视频流</span></span></code></pre></div><p>再来回味下前面这段代码，首先获取当前已有<code>WebRTC</code>关联关系的核心对象<code>localRtcPc</code>，然后通过<code>getSenders</code>获取发送器对象数组，并过滤其中带有视频标签的轨道信息。最后替换发送器对象中的视频轨道信息。</p><p>而我们的场景是直播，也就是一对多的关联关系，因此在主播端，维护有 N 对<code>RTCPeerConnection</code>，因此需要遍历直播间所有的关联关系，并替换新的流，即可完成远程流的切换，如下：</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">//切换发送的远程流</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">async </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">changeRemoteStream</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(stream){</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    //先获取要替换的流 过滤音频 仅仅保留视频</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    const</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> [</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">videoTrack</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">] </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> stream.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">getVideoTracks</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    //主播端所有关联关系遍历并替换新的流</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    RtcPcMaps.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">forEach</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">e</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">            const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> senders</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> e.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">getSenders</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">            const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> send</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> senders.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">find</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">((</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">s</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> s.track.kind </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">===</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;video&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            send.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">replaceTrack</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(videoTrack)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    })</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p><strong>演示</strong></p><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/868b985440f641b5af926317359a70c6~tplv-k3u1fbpfcp-jj-mark:3024:0:0:0:q75.awebp" alt=""></p><h3 id="项目操作指南" tabindex="-1">项目操作指南 ​</h3><ol><li>打开项目，找到模块：小型直播。</li><li>流程第五节的流程一样。第五节中，如果大家已经运行过源码，那么应该已看到主播端中间一栏 写有 <code>直播开始后点击背景即可切换直播背景的醒目提示</code>。当时给大家说不用理会，但是现在是时候试试了。</li><li>在观众和主播都已经就位后，此时还不是点击背景开始虚拟背景的时机，请问你的模型文件夹内的模型被代理了吗？代码中是否已配置模型加载路径？如果没有请回到上一节重新再复习一边。</li><li>模型文件没问题后此刻就可以点击中间的虚拟背景了，任选一个然后稍等几秒钟就可以在两端看到效果。</li></ol><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/740d49271a3042ef96e4107a5f52ea2b~tplv-k3u1fbpfcp-jj-mark:3024:0:0:0:q75.awebp" alt=""></p><h3 id="完整代码地址" tabindex="-1">完整代码地址 ​</h3><p>直播部分代码</p><p>虚拟背景源码</p><h3 id="课后作业" tabindex="-1">课后作业 ​</h3><p>在直播使用虚拟背景的时候，大家可以注意下不同浏览器的 <code>FPS</code>，比如 360、谷歌、edge 等，然后开启浏览器的硬件加速后，再测试下 <code>FPS</code> 看下有何不同，同时注意计算机的资源占用情况。</p>`,39),t=[k];function p(l,e,E,d,r,g){return a(),i("div",null,t)}const A=s(h,[["render",p]]);export{C as __pageData,A as default};
