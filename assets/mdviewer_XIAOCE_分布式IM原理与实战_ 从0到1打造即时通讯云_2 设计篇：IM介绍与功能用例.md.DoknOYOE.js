import{_ as o}from"./app.BdTF1atn.js";import{j as t,i as p,Z as i}from"./chunks/@vue.D6nrJjhM.js";/* empty css                          */import"./chunks/@vueuse.ErXst1iV.js";const h=JSON.parse('{"title":"","description":"","frontmatter":{},"headers":[],"relativePath":"mdviewer/XIAOCE/分布式IM原理与实战: 从0到1打造即时通讯云/2 设计篇：IM介绍与功能用例.md","filePath":"mdviewer/XIAOCE/分布式IM原理与实战: 从0到1打造即时通讯云/2 设计篇：IM介绍与功能用例.md"}'),e={name:"mdviewer/XIAOCE/分布式IM原理与实战: 从0到1打造即时通讯云/2 设计篇：IM介绍与功能用例.md"},n=i('<p>万丈高楼平地起，越是复杂的系统，前期的设计规划工作越是不能马虎。因此，在正式进入学习之前，我们来了解下即时通讯IM的基本概念，同时从系统功能用例角度对<strong>本小册及实战项目有个整体认知</strong>。</p><p><img src="https://p1-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/16ecb1206f8344d6b90d2d5eca4d5999~tplv-k3u1fbpfcp-jj-mark:3024:0:0:0:q75.awebp" alt="本章内容如下.png" loading="lazy"></p><h3 id="im介绍" tabindex="-1">IM介绍 ​</h3><p><strong>即时通讯</strong>（<strong>I</strong>nstant <strong>M</strong>essaging，IM）即实时通信系统，允许两人或多人使用网络实时的传递文字、图片、语音来交流。比如我们每天使用的<strong>微信</strong>就属于IM系统，只不过随着需求的增加，现在的通信App都支持了<strong>音视频通话</strong>功能，不过本小册内容不包括音视频通话相关技术。</p><p>在了解IM的功能之前，我们先来看看<strong>几种通信相关的业务场景</strong>：</p><ul><li>IM 即时通讯</li><li>Live 直播聊天室</li><li>CS 在线客服</li></ul><blockquote><p>那么，同样拥有聊天功能的它们之间的有什么差异呢？</p></blockquote><p><code>IM聊天场景</code>是以<code>人</code>为中心的通信系统。强调人与人之间的关系，因此才有<strong>好友</strong>与<strong>群</strong>的概念，这类系统如果用户量与用户活跃度不错的话，通常每天可以产生<strong>百万条消息</strong>，如果是群的话，消息还会扩散。因此消息转发的<strong>可靠性</strong>、<strong>吞吐量</strong>、<strong>及时性</strong>是业务上的一个难点。</p><p><code>Live直播场景</code>是以<code>群</code>为中心的通信系统，通常称作<code>聊天室</code>。在IM场景中一个群的人数上限通常是500，达到1k就非常高了，这是它的业务特点导致的。而在一个聊天室中，你需要在<code>设计时</code>考虑到一个房间可能有10w+的在线用户，<strong>不过在聊天室场景中用户不可能同时在多个room中</strong>，因此可以通过路由把相同room的用户切到同一台服务，达到最大化性能的目的。而且这个场景通常不需要考虑<strong>离线消息</strong>这个头疼的问题。</p><p><code>CS客服场景</code>是以<code>会话</code>为中心的通信系统。也就是沟通都是以会话为单位，在这个<code>会话</code>中，你可能首先与机器人扯了一会皮，然后与售前妹子沟通了一会，发现问题不对，被转给一个技术支持小哥了。可以看出系统的核心逻辑是基于<strong>会话的生命周期</strong>来设计，而聊天中的人与AI则是被调度的对象。</p><h4 id="单聊" tabindex="-1">单聊 ​</h4><p><code>单聊</code>以人为单位，而<code>群聊</code>以<strong>一批人</strong>为单位。通常我们说的实时通信是指多方同时在线情况下，可以通过聊天服务实时收发消息，不过在IM这个场景中，极大可能出现一个用户A给另一个用户B发送消息时，用户B不在线，此时，消息就需要存储在服务器上；<strong>只要在设定的时间范围内</strong>，用户B登录到服务器，此消息就会同步到用户B，这就是<strong>离线消息</strong>。超过时间范围的消息就会被丢弃，如果不做离线同步或者<strong>同步逻辑有漏洞</strong>，就会导致消息丢失，这在业务上是<code>零容忍</code>的。</p><p><img src="https://p9-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/9c685df7186143fabec1dde652963fb1~tplv-k3u1fbpfcp-jj-mark:3024:0:0:0:q75.awebp" alt="离线消息.png" loading="lazy"></p><h4 id="群聊" tabindex="-1">群聊 ​</h4><p><strong>群聊</strong>比单聊要复杂一些。单聊消息的接收方是一个用户，在服务端可以直接定位出来；而群聊消息的接收者是一群人，难道我们直接在<code>消息头</code>中写上所有人？这样不是不可以，但是对带宽的浪费太大。而且业务上对群聊有更多要求，比如设置群简介，禁言，人员管理，置顶等。因此，在系统中必须定义一个群对象，当服务器收到一条群消息时，服务端需要找到群中<code>在线</code>的成员列表，把消息广播过去。</p><p><img src="https://p9-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/282e4d62f2154874b31dd11a2f059989~tplv-k3u1fbpfcp-jj-mark:3024:0:0:0:q75.awebp" alt="群聊示意图.png" loading="lazy"></p><p>群的信息与成员列表通常是<strong>持久</strong>在数据库中，因为更新频率不高。而会话（记录用户与连接的关系）随着<strong>用户的登录</strong>、<strong>退出</strong>、<strong>被踢</strong>、<strong>连接异常断开</strong>、<strong>自动重连</strong>等情况导致会经常变动，也就是大量的写入和删除操作，通常是存放在<code>高速缓存</code>中。</p><p>因此，这里的读取成员列表实际上是有两步：</p><ol><li>从<strong>数据库</strong>中读取成员列表</li><li>从<strong>高速缓存</strong>中读取<code>每个成员</code>的登录会话信息</li></ol><blockquote><p>假设一个群成员有1千人，每一次消息转发，忽略消息持久化处理时长，仅<strong>读取成员列表和会话</strong>在性能上就是个考验。<code>因此会话之类的信息是不可能保存在事务类的数据库中的</code>。</p></blockquote><h3 id="系统功能用例" tabindex="-1">系统功能用例 ​</h3><p>实现一个系统，首先就是要把范围定义明确，下面我们列举下系统核心功能。</p><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/17caf2ba5ec04043807f3cfc6216cd81~tplv-k3u1fbpfcp-jj-mark:3024:0:0:0:q75.awebp" alt="im_usercase (2).png" loading="lazy"></p><p>由于是写实战小册，所以功能上尽量<code>精练</code>，同时又不能丢失<code>核心</code>，基本上搞懂了这些核心的逻辑及知识，其它的就是一些扩展内容了。因此，我对整个系统的规划就成了上面的样子。</p><p><strong>整个后端分为四部分：通信服务、Web服务、进阶功能、运维相关</strong></p><h4 id="一、通信服务" tabindex="-1">一、通信服务 ​</h4><p>通信服务是整个系统的<code>心脏</code>。从功能上来说主要考虑如下几点：</p><ol><li>支持tcp/websocket协议的接入。</li><li>实现登录、登出、同账号互踢等。</li><li>单聊：一对一聊天。</li><li>群聊：一对多聊天。</li><li>离线消息。</li><li><strong>敏感词</strong>：如涉政、色情等非法词语过滤原理及流程。</li><li>群管理 <ul><li>创建群</li><li>群详情</li><li>进群</li><li>退群</li><li>成员列表</li></ul></li></ol><p>通信服务的整体架构会在后面的章节讲解，包括从<code>单体架构</code>到<code>分布式架构</code>的几次演变，因此这里就不过多描述。其中群管理在业务上涉及到权限控制，由于不是本项目的重点，因此忽略。</p><h4 id="二、web服务" tabindex="-1">二、Web服务 ​</h4><p>Web服务不是本小册的技术重点，更多的是从业务需要考虑，主要为了说明逻辑实现原理。</p><p>主要功能：</p><ol><li>授权服务</li><li>用户管理 <ul><li>创建用户</li><li>查询详情</li></ul></li></ol><p>通常IM系统还有好友的概念，不过它更多是业务上的逻辑，与整个系统核心逻辑关系不大，因此本小册就不涉及<strong>好友关系的管理及消息的收发权限</strong>处理了。</p><h4 id="三、进阶功能" tabindex="-1">三、<code>进阶功能</code> ​</h4><p>前面介绍的只是即时通讯的基本功能，但是在真实的环境中，需要考虑的方面是非常多的，而且由于是长连接<code>分布式集群</code>，与HTTP服务相比，<strong>达到同等级别的SLA（服务可用性）的难度更大</strong>，因此本小册还会介绍一些进阶功能，主要内容如下：</p><ol><li><p><strong>测试</strong>：</p><ul><li>单元测试：通过覆盖测试确保逻辑可靠。</li><li>基准测试：测试登录、单聊、群聊性能。</li></ul></li><li><p><strong>性能优化</strong>：从内存、GC、缓冲等方面优化系统。</p></li><li><p><strong>智能路由</strong>：介绍长连服务前端的路由与负载逻辑。</p></li><li><p><strong>多租户</strong>：介绍多租户实现原理及服务隔离。</p></li><li><p><strong>灰度发布</strong>：介绍灰度发布系统的原理及实战。</p></li><li><p><strong>部署架构</strong>：介绍分布式部署架构及要点。</p></li></ol><h4 id="四、运维" tabindex="-1">四、运维 ​</h4><p>把运维也列入开发项，主要是因为它不仅仅是运维来考虑的事，研发在设计时就要把它考虑进去，比如通信服务监控<code>各项指标</code>。主要内容如下：</p><p><img src="https://p6-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/0d58b646380448ea8465a91e4e74238b~tplv-k3u1fbpfcp-jj-mark:3024:0:0:0:q75.awebp" alt="运维.png" loading="lazy"></p><ol><li><p>日志系统。</p><ul><li>程序日志。</li><li>业务日志：如登录、退出等事件。</li></ul></li><li><p>监控报警系统。</p><ul><li>机器监控。比如CPU、内存、磁盘等。</li><li>服务监控。比在线用户、请求时长、GC、占用内存、线程数、转发流量等。</li></ul></li></ol><h3 id="sdk功能用例" tabindex="-1">SDK功能用例 ​</h3><p>长连服务相对http服务来说，是<code>重</code>客户端逻辑，因为用户与服务端建立的<strong>连接</strong>是有<strong>生命周期</strong>的。比如<strong>登录退出</strong>、<strong>自动重连</strong>，<strong>消息重试</strong>等逻辑都是依赖客户端实现。因此，需要开发一个SDK把复杂的逻辑封装，提供相对简单的接口给上层使用，实战篇会介绍web端Typescript的SDK。</p><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/74f303e9b734475285e8df2297e87ac1~tplv-k3u1fbpfcp-jj-mark:3024:0:0:0:q75.awebp" alt="im_sdk_usecase.png" loading="lazy"></p><p>SDK核心功能如下：</p><ol><li>连接管理</li><li>会话管理</li><li>消息收发</li></ol><p>除了正常的登录，登出，及消息收/发。原生系统的SDK还要考虑会话、消息的缓存问题，否则在用户端的体验是很不好的。比如在APP中打开一个会话界面之后还需要从服务端读取消息，那么界面上肯定会有一个空白时间，这个体验是非常差的，而且对服务端压力也会增加很多。不过由于本实战项目只包括Web版本的SDK，因此不会涉及会话与消息的缓存等逻辑。</p><h3 id="最后总结" tabindex="-1">最后总结 ​</h3><p>本章实际上是一个真正的开篇哈，不涉及太多知识点，主要是帮忙读者对即时通讯系统有个整体了解。当然，本章实际上还是强调了一个<code>重点</code>：<strong>在高并发的即时通讯系统中群聊和离线消息是一个难点，在系统的架构设计时要考虑的一个重点</strong>，具体内容我们在<strong>架构篇：分布式IM架构及演进</strong>一章见分晓。</p><p>本章完！</p>',50),s=[n];function l(r,c,g,d,a,b){return p(),t("div",null,s)}const k=o(e,[["render",l]]);export{h as __pageData,k as default};
