import{_ as s}from"./app.BdTF1atn.js";import{j as i,i as a,Z as n}from"./chunks/@vue.D6nrJjhM.js";/* empty css                          */import"./chunks/@vueuse.ErXst1iV.js";const u=JSON.parse('{"title":"","description":"","frontmatter":{},"headers":[],"relativePath":"mdviewer/XIAOCE/WebRTC：实现私有化会议直播系统/23 扩展：会议系统普通部署实战.md","filePath":"mdviewer/XIAOCE/WebRTC：实现私有化会议直播系统/23 扩展：会议系统普通部署实战.md"}'),p={name:"mdviewer/XIAOCE/WebRTC：实现私有化会议直播系统/23 扩展：会议系统普通部署实战.md"},e=n(`<p>到这里我们会议系统的学习和实战算是整体告一段落了，接下来的两节课，我们将写好的会议系统部署到线上，以及学习在部署过程中需要注意的一些问题。</p><p>部署之前，我们需要准备好项目中用到的一些服务的配置。</p><h3 id="基础配置注意事项" tabindex="-1">基础配置注意事项 ​</h3><p>会议系统需要获取用户的摄像头、麦克风等敏感设备信息，访问协议必须是<code>HTTPS</code>（《02| 基础（一）：Web 端基础 API 学习》章节详细介绍过），因此部署后必须配置<code>SSL</code>证书。再一个就是需要特别注意线上部署后云服务器<code>安全组</code>开放的问题，默认购买云服务器后，是无法直接访问特定端口的，必须在对应厂商的控制台安全组中开放端口才可以。</p><h4 id="信令服务" tabindex="-1">信令服务 ​</h4><p>我们在学到第一种 <code>Mesh</code>多人会议架构时用到了信令交换服务器，信令服务器是 <code>WebRTC</code>基础信令交换的核心，因此会议系统前端部署之前，我们必须配置好信令服务器。</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">//获取当前项目访问协议</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> protocol</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> window.location.protocol </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">===</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;https:&#39;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> ?</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;wss://&#39;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> :</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;ws://&#39;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> host</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> window.location.host</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> server</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> protocol</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">+</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">host</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">//根据环境自动选择服务器配置</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">let</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> serverSocketUrl </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> process.env.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">NODE_ENV</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> ===</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;development&#39;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> ?</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;ws://127.0.0.1:18080&#39;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> :</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> server</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Vue</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">prototype</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.$serverSocketUrl </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> serverSocketUrl;</span></span></code></pre></div><p>请注意我上面的服务器地址配置，获取的是当前访问的 IP 或域名的基础信息，比如当前的前端项目打包后被部署到域名<code>https://www.xxxxx.zyx</code>下，那么信令服务地址则是：<code>wss\`\`://www.xxxxx.zyx</code>，而如果本地访问则地址是<code>ws://127.0.0.1:18080</code>。</p><p>当然我上面的配置是因为信令服务器和前端项目在同一个域名路径下，如果大家的信令服务器和会议前端不在一块部署，则自己可以将<code>serverSocketUrl</code>变量替换为自己的信令服务器，但是请注意 <strong>跨域和访问协议的问题，如果你的会议前端访问协议为 <code>HTTPS</code> ，那么这里的信令服务地址必须为 <code>HTTPS</code></strong>，相关知识参考。</p><p>在我们的课程中为了避免部署的繁琐，我一开始就在信令服务器配置了静态文件夹映射，因此你可以直接将打包后的前端静态文件放到指定文件夹，然后<strong>直接访问信令服务器的 IP端口即可</strong>，线上部署之后，通过<code>nginx</code>直接映射信令服务器的端口。</p><p><strong>信令服务和静态文件映射部分配置</strong> ：</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">//http server 这里配置前端打包后的静态文件 </span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">app.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">use</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(express.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">static</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;./dist&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">));</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">app.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">use</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">function</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">req</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">res</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">next</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  res.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">sendfile</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;./dist/index.html&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);  </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">//路径根据自己文件配置</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">});</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">var</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> server</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">http.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">createServer</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(app)</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">//socket server</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">let</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> io </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> require</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;socket.io&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)(server,{allowEIO3:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">true</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">});</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">//自定义命令空间  nginx代理 /mediaServerWsUrl { http://xxxx:18080/socket.io/ }</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// io = io.of(&#39;mediaServerWsUrl&#39;)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">server.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">listen</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">18080</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">async</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;服务器启动成功 *:18080&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">});</span></span></code></pre></div><p><strong>Nginx 映射配置</strong> ：</p><div class="language-conf vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">conf</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>server {</span></span>
<span class="line"><span>  server_name www.xxxxx.zyx;</span></span>
<span class="line"><span>  listen 443 ssl http2;</span></span>
<span class="line"><span>  ssl_certificate /home/nginxWebUI/letsebcrypt/cert.crt;</span></span>
<span class="line"><span>  ssl_certificate_key /home/nginxWebUI/letsebcrypt/private.key;</span></span>
<span class="line"><span>  ssl_protocols TLSv1 TLSv1.1 TLSv1.2 TLSv1.3;</span></span>
<span class="line"><span>  listen 80;</span></span>
<span class="line"><span>  # http重定向到https</span></span>
<span class="line"><span>  if ($scheme = http) {</span></span>
<span class="line"><span>    return 301 https://$host:443$request_uri;</span></span>
<span class="line"><span>  }</span></span>
<span class="line"><span>  location / {</span></span>
<span class="line"><span>    proxy_pass http://127.0.0.1:18080/; # 这里就是信令服务启动的服务地址</span></span>
<span class="line"><span>    proxy_set_header Host $host;</span></span>
<span class="line"><span>    proxy_set_header X-Real-IP $remote_addr;</span></span>
<span class="line"><span>    proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;</span></span>
<span class="line"><span>    proxy_set_header X-Forwarded-Host $http_host;</span></span>
<span class="line"><span>    proxy_set_header X-Forwarded-Port $server_port;</span></span>
<span class="line"><span>    proxy_set_header X-Forwarded-Proto $scheme;</span></span>
<span class="line"><span>    ## 信令核心配置 必须开启支持 websocket </span></span>
<span class="line"><span>    proxy_http_version 1.1;</span></span>
<span class="line"><span>    proxy_set_header Upgrade $http_upgrade;</span></span>
<span class="line"><span>    proxy_set_header Connection &quot;upgrade&quot;;</span></span>
<span class="line"><span>    proxy_redirect http:// https://;</span></span>
<span class="line"><span>  }</span></span>
<span class="line"><span>}</span></span></code></pre></div><h4 id="webrtc-网关服务器配置" tabindex="-1">WebRTC 网关服务器配置 ​</h4><p>第二种 <code>SFU</code> 架构会议系统中，我们用到了<code>Janus</code>网关服务器，因此抽取全局变量后如下：</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">//Janus地址</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 如果为dev环境 直接配置绝对路径 否咋配置相对路径（如果前端不在janus所在服务器 则直接用映射后的地址 ）</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Vue</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">prototype</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.$janusServerUrl </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> process.env.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">NODE_ENV</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> ===</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;development&#39;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> ?</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;https://www.xxxxxx.zyx/suke-janus/janus/&#39;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> :</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;/suke-janus/janus/&#39;</span></span></code></pre></div><p>Nginx 代理配置（注意上下对比看代理路径：代理前的 <code>Janus</code>地址：<code>http://x.x.x.x:18088</code>）：</p><div class="language-conf vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">conf</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span> location /suke-janus {</span></span>
<span class="line"><span>    proxy_pass http://x.x.x.x:18088/; ## 这里配置网关 janus地址  </span></span>
<span class="line"><span>    proxy_set_header Host $host;</span></span>
<span class="line"><span>    proxy_set_header X-Real-IP $remote_addr;</span></span>
<span class="line"><span>    proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;</span></span>
<span class="line"><span>    proxy_set_header X-Forwarded-Host $http_host;</span></span>
<span class="line"><span>    proxy_set_header X-Forwarded-Port $server_port;</span></span>
<span class="line"><span>    proxy_set_header X-Forwarded-Proto $scheme;</span></span>
<span class="line"><span>    proxy_redirect http:// https://;</span></span>
<span class="line"><span>  }</span></span></code></pre></div><p>项目中变量引用：</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">janus </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Janus</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">({</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        server: that.$janusServerUrl,</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">//全局配置</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        apisecret:</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;suc119119&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">//这个变量也可以弄成全局的</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">        success</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">function</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">                        Janus.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;初始化成功&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">                        that.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">initVideoRoomPlugin</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        },</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">        error</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">function</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">cause</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">        //异常显示</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">                        Janus.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(cause)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        },</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">        destroyed</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">function</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">                        Janus.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;destroyed&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">});</span></span></code></pre></div><h4 id="网络穿透服务器配置" tabindex="-1">网络穿透服务器配置 ​</h4><p><code>STUN</code>和<code>TURN</code>配置。如果你的项目部署在公网，这个配置是不可避免的，毕竟全球各地的网络状况是复杂多变的。同时如果你的客户是针对国内外的，那么强烈建议使用中继，即 <code>TURN</code>服务器，作为流量中继，而 <code>TURN</code>服务部署位置选择国内外都可以访问的区域，比如购买区域在香港的云服务器。</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">rtcPcParams</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:{</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> iceServers</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: [</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        { url: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;stun:stun.l.google.com:19302&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">},</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 谷歌的公共服务</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        {urls: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;turn:x.x.x.x:3478&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, username:</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;suc&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, credential:</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;suc001&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">},</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">//turn服务 自建 可以配置多个</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        ]</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">},</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">---------------</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">参数调用位置</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-----------------</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">pc </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> PeerConnection</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">this</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.rtcPcParams)</span></span></code></pre></div><h4 id="流媒体服务地址配置" tabindex="-1">流媒体服务地址配置 ​</h4><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">//SRS相关地址</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Vue</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">prototype</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.$srsServerAPIURL </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;http://192.168.101.99:1985/&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Vue</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">prototype</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.$srsServerRTCURL </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;webrtc://192.168.101.99:8085/live/&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Vue</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">prototype</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.$srsServerFlvURL </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;http://192.168.101.99:8085/live/&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span></code></pre></div><p>上面三个地址为全局变量，代码中也是通过全局变量引用。</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">//推流SDP交换</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">axios.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">post</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">this</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.$srsServerAPIURL</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">+</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;rtc/v1/publish/&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,data)</span></span></code></pre></div><p>上面配置的地址，如果你线上使用的<code>HTTPS</code>协议，那么项目内部<code>API</code>请求也需要配置<code>HTTPS</code>，同样可通过<code>nginx</code>代理。</p><h4 id="服务器端口配置" tabindex="-1">服务器端口配置 ​</h4><p>我们在会话过程中会遇到很多端口，部署到线上阿里云、腾讯云等云厂商服务器后，需要去安全组开放特定的端口，这样外部才能进行访问。这里我将常见的需要大家注意的端口着重说明下：</p><ul><li>信令服务器端口：项目中默认配置的<code>18080</code>，大家可以自定义，然后在安全组放行。</li></ul><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/d029c4ba4d2c49449069e73395c98db0~tplv-k3u1fbpfcp-jj-mark:3024:0:0:0:q75.awebp" alt=""></p><ul><li>WebRTC 网关 Janus 服务 API 端口，示例中为<code>18088</code>，安全组需要放行。</li></ul><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/b2e682dea9214631990df0bbdfe47b2d~tplv-k3u1fbpfcp-jj-mark:3024:0:0:0:q75.awebp" alt=""></p><ul><li>Janus 网关 RTP 数据交换端口。</li></ul><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/ee452aad36af4c7f925c178aacd0b229~tplv-k3u1fbpfcp-jj-mark:3024:0:0:0:q75.awebp" alt=""></p><ul><li><code>coturn</code>服务端口，看下图红色框框中的端口配置。</li></ul><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/c4d803e7481046fb83547f9f2eb18ded~tplv-k3u1fbpfcp-jj-mark:3024:0:0:0:q75.awebp" alt=""></p><h3 id="实战部署" tabindex="-1">实战部署 ​</h3><ol><li>前端项目打包。</li></ol><div class="language-sh vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">npm</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> run</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> build</span></span></code></pre></div><ol start="2"><li>打包好的<code>dist</code>文件夹放到和信令服务同目录。</li></ol><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/843da2edf2ed407187d9daf3725d288f~tplv-k3u1fbpfcp-jj-mark:3024:0:0:0:q75.awebp" alt=""></p><ol start="3"><li>启动信令服务。</li></ol><div class="language-sh vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> node app.js</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">服务器启动成功</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> *</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">:18080</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">redis</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> 连接成功</span></span></code></pre></div><ol start="4"><li>浏览器输入信令服务 IP+端口。</li></ol><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/efdccd1b04e143aab2b91e6bd03f9bba~tplv-k3u1fbpfcp-jj-mark:3024:0:0:0:q75.awebp" alt=""></p><ol start="5"><li><code>Nginx</code>代理并绑定域名，注意域名配置成自己的，下面示例为我的线上域名。</li></ol><div class="language-conf vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">conf</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>server {</span></span>
<span class="line"><span>  server_name nrtc.wangsrbus.cn;</span></span>
<span class="line"><span>  listen 443 ssl http2;</span></span>
<span class="line"><span>  ssl_certificate /home/nginxWebUI/letsebcrypt/cert.crt;</span></span>
<span class="line"><span>  ssl_certificate_key /home/nginxWebUI/letsebcrypt/private.key;</span></span>
<span class="line"><span>  ssl_protocols TLSv1 TLSv1.1 TLSv1.2 TLSv1.3;</span></span>
<span class="line"><span>  listen 80;</span></span>
<span class="line"><span>  # http重定向到https</span></span>
<span class="line"><span>  if ($scheme = http) {</span></span>
<span class="line"><span>    return 301 https://$host:443$request_uri;</span></span>
<span class="line"><span>  }</span></span>
<span class="line"><span>  location / {</span></span>
<span class="line"><span>    proxy_pass http://127.0.0.1:18080/; # 这里就是信令服务启动的服务地址,看上一步访问地址</span></span>
<span class="line"><span>    proxy_set_header Host $host;</span></span>
<span class="line"><span>    proxy_set_header X-Real-IP $remote_addr;</span></span>
<span class="line"><span>    proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;</span></span>
<span class="line"><span>    proxy_set_header X-Forwarded-Host $http_host;</span></span>
<span class="line"><span>    proxy_set_header X-Forwarded-Port $server_port;</span></span>
<span class="line"><span>    proxy_set_header X-Forwarded-Proto $scheme;</span></span>
<span class="line"><span>    ## 信令核心配置 必须开启支持 websocket </span></span>
<span class="line"><span>    proxy_http_version 1.1;</span></span>
<span class="line"><span>    proxy_set_header Upgrade $http_upgrade;</span></span>
<span class="line"><span>    proxy_set_header Connection &quot;upgrade&quot;;</span></span>
<span class="line"><span>    proxy_redirect http:// https://;</span></span>
<span class="line"><span>  }</span></span>
<span class="line"><span>}</span></span></code></pre></div><h3 id="ssl-证书自动签发" tabindex="-1">SSL 证书自动签发 ​</h3><p><code>SSL</code>证书有收费的，也有免费的。一般而言，我们在云厂商都可以针对单个域名免费申请 20 次且每次期限一年的<code>SSL</code>证书（下面是腾讯云的截图）。</p><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/f7c6ce5b23db44c7aa056a0241fad27c~tplv-k3u1fbpfcp-jj-mark:3024:0:0:0:q75.awebp" alt=""></p><p>我们的目的肯定是能自动化就自动化，方便维护。这里推荐一个工具：acme (Github地址)。通过此工具，我们可以自动申请和续期免费的SSL证书。</p><h4 id="工具下载安装" tabindex="-1">工具下载安装 ​</h4><div class="language-sh vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 注意下面的邮箱换成你自己的</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">curl</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> https://get.acme.sh</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> |</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> sh</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -s</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> email=1215618342@qq.com</span></span></code></pre></div><h4 id="开启自动更新" tabindex="-1">开启自动更新 ​</h4><div class="language-sh vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">acme.sh</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --upgrade</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --auto-upgrade</span></span></code></pre></div><h4 id="切换-ca-类型" tabindex="-1">切换 CA 类型 ​</h4><p>目前 <code>acme.sh</code> 支持四个正式环境 <code>CA</code>，分别是 <code>Let&#39;s Encrypt</code>、<code>Buypass</code>、<code>ZeroSSL</code>和 <code>SSL.com</code>，默认使用 <code>ZeroSSL</code>。我们一般使用<code>Let&#39;s Encrypt</code>就可以，既支持单域名，也支持通配符多域名证书（<strong>虽然通配符类型证书时间仅有3个月，但是好在我们有这个工具</strong>）。切换LE类型命令如下：</p><div class="language-sh vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">acme.sh</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --set-default-ca</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --server</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> letsencrypt</span></span></code></pre></div><h4 id="泛域名仅支持-dns-验证" tabindex="-1">泛域名仅支持 DNS 验证 ​</h4><p>申请 API 密钥(DNSPod Token) 腾讯云API Key申请，每个厂商的DNS验证参数配置是不一样的额，如果你的域名不是腾讯云的那么请查看此文档 。然后编辑 <code>acme</code>工具配置信息，如下：</p><div class="language-sh vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">cd</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> ~/.acme.sh</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">vi</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> account.conf</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">## 添加如下 dnspod 密钥</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">export</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> DP_Id</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;xxxx&quot;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">export</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> DP_Key</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;12222222222&quot;</span></span></code></pre></div><h4 id="证书申请" tabindex="-1">证书申请 ​</h4><blockquote><p>注意下面参数：<code>dns_dp</code>表示用腾讯云 <code>dnspos</code>验证 <code>-d webrtc.link -d *.webrtc.link</code>表示域名，自己的请配置自己的域名</p></blockquote><div class="language-sh vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">acme.sh</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --issue</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --log</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --dns</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> dns_dp</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -d</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> webrtc.link</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -d</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> *</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">.webrtc.link</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --key-file</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> /home/nginxWebUI/letsebcrypt/private-rtclink.key</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --fullchain-file</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> /home/nginxWebUI/letsebcrypt/cert-rtclink.crt</span></span></code></pre></div><p>执行脚本后，观察域名解析信息，可以看到会自动增加两条解析：</p><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/bcbff5b4bd5a4c9aac5001d9baec5031~tplv-k3u1fbpfcp-jj-mark:3024:0:0:0:q75.awebp" alt=""></p><p>申请成功则会打印如下：</p><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/3b5803d2ba5d41eca253c9c245fb89f4~tplv-k3u1fbpfcp-jj-mark:3024:0:0:0:q75.awebp" alt=""></p><p>我们访问配置对应证书后，查看浏览器对应提示：</p><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/28b68324ce594a76a3bb2829d7b920c4~tplv-k3u1fbpfcp-jj-mark:3024:0:0:0:q75.awebp" alt=""></p><h3 id="课后题" tabindex="-1">课后题 ​</h3><p>这节课后大家主要练习对于会议系统的部署，实际上大多数项目的部署都是如此，学会一种，后续自己的其他项目部署也是得心应手。对于自动签发<code>SSL</code>证书，大家可以多找几个域名试试，去找一年两三块钱那种多练习练习即可。</p>`,75),t=[e];function l(h,k,d,r,c,o){return a(),i("div",null,t)}const b=s(p,[["render",l]]);export{u as __pageData,b as default};
