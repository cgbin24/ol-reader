import{_ as s}from"./app.BdTF1atn.js";import{j as i,i as a,Z as n}from"./chunks/@vue.D6nrJjhM.js";/* empty css                          */import"./chunks/@vueuse.ErXst1iV.js";const C=JSON.parse('{"title":"","description":"","frontmatter":{},"headers":[],"relativePath":"mdviewer/XIAOCE/MySQL 性能调优必知必会/7 InnoDB 存储引擎的底层逻辑架构.md","filePath":"mdviewer/XIAOCE/MySQL 性能调优必知必会/7 InnoDB 存储引擎的底层逻辑架构.md"}'),e={name:"mdviewer/XIAOCE/MySQL 性能调优必知必会/7 InnoDB 存储引擎的底层逻辑架构.md"},h=n(`<p>我们都知道 MySQL 数据库有很多个存储引擎，其中另我们印象深刻的应该是 <code>InnoDB</code> 存储引擎，它从 MySQL 5.5 之后就是默认的存储引擎，它有支持事务、行级锁、MVCC 以及外键等优点。</p><p>那么你知道<code>InnoDB</code>存储引擎的底层逻辑架构吗？下面我们就来聊一下<code>InnoDB</code>存储引擎。</p><p><code>InnoDB</code>存储引擎主要由两个部分组成，分别是<strong>内存架构</strong>和<strong>磁盘架构</strong>，这两个部分都有自己不可或缺的功能。下面我们就通过一张图来详细了解一下这两个部分。</p><p><img src="https://p9-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/6adfe959a2c847beae683bc16fdf1aa2~tplv-k3u1fbpfcp-jj-mark:3024:0:0:0:q75.awebp" alt="image.png" loading="lazy"></p><h3 id="内存架构" tabindex="-1">内存架构 ​</h3><p>内存架构（英文名称：<code>In-Memory Structures</code>)，在<code>InnoDB</code>存储引擎中主要包括四个部分，分别是自适应哈希索引、<code>Buffer pool</code>、<code>Change buffer</code>和<code>Log Buffer</code>四个部分。</p><h4 id="_1-自适应哈希索引" tabindex="-1">1. 自适应哈希索引 ​</h4><p>首先我们来聊聊自适应哈希索引，自适应哈希索引的英文名称：<code>Adaptive Hash Index</code>。<strong>它的设计目的是想让 MySQL 数据库像内存数据库一样高效，同时不会丢掉事务、行锁以及外键等特性</strong>。</p><p>它并不是我们人为去创建的，而是<code>InnoDB</code>存储引擎通过索引监控机制去自动创建的，也就是说如果<code>InnoDB</code>存储引擎监控到自适应哈希索引可以提高查询速度，随即<code>InnoDB</code>存储引擎会自动为本次查询创建自适应哈希索引。命中了自适应哈希索引的查询就不会触发全表扫描，而是直接通过索引拿需要的数据，这样就可以提高数据库的查询速度。</p><p>但是自适应哈希索引并不是任何情况下都可以使用，例如：<code>link &#39;%xxx&#39;</code>，这是因为 link 前置百分号查询本身就需要全表扫描，所以用与不用索引的结果都是一样的，用索引反而会多此一举，因此这种情况下不需要创建自适应哈希索引。</p><h4 id="_2-buffer-pool" tabindex="-1">2. Buffer pool ​</h4><p>Buffer pool（中文名称：缓冲池），是 MySQL 数据库中最重要的一个部分。在数据库启动之时，首先会初始化这块内存区域，它占用了 MySQL 数据库总内存空间的<code>80%</code>以上。详细情况可以通过<code>show engine innodb status\\G</code>来查看：</p><div class="language-sql vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sql</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">mysql</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> show engine innodb </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">status</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">\\G</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">----------------------</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">BUFFER</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> POOL</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> AND</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> MEMORY</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">----------------------</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">Total large memory allocated </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">137428992</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">Dictionary memory allocated </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">301572</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">Buffer</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> pool</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> size</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">   8191</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">Free buffers       </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">6916</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">Database</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> pages     </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1252</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">Old </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">database</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> pages </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">442</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">Modified db pages  </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">Pending reads      </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">Pending writes: LRU </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, flush list </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, single </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">page</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 0</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">Pages made young </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">258</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">not</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> young </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">00</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> youngs</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">/</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">s, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">00</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> non</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">youngs</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">/</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">s</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">Pages </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">read</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 320</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, created </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">938</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, written </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">3279</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">00</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> reads</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">/</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">s, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">00</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> creates</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">/</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">s, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">00</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> writes</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">/</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">s</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">No</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> buffer</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> pool</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> page</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> gets since the </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">last</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> printout</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">Pages </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">read</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> ahead </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">00</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">/</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">s, evicted </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">without</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> access </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">00</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">/</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">s, Random </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">read</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> ahead </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">00</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">/</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">s</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">LRU len: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1252</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, unzip_LRU len: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">I</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">/</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">O sum[0]:cur[0], unzip sum[0]:cur[0]</span></span></code></pre></div><p>它的主要作用是<strong>提高数据库查询的效率</strong>，其中主要使用了<code>LRU</code>算法，下面我们一起来详细了解一下<code>LRU</code>算法。</p><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/c5479d76496a47efa1dc60b7507567d4~tplv-k3u1fbpfcp-jj-mark:3024:0:0:0:q75.awebp" alt="image.png" loading="lazy"></p><p>在<code>MySQL</code>数据库中，<code>LRU</code>算法的底层主要是一个链表。不过该链表被分为了两个区域，分别是新子链表和旧子链表，而且新子链表占用总空间的<code>5/8</code>，旧子链表占用总空间的<code>3/8</code>。其主要实现的步骤如下：</p><p><img src="https://p9-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/b896962344514c40873924801a4df288~tplv-k3u1fbpfcp-jj-mark:3024:0:0:0:q75.awebp" alt="image.png" loading="lazy"></p><ul><li>第一步：假设我们读取<code>数据2</code>，这个时候恰好<code>数据2</code>在新子链表中，这个时候，会将<code>数据2</code>调换至新子链表的开头。</li><li>第二步：如果查询一条<code>buffer pool</code>中没有的数据时，<code>MySQL</code>数据库将在磁盘中读取出该条数据<code>数据X</code>，并且插入新子链表后面，同时会淘汰旧子链表中的<code>数据N</code>。</li></ul><p>说到这里，可能就会有朋友问了，既然新数据移到链表的最前方，排列在最后面的数据直接淘汰，那么为什么还需要一个新子链表和旧子链表呢？</p><p>这个时候我们设想一下，假设我们查询一个比较大的数据，可能会占满所有的<code>Buffer pool</code>内存空间，按照我们理解的淘汰策略，这个时候会一下子将所有的数据全部淘汰。而这个时候正在高速运转的数据库会将所有的查询全部作用于磁盘，那将会导致系统磁盘 IO 急剧升高且数据库反应缓慢，最终会导致用户体验下降。</p><p>这个时候我们再看，如果把所有新查询的数据全部存放于新子链表中，查询的数据最多把新子链表中的空间全部占满而旧子链表中仍然保留着之前的数据，对于高速运转的数据库来讲，就不会导致系统磁盘 IO 急剧升高和数据库反应缓慢了。这也正是新旧子链表设计的初衷。</p><p>在<code>Buffer Pool</code>存储块中还保留有一个小内存块，即<code>Change buffer</code>。下面我们就来聊聊这块内存是用来做什么的。</p><h4 id="_3-change-buffer" tabindex="-1">3. Change buffer ​</h4><p><code>Change Buffer</code>的另一个名字叫“写缓存”。见名知意，<code>Change Buffer</code>主要的功能是<strong>记录数据库的数据修改操作的结果的</strong>。主要目的是<strong>提高数据库的写性能</strong>。</p><p>下面我们就来详细分析一下，数据修改操作的步骤。</p><ul><li><p>第一步：修改一条数据时，首先判断该条数据是否存在于<code>Buffer Pool</code>之中。</p><ul><li>如果在，直接修改<code>Buffer Pool</code>中的相关数据。</li><li>如果不在，首先在磁盘中读取该条数据到<code>Change Buffer</code>之中，而后在<code>Change Buffer</code>中修改该数据，同时写入<code>Redo Log</code>之中（为了防止数据丢失），等下一次查询该条数据时，合并至<code>Buffer Pool</code>中。</li></ul></li><li><p>第二步：<code>Change Buffer</code>中数据修改之后，什么时候合并数据呢？</p><ul><li>第一种方式：当修改的这条数据被查询的时候，合并到<code>Buffer Pool</code>。</li><li>第二种方式：MySQL 数据库中的<code>Master Thread</code>合并（周期默认：10s）。</li><li>第三种方式：当 MySQL 数据库关闭时，通过<code>Redo Log</code>合并到磁盘中。</li></ul></li></ul><p><code>Change Buffer</code>之所以这样设计，是因为对于高速运转的 MySQL 数据库来讲，如果每一次修改都修改磁盘同时又修改<code>Buffer Pool</code>中的内容的话，对于 MySQL 数据库来讲代价太大了，磁盘的 IO 也会非常高，最终会导致 MySQL 数据库运行缓慢。那么，修改数据时使用<code>Change Buffer</code>就<strong>相当于在内存中修改数据</strong>，并且保存在内存中，当数据库空闲时才会写入磁盘，这样既能够达到修改数据的目的，又能够降低数据库对于系统的性能要求，进而提高数据库的性能。</p><p>上面我们提到，<code>Change Buffer</code>修改完成之后，会修改<code>redo log</code>中的数据，那么接下来我们就来了解一下<code>Log Buffer</code>。</p><h4 id="_4-log-buffer" tabindex="-1">4. Log Buffer ​</h4><p>我们设想一下，如果在<code>Change Buffer</code>修改完数据之后，仅仅保存在内存中，那么如果这个时候数据库宕机，也就意味着我们刚刚修改的数据也随即丢失，而这一点是不能被允许的。</p><p>怎么解决这个问题呢？MySQL 给我们提供了一种写日志的方案，也就是说，修改完的数据会保存到一个叫<code>Redo Log</code>（具体请参考下方的<code>Redo Log</code>部分）的日志中。它是一个物理日志，当数据宕机时，它会将数据直接保存在磁盘之上；当数据库开启时，自动写入到数据库的磁盘中，以至于数据不会丢失。</p><p>上方我们提到了，<code>Redo Log</code>是一个物理日志，如果把大量的数据直接写进磁盘，还是会导致数据库性能低下，我们用一个<code>Log Buffer</code>来保存需要写入<code>Redo log</code>的数据，这样有利于提高数据库的性能。</p><p>这个时候你可能会问：那<code>Change Buffer</code>为什么不直接写入磁盘呢？</p><p>具体情况是这样的，MySQL 数据库在系统磁盘上保存的数据是有序的（典型就是按照主键 ID），如果每一次修改数据直接操作磁盘的话，会导致很多数据的位置发生更改（也就是我们常说的：随机 IO），但是<code>Redo log</code>中保存的数据是无序的，随意不会产生随机 IO，所以使用<code>Redo log</code>暂时保存数据是确保数据不丢失时的最好办法。</p><p>聊完<code>InnoDB</code>存储引擎的内存架构之后，接下来我们再来了解一下<code>InnoDB</code>存储引擎的磁盘架构。</p><h3 id="磁盘架构" tabindex="-1">磁盘架构 ​</h3><p>对于<code>InnoDB</code>存储引擎来说，磁盘架构最重要的就是表空间了。<code>InnoDB</code>存储引擎的表空间主要分为：系统表空间、独立表空间、普通表空间、Undo表空间以及临时表空间。</p><p>下面我们一起来详细聊聊<code>InnoDB</code>存储引擎的磁盘架构中的各个表空间。</p><h4 id="_1-系统表空间" tabindex="-1">1. 系统表空间 ​</h4><p>系统表空间是<code>InnoDB</code>存储引擎中最重要的表空间之一，它的主要作用是存储<code>InnoDB</code>数据字典、双写缓冲、更改缓存以及撤销日志。</p><p>系统表空间一般存放于 MySQL 数据库目录中，名称为：<code>ibdata1</code>。系统表空间一般不一定只有一个，也可能有多个，系统表空间的大小和数量由<code>innodb_data_file_path</code>控制。具体如下：</p><div class="language-sql vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sql</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">mysql</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> SHOW VARIABLES </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">LIKE</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;innodb_data_file_path&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">+</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">-----------------------+------------------------+</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">| Variable_name         | </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">Value</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">                  |</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">+</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">-----------------------+------------------------+</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">| innodb_data_file_path | ibdata1:12M:autoextend |</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">+</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">-----------------------+------------------------+</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> row</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> in</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> set</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">00</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> sec)</span></span></code></pre></div><p>在这里特别需要说明的是，InnoDB 数据字典在 MySQL 8.0 版本以后合并至 MySQL 数据字典中了，不再存储在系统表空间中了。</p><p>这个时候你可能会问，MySQL 数据表中的数据存放于哪里呢？下面我们就来聊一聊这个问题。</p><h4 id="_2-独立表空间" tabindex="-1">2. 独立表空间 ​</h4><p>对于<code>innodb</code>存储引擎来说，我们通常创建数据表的时候，会在 MySQL 数据目录中创建两个文件，分别是<code>.ibd</code>和<code>.frm</code>两个文件。<code>.ibd</code>文件主要用来存储表数据，而<code>.frm</code>文件主要用来存储索引。</p><p>这种做法可以将所有的数据表分开管理，也能够实现快速数据迁移，当数据出现故障之时也可以提高数据恢复的成功率。不过这样的做法又会增加磁盘的碎片，对系统处理表文件的性能有一定的影响。</p><h4 id="_3-普通表空间" tabindex="-1">3. 普通表空间 ​</h4><p>普通表空间的本质其实就是一个共享的表空间。其具体文件在 MySQL 数据库的数据目录中是以<code>.ibd</code>结尾的文件。跟系统表空间类似，它支持所有 MySQL 数据库中的数据表的结构，它是将数据库的一些元数据保存在内存之中，进而能够减少独立表空间对于内存的消耗。</p><h4 id="_4-undo-表空间" tabindex="-1">4. Undo 表空间 ​</h4><p>Undo 表空间主要是用来保存撤销日志（即：<code>Undo Log</code>）的空间。它默认情况下存储在 MySQL 数据库的根目录。我们可以通过以下方式来查看：</p><div class="language-sql vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sql</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">mysql</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> SHOW VARIABLES </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">LIKE</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;innodb_undo_directory&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">+</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">--------------------------+-------+</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">| Variable_name            | </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">Value</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> |</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">+</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">--------------------------+-------+</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">| innodb_undo_directory    | .</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">/</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    |</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">+</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">--------------------------+-------+</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">4</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> rows</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> in</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> set</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">00</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> sec)</span></span></code></pre></div><p>在<code>MySQL 8.0</code>版本之后，undo 表空间会在 MySQL 数据库的数据根目录生成 <code>undo_001</code> 和 <code>undo002</code> 共两个文件。</p><h4 id="_5-临时表空间" tabindex="-1">5. 临时表空间 ​</h4><p>临时表空间主要是用来保存数据库会话中的临时数据的。在 MySQL 数据库的数据根目录中保存以<code>ibtmp1</code>命名的文件。最主要的是我们在使用 join 连表查询的时候，会在临时表空间内创建临时数据表用来辅助查询。我们可以通过以下方式来查看临时表空间的配置：</p><div class="language-sql vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sql</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">mysql</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> SELECT</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> @@innodb_temp_data_file_path;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">+</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">------------------------------+</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">| @@innodb_temp_data_file_path |</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">+</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">------------------------------+</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">| ibtmp1:12M:autoextend        |</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">+</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">------------------------------+</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> row</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> in</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> set</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">00</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> sec)</span></span></code></pre></div><h3 id="总结" tabindex="-1">总结 ​</h3><p><code>InnoDB</code>存储引擎是 MySQL 数据库中最重要的一个存储引擎之一。今天我们一起通过它的内存架构和磁盘架构深入地了解了它的底层架构。</p><p>在内存架构中，自适应哈希索引有利于提高查询速度；<code>Buffer pool</code>主要提供了一个内存池，将经常查询的数据存放于内存中，这样做有利于提高数据库的查询性能和降低系统的磁盘 IO；<code>Change buffer</code>主要是将修改好的数据存放于内存之中，下一次查询的时候合并到<code>Buffer pool</code>之中，这样做的好处是可以降低修改数据时的磁盘 IO，进而提高数据库的性能；<code>Log Buffer</code>是将所有修改的数据存放在其中，之后写入到<code>Redo Log</code>之中，防止数据丢失。</p><p>在磁盘架构中，系统表空间是用来修改和撤销日志的地方，之前的数据库版本中还存放<code>InnoDB</code>数据字典以及双写缓冲；独立表空间主要是用来存储表数据和索引的地方；普通表空间是一个共享的表空间，能够减少独立表空间对于内存的消耗；Undo 表空间主要作用于事务回滚的，在使用未提交之前，用来保存原来的数据，一旦事务回滚则用 Undo 表空间中的内容替换修改过后的数据，进而达到回滚的目的；临时表空间主要是一个过渡的表空间，通常的一些操作需要有这种过渡来辅助操作，例如连表查询。</p><p>从内存架构到磁盘架构，<code>InnoDB</code>存储引擎为我们提供了一个高性能、高安全的数据库存储引擎。通常在实际应用过程中，<code>InnoDB</code>存储引擎是我们的首选存储引擎，但是在使用过程中一定要把<code>Buffer pool</code>的空间设置得足够大，这样有利于提高数据的查询性能。</p>`,61),p=[h];function l(k,t,d,o,E,r){return a(),i("div",null,p)}const f=s(e,[["render",l]]);export{C as __pageData,f as default};
