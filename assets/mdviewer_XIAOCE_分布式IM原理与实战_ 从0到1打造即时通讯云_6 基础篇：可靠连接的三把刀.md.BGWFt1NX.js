import{_ as s}from"./app.BdTF1atn.js";import{j as i,i as a,Z as n}from"./chunks/@vue.D6nrJjhM.js";/* empty css                          */import"./chunks/@vueuse.ErXst1iV.js";const E=JSON.parse('{"title":"","description":"","frontmatter":{},"headers":[],"relativePath":"mdviewer/XIAOCE/分布式IM原理与实战: 从0到1打造即时通讯云/6 基础篇：可靠连接的三把刀.md","filePath":"mdviewer/XIAOCE/分布式IM原理与实战: 从0到1打造即时通讯云/6 基础篇：可靠连接的三把刀.md"}'),t={name:"mdviewer/XIAOCE/分布式IM原理与实战: 从0到1打造即时通讯云/6 基础篇：可靠连接的三把刀.md"},p=n(`<p>与Http短连接相比，使用<strong>长连接</strong>通信无论是从<code>即时性</code>还是<code>效率</code>方面都有很大的优势。但长连接的稳定性受环境、服务端的影响会断开。<strong>如果不能及时检测到并重新与服务端建立连接，可想而知服务端消息就无法及时推送过来</strong>。所以本章我们来了解下影响连接稳定性的因素，以及如何解决这个问题。</p><p><img src="https://p6-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/ad0992c9b46c40e48db614416c87ad1d~tplv-k3u1fbpfcp-jj-mark:3024:0:0:0:q75.awebp" alt="chapter6.png"></p><h3 id="影响因素" tabindex="-1">影响因素 ​</h3><p>在谈解决办法之前，首先要搞明白影响长连接稳定的因素，归纳下来有如下几点：</p><ol><li><strong>NAT网关</strong></li></ol><p>NAT网关<code>地址转换表</code>中的记录有一个<code>老化时间</code>(aging-time)属性，如果连接空闲超过这个时间，<code>转换记录</code>就会被删除，导致<code>服务端</code>发送给<code>客户端</code>的消息在NAT网关中被丢弃。这个NAT的原理我们在通信协议篇有过讲解，这里不再过多说明。</p><ol start="2"><li><strong>防火墙</strong></li></ol><p>在建立连接（SYN包）时，防火墙会记录一条tcp会话数据，这个会话的也是有一个老化时间，超时后防火墙将从会话表中删除此tcp会话信息，此时发送的正常TCP数据包（非SYN）就会被丢弃。</p><ol start="3"><li><strong>DHCP</strong></li></ol><p>DHCP（动态主机配置协议）是一个局域网的网络协议。指的是由服务器控制一段IP地址范围，客户机登录服务器时就可以自动获得服务器分配的IP地址和子网掩码。如果租约到期，而不自动续租导致IP变更，连接也就中断。不过这种情况很少见。</p><ol start="4"><li><strong>网络异常</strong></li></ol><ul><li>进入网络不稳定环境。由于移动网络数据是通过无线电传输，频率越高，波长越短，穿透力越弱。比如突然进入地下通道或有无线电屏蔽的地方，就会导致丢包很严重。</li><li>进入网络拥堵的环境。由于NAT网关的处理能力和缓冲区是有上限的，假如在人流量大而集中地方，大量观看视频之类导致接入网关缓冲区不足时，网关就会把收到的数据包丢弃。</li><li>网络切换等人为原因，比如WIFI切4G等。</li></ul><ol start="5"><li><strong>进程Crash</strong></li></ol><ul><li>如果服务端主机宕机，TCP连接肯定就中断了。</li><li>进程用户被杀死，操作系统会关闭连接。</li></ul><blockquote><p>思考：在移动网络下，由于人的位置在变动，因此当你从接入的站点A改为接入站点B时，两个站点NAT网关的WAN口IP肯定不一样，那么长接连会断开吗？</p></blockquote><p><strong>解决方法：</strong></p><p>知道了影响连接的因素，就可以针对性采取措施，其中<code>心跳</code>、<code>自动重连</code>就是针性的解决办法。但是在实际的生产环境中，<code>还有一个重要因素需要考虑，就是网关的选择</code>，比如选择就近的网关稳定性肯定就要更好；又比如在网关满负载或者宕机情况下，如果客户端不切换网关，<strong>自动重连</strong>只会使情况更糟。因此还有一个重要的逻辑<code>智能路由</code>。</p><h3 id="一、心跳" tabindex="-1">一、心跳 ​</h3><p>心跳指不间断的发送一个较小的数据包，保持长连接活跃，这样就可以解决老化时间一类的问题，只要心跳的间隔时间小于设备要求的老化时间，理论上连接就一直存活。</p><p>心跳有两个作用：<code>保活</code>与<code>死连检测</code>，保活的原理在上面已经说明了。这里再说说死连检测是怎么回事，不过在谈它之前，我们需要搞明白两个问题：</p><blockquote><ol><li>连接是什么？</li></ol></blockquote><p>如果你仔细看了本小册通信协议两章内容，应该就知道连接是什么了！它不是一条看的见的<code>电线</code>，而是<code>主机到主机之间相关设备的记录</code>，比如操作系统记录的Socket和TCP缓冲区，也比如NAT网关中的<strong>地址转换记录</strong>。</p><blockquote><ol start="2"><li>主机是否知道连接是存活的？</li></ol></blockquote><p>主机在不发送••的情况下是无法感知到连接是否断开的，。由于TCP协议是可靠传输协议，它其中一个<strong>重要特性</strong>就是ACK机制。因此，解决“发现”这个问题有两个办法：</p><ol><li>只需要发送一个探测包，设置一个写超时，如果底层socket没有收到ACK数据包，<code>上层应用</code>就可以<code>感知</code>到连接是否存活。</li><li>客户端与服务端之间协定一个超时时间，在这个时间段之内必须收到对方的数据包，否则认为连接断开。</li></ol><h4 id="心跳间隔" tabindex="-1">心跳间隔 ​</h4><p><strong>那么</strong>，我们如何设置一个<code>合理的心跳间隔</code>时间呢？</p><p>参考的因素主要有两点：</p><ol><li><code>系统开销</code></li><li><code>感知延迟</code></li></ol><p>从<code>保活</code>的角度，应该尽量使用<code>较大</code>的心跳间隔时间，达到减少系统开销，也就达到减少手机上APP耗电的目的；但是从<code>检测</code>的角度则偏向使用<code>较小</code>的间隔时间，因为间隔越短，连接异常感知延迟就越低，可以马上作出反应。</p><p>其中防火墙的老化时间通常都较大，如果服务端有防火墙并且设置的老化时间较小可以内部修改解决。因此主要考虑的就是<strong>NAT网关的老化时间的问题</strong>，因为它是<code>不可控的</code>，如下是从网上找的运营商TCP地址转换记录的存活时间表：</p><table tabindex="0"><thead><tr><th>地区/网络</th><th>NAT Aging-time</th></tr></thead><tbody><tr><td>中国移动4G</td><td>1分钟</td></tr><tr><td>中国移动3G、2G</td><td>5分钟</td></tr><tr><td>中国联通2G、3G、4G</td><td>5分钟</td></tr><tr><td>中国电信4G</td><td>5分钟</td></tr><tr><td>中国电信2G、3G</td><td>大于28分钟</td></tr><tr><td>台湾和香港各大运营商 4G、3G</td><td>大于28分钟</td></tr><tr><td>美国各大运营商 4G、3G</td><td>大于28分钟</td></tr></tbody></table><h4 id="tcp-keepalive" tabindex="-1">tcp_keepalive ​</h4><p>大多数操作系统都实现了TCP Keepalive机制，只要设置开启就可以了，我们通过这个Keepalive机制来了解下内部逻辑。我们以golang代码为例，在TCPConn中有对应方法：</p><div class="language-go vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">go</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// SetKeepAlive sets whether the operating system should send</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// keep-alive messages on the connection.</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">func</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">c </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">*</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">TCPConn</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">SetKeepAlive</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">keepalive</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> bool</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">error</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">	if</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> !</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">c.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">ok</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">		return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> syscall.EINVAL</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">	}</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">	if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> err </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> setKeepAlive</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(c.fd, keepalive); err </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">!=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> nil</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">		return</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> &amp;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">OpError</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{Op: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;set&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, Net: c.fd.net, Source: c.fd.laddr, Addr: c.fd.raddr, Err: err}</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">	}</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">	return</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> nil</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>从代码层就可以看出来，在应用层只能决定是否启用它，实际上<strong>具体的参数则只能在操作系统层统一设置</strong>。如下是我在主机上得到的tcp_keepalive三个关键参数：</p><div class="language-sh vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># cat /proc/sys/net/ipv4/tcp_keepalive_time</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">7200</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># cat /proc/sys/net/ipv4/tcp_keepalive_intvl</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">75</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># cat /proc/sys/net/ipv4/tcp_keepalive_probes</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">9</span></span></code></pre></div><p>这个值是可以修改的，它们的单位都是秒。参数的意思是：</p><ul><li>在连接闲置 tcp_keepalive_time（2小时）后，发送探测包，如果收到回应ACK，便认为连接正常；否则间隔 tcp_keepalive_intvl（75秒） 后，持续发送探测包，一直到发送了 tcp_keepalive_probes（9）个探测包后，还未得到ACK回馈，便认为连接已经中断了。</li></ul><blockquote><p>可以看出来，默认的参数设置基本上没有意义，而且修改也不灵活，因此我们通常不直接使用tcp_keepalive，而且是使用业务层自定义心跳。</p></blockquote><h4 id="业务心跳" tabindex="-1">业务心跳 ​</h4><p><code>业务心跳</code>指上层应用程序通过定时发送数据包，来达到<code>保活</code>和<code>死连检测</code>的目的。由于是业务层心跳，接收<code>应用进程</code>在收到心跳包需要返回一个ACK，如果进程假死就会导致无法处理返回，发送端就可以检测到，因此业务心跳可以检测两个层次的异常：</p><ol><li><code>连接是否正常。</code></li><li><code>对方进程是否正常。</code></li></ol><p>实际上理解了上一章节中心跳的原理，那么实现方式就很简单了，也比较灵活，比如websocket协议头中就有ping/pong两种数据包类型，其中一方发送一条ping消息，另一方收到ping消息之间返回一条pong消息。</p><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/3e41737373f0415399bd9124a741be46~tplv-k3u1fbpfcp-jj-mark:3024:0:0:0:q75.awebp" alt="pingpong.png"></p><p>上面演示了一个ping/pong心跳的逻辑，客户端<code>通过定时器或者读超时</code>来判断连接状态，比如在3轮ping包（间隔1分钟）之后还没有收到pong包就认为TCP连接或者对方进程crash了，尝试重连逻辑。</p><p><strong>如下是Websocket协议中opcode的定义：</strong></p><div class="language-sh vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">      0</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">                   1</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">                   2</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">                   3</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">      0</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 1</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 2</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 3</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 4</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 5</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 6</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 7</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 8</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 9</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 0</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 1</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 2</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 3</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 4</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 5</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 6</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 7</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 8</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 9</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 0</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 1</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 2</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 3</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 4</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 5</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 6</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 7</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 8</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 9</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 0</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 1</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">     +-+-+-+-+-------+-+-------------+-------------------------------+</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">     |</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">F</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">|</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">R</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">|</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">R</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">|</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">R</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">|</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> opcode</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">|</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">M</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">|</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Payload</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> len</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> |</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    Extended</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> payload</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> length</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    |</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">     |</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">I</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">|</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">S</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">|</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">S</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">|</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">S</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">|</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  (</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">4</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)  </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">|</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">A</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">|</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">     (</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">7</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)     </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">|</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">             (</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">16/64</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)           </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">|</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">     +--------ˆˆˆˆˆˆˆ------------------------------------------------+</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  </span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  Opcode:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  4</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> bits</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">      Defines</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> the</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> interpretation</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> of</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> the</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;Payload data&quot;.</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">  If</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> an</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> unknown</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">      opcode</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> is</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> received,</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> the</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> receiving</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> endpoint</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> MUST</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> _Fail</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> the</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">      WebSocket</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> Connection_.</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">  The</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> following</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> values</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> are</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> defined.</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">      *</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">  %x0</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> denotes</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> a</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> continuation</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> frame</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">      *</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">  %x1</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> denotes</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> a</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> text</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> frame</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> &lt;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">---文本</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">      *</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">  %x2</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> denotes</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> a</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> binary</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> frame</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  &lt;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">---二进制</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">      *</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">  %x8</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> denotes</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> a</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> connection</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> close</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">      *</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">  %x9</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> denotes</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> a</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> ping</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> &lt;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">---ping包</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">      *</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">  %xA</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> denotes</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> a</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> pong</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> &lt;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">---pong包</span></span></code></pre></div><p>这里还要涉及到一个ping包是谁发送的问题，<strong>通常只有ping的一方才能感知到对方进程是否正常</strong>，而不停的发送ping包需要启用一个线程或定时器，无疑是增加了系统开销的。但是如果感知不到异常断开，对服务端来说，会导致tcp连接不释放，间接导致<strong>缓冲区与相关对象</strong>不被回收，最后的结果就是<code>内存溢出</code>；对客户端来说，就会导致<code>重连延迟</code>变成假死状态，消息就收不到。因此，一种简单的办法就，使用双向心跳，即两方各自发送自己的ping包，收到ping的任何一方都要回复一条pong消息。而本章则会采用另一种方法来解决问题的同时，降低服务端开销。</p><h4 id="二、自动重连" tabindex="-1">二、自动重连 ​</h4><p>心跳可以解决NAT网关等问题，但是无法解决网络异常连接真实断开的场景，所以如果客户端发现TCP连接<code>异常断开</code>，就需要尝试重连，如果在设定的<code>次数</code>或者<code>时间</code>内未连接成功就<strong>终止</strong>并通知用户，让用户决定何时<code>手动重连</code>。</p><p>在这里我重点标出了两个名词：<code>异常断开</code>、<code>次数或时间</code>。我们一个一个来介绍。</p><p><code>异常断开</code>：之所以要说明它，是因为在实际编码的过程中客户端需要知道<strong>什么情况下连接断开需要重连，什么情况下不能重连</strong>。比如同账号互踢的情况下，服务端就不能直接断开<strong>被踢方的连接</strong>，而是先发送一条消息给被踢方，告诉对方被踢下线了，<code>否则客户端无法判断断开的情况下就会再次重连，导致相同账号的两端不停互踢</code>。</p><p><code>次数或时间</code>：设置一个重试次数或时间范围是为了在长时间网络故障时减少客户端不必要的重试开销，也是通知用户网络可能出现问题。</p><h4 id="三、智能路由" tabindex="-1">三、智能路由 ​</h4><p>基本上，采用了以上两步可以解决大部分问题。但是如果连接的服务（<strong>接入网关</strong>）故障，重连也是没有任何作用的，此时就需重连到一台正常的网关。那么客户端如何重连到一台<strong>正常网关</strong>呢，在这里我们介绍两种方案及它们的优势与劣势！</p><p>一、SLB（Server Load Balancer）</p><p>其中<strong>最简单</strong>的一个方案就是使用SLB作为网关服务的负载层，如果我们的网关是Websocket协议，可以使用Nginx等<code>应用型负载均衡ALB</code>（Application Load Balancer）作为七层负载。如果是TCP协议，则可以使用<code>传统型负载均衡CLB</code>（Classic Load Balancer）作为四层负载。如图所示：</p><p><img src="https://p6-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/1a50559d274a4dd78cce95ccf984d029~tplv-k3u1fbpfcp-jj-mark:3024:0:0:0:q75.awebp" alt="SLB.png"></p><blockquote><p>如果没有健康检查及自动下线功能，只能通过多次重试落到正常的网关上了。</p></blockquote><p><strong>接下来我们谈谈它的缺点：</strong></p><p>其一负载均衡对http等短连接服务非常均衡，但是使用在长连接服务上就<code>不均衡</code>了。无论是使用那种负载算法：随机、轮询、加权轮询、哈希等，作为长连接服务的负载层时都会导致不均衡。</p><blockquote><p>我们轮询为例，有两台网关，分别维护了500个连接，一段时间后其中一个网关断开了100个连接，另一个网关断开了400个，此时两个网关中的连接数就是400和100，产生了不平衡；<code>由于断开连接的不确定性，服务永远处于不平衡状态</code>。结果就是一些机器负载过高，一些机器较空闲，不利于资源的利用。</p></blockquote><p>其二通常SLB层只作用于一个服务机房，这对距离很远的用户来说，延迟较高，稳定性就会差，如果是跨了国家，可能都连接不上。</p><p>二、CLB(Client Load Balancer)</p><p>客户端路由及负载均衡是把节点选择的逻辑放到了客户端，通过配置或者接口返回得到一批网关地址，由客户端选择一个正常的网关建立连接。比如我们设计一个最简单的逻辑，如下：</p><p><img src="https://p1-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/2d175fa4b32b449eae9e76b1f19020ee~tplv-k3u1fbpfcp-jj-mark:3024:0:0:0:q75.awebp" alt="client_loadbalance.png"></p><p>图中四个网关都有对外独立的域名或公网ip，在启动时把自己的服务信息注册到<code>注册中心</code>，并通过心跳或者健康检查机制保证节点下线时，注册中心可以感知到，这样可以减少<code>路由服务</code>读取到下线网关的机率，也就减少了客户端的重试次数。如果网关定时同步自己的<code>负载数据</code>到注册中心，<strong>路由服务</strong>就可以优先选择<strong>负载低</strong>的网关。</p><blockquote><p>当然，一个设计合理的智能路由，肯定不是这么简单，<code>在这里就不展开了，具体的内容会在后面一个章节详细说明</code>。</p></blockquote><h3 id="最后总结" tabindex="-1">最后总结 ​</h3><p>本章核心知识点：</p><ol><li>影响长连接稳定的<strong>五个因素</strong>。</li><li>心跳的原理及实现逻辑。</li><li>自动重连及什么情况下要自动重连。</li><li>SLB（Server Load Balancer）。</li><li>CLB(Client Load Balancer)。</li></ol><p><strong>理解了核心原理，那么下一章节，我们就动手来实现心跳与自动重连功能。</strong></p><p><strong>本章完！</strong></p>`,74),h=[p];function l(k,e,d,r,F,o){return a(),i("div",null,h)}const B=s(t,[["render",l]]);export{E as __pageData,B as default};
