import{_ as e}from"./app.BdTF1atn.js";import{j as s,i,Z as t}from"./chunks/@vue.D6nrJjhM.js";/* empty css                          */import"./chunks/@vueuse.ErXst1iV.js";const v=JSON.parse('{"title":"","description":"","frontmatter":{},"headers":[],"relativePath":"mdviewer/XIAOCE/从 0 到 1 实现一套 CI & CD 流程/11 Kubernetes DNS 策略：将你的服务连接起来.md","filePath":"mdviewer/XIAOCE/从 0 到 1 实现一套 CI & CD 流程/11 Kubernetes DNS 策略：将你的服务连接起来.md"}'),p={name:"mdviewer/XIAOCE/从 0 到 1 实现一套 CI & CD 流程/11 Kubernetes DNS 策略：将你的服务连接起来.md"},a=t('<h3 id="前言" tabindex="-1">前言 ​</h3><p>前几章，我们已经实现了对一个单体应用的部署。可是，我们的项目中还经常遇到以下几种情况：</p><blockquote><p>我要用Nginx做负载均衡，如何才能转发到别的服务上面？ 我的后端需要MySQL数据库，我怎样才能连接到同级服务的数据库呢？ ......</p></blockquote><p>这些场景都有个共性问题： <code>A服务</code> 依赖另一个 <code>B服务</code> ，而我们常常不知道 <code>B服务</code> 的端口和IP，且端口和IP也相对不固定有可能经常更改。</p><p>这时候，我们就需要一个神器 —— <strong>服务发现</strong></p><h3 id="什么是服务发现" tabindex="-1">什么是服务发现 ​</h3><p>我们先看下百度百科的解释：</p><blockquote><p>服务发现是指使用一个注册中心来记录分布式系统中的全部服务的信息，以便其他服务能够快速的找到这些已注册的服务。</p></blockquote><p>是不是有点懵？我们思考一下：当我们通过域名访问一个网站时，浏览器不会直接访问域名。而是先将域名发送至 <code>DNS</code> 服务器，获取到域名对应的IP后，再通过IP去访问真实服务器（如下图）。</p><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/73a0215f8b1749a7b5f71a71f121fa3c~tplv-k3u1fbpfcp-jj-mark:3024:0:0:0:q75.awebp" alt="image.png"></p><p><strong>其实我们日常上网，DNS服务器 将域名映射为真实IP的过程，就是一个服务发现的过程</strong>。而我们再也不需要记住每个网站的IP，只需要记住永远不会更改的<strong>域名</strong>即可。</p><p>那么在 <code>Kubernetes</code> 中，如何做服务发现呢？我们前面写到过， <code>Pod</code> 的 <code>IP</code> 常常是漂移且不固定的，所以我们要使用 <code>Service</code> 这个神器来将它的访问入口固定住。</p><p>但是，我们在部署 <code>Service</code> 时，也不知道部署后的ip和端口如何。那么在 <code>Kubernetes</code> 中，我们可以利用 DNS 的机制给每个 <code>Service</code> 加一个内部的<strong>域名</strong>，指向其真实的IP。</p><h3 id="kubernetes-coredns" tabindex="-1">Kubernetes CoreDNS ​</h3><p>在<code>Kubernetes</code>中，对 <code>Service</code> 的服务发现，是通过一种叫做 <code>CoreDNS</code> 的组件去实现的。</p><p><code>CoreDNS</code> 是使用 <code>Go</code> 语言实现的一个DNS服务器。当然，它也不只是可以用在 <code>Kubernetes</code> 上。也可以用作日常 <code>DNS</code> 服务器使用。在 <code>Kubernetes 1.11</code>版本后，<code>CoreDNS</code> 已经被默认安装进了 <code>Kubernetes</code> 内。</p><p>我们也通过下面的命令验证下 <code>CoreDNS</code> 是否已经安装成功：</p><div class="language-sh vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">kubectl</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -n</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> kube-system</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> get</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> all</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  -l</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> k8s-app=kube-dns</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -o</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> wide</span></span></code></pre></div><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/d12d01a50c7c4edda89b8f0f9f2bd677~tplv-k3u1fbpfcp-jj-mark:3024:0:0:0:q75.awebp" alt="image.png"></p><h3 id="服务发现规则" tabindex="-1">服务发现规则 ​</h3><p>在了解了 <code>CoreDNS</code> 的背景后，我们开始来验证下服务发现的规则。</p><p>首先，我们先进入一个 <code>Pod</code> 进行测试。我们先使用 <code>kubectl get pods</code> 命令来看下当前运行了哪些 <code>Pod</code>：</p><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/b6ae6300c4ed4e8593364d53e5cbd2ee~tplv-k3u1fbpfcp-jj-mark:3024:0:0:0:q75.awebp" alt="image.png"></p><p>接着使用 <code>kubectl get svc</code> 看下运行了哪些 <code>Service</code> ：</p><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/06713e01d43140b99a6407a90e4d2110~tplv-k3u1fbpfcp-jj-mark:3024:0:0:0:q75.awebp" alt="image.png"></p><p>可以看到，我们自己创建的 <code>Service</code> 有2个：<code>front-service-v1</code> 和 <code>front-service-v2</code> 。稍后我们就使用这两个 <code>Service</code> 来测试。</p><p>这里我们选择其中一个 <code>Pod</code> 进入看下。在这里，我们可以使用 <code>kubectl exec</code> 命令进入 <code>Pod</code> 内的容器。</p><div class="language-sh vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">kubectl</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> exec</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -it</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> front-v1-787bf5c86d-t78x5</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> /bin/sh</span></span></code></pre></div><blockquote><p>kubectl exec 的作用是可以直接在容器内执行Shell脚本。 命令格式：kubectl exec -it [PodName] -- [Command] -i：即使没有连接，也要保持标准输入保持打开状态。一般与 -t 连用。 -t：分配一个伪TTY（终端设备终端窗口），一般与 -i 连用。可以分配给我们一个Shell终端</p></blockquote><p>执行后，我们就进入了容器内部环境。此时，我们可以验证下服务规则。</p><p>在 <code>Kubernetes DNS</code> 里，服务发现规则有2种：跨 <code>namespace</code> 和同 <code>namespace</code> 的规则。</p><blockquote><p>kubernetes namespace（命名空间）是 kubernetes 里比较重要的一个概念。 在启动集群后，kubernetes 会分配一个默认命名空间，叫default。不同的命名空间可以实现资源隔离，服务隔离，甚至权限隔离。</p></blockquote><p>因为我们在之前创建的服务，<strong>都没有指定 <code>namespace</code>，所以我们的服务都是在同一个 <code>namespace</code> 下（默认<code>space</code>下），适用于同 <code>namespace</code> 规则</strong>。</p><p>在同 <code>namespace</code> 下的规则，我们只需要直接访问 <code>http://ServiceName:Port</code> 就可以访问到相应的 <code>Service</code>。这里使用 <code>wget -q -O-</code> 即可将访问内容输出到控制台上：</p><div class="language-sh vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">wget</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -q</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -O-</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> http://front-service-v1</span></span></code></pre></div><blockquote><p>wget 是 Linux 平台中的一个下载文件的工具</p></blockquote><p>如果你没有 <code>wget</code> 命令，使用 <code>curl</code> 命令替代它也可以：</p><div class="language-sh vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">curl</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> http://front-service-v1</span></span></code></pre></div><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/bb041153a7a941b9b72fa6d39725bd04~tplv-k3u1fbpfcp-jj-mark:3024:0:0:0:q75.awebp" alt="image.png"></p><p>这里我们可以看到，是可以访问到同级服务的。当然我们上面也写到，还有一种是<strong>跨<code>namespace</code>的发现规则</strong>。不过即使是同 <code>namespace</code> ，也可以使用<strong>跨<code>namespace</code>的发现规则</strong>。</p><p>在 <code>Kubernetes DNS</code> 中，跨 <code>namespace</code> 的规则略为复杂。格式如下：</p><div class="language-yaml vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">yaml</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">[</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">ServiceName</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">]</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">.[NameSpace].svc.cluster.local</span></span></code></pre></div><p>这里的 <code>ServiceName</code> 就是我们创建的 <code>Service</code> 名称；<code>NameSpace</code> 则是命名空间。如果你没有命名空间，则这个值为 <code>default</code>。</p><p>我们按照这个规则，再来尝试访问下：</p><div class="language-sh vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">curl</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> http://front-service-v1.default.svc.cluster.local</span></span></code></pre></div><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/159f730772a140109afab82e091c1822~tplv-k3u1fbpfcp-jj-mark:3024:0:0:0:q75.awebp" alt="image.png"></p><p>经过验证，可以访问到。</p><h3 id="结束语" tabindex="-1">结束语 ​</h3><p>在本章，我们通过学习 Kubernetes DNS 的规则，了解到了如何访问到同级服务。如何访问到跨命名空间的服务。在下一章，我们将学习如何更好地利用 ConfigMap 抽离环境变量，更好地解耦配置。</p><p>如果你有疑问的话，欢迎在评论区指出 👏</p>',50),c=[a];function o(d,n,l,h,r,k){return i(),s("div",null,c)}const C=e(p,[["render",o]]);export{v as __pageData,C as default};
