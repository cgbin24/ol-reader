import{_ as s}from"./app.BdTF1atn.js";import{j as i,i as a,Z as e}from"./chunks/@vue.D6nrJjhM.js";/* empty css                          */import"./chunks/@vueuse.ErXst1iV.js";const m=JSON.parse('{"title":"","description":"","frontmatter":{},"headers":[],"relativePath":"mdviewer/XIAOCE/从 0 到 1 实现一套 CI & CD 流程/12 Kubernetes ConfigMap：统一管理服务环境变量.md","filePath":"mdviewer/XIAOCE/从 0 到 1 实现一套 CI & CD 流程/12 Kubernetes ConfigMap：统一管理服务环境变量.md"}'),p={name:"mdviewer/XIAOCE/从 0 到 1 实现一套 CI & CD 流程/12 Kubernetes ConfigMap：统一管理服务环境变量.md"},n=e(`<h3 id="前言" tabindex="-1">前言 ​</h3><p>在第10章中，我们学习了如何上手 <code>Kubernetes Secret</code>。我们都知道，<code>Kubernetes Secret</code> 的主要作用是来存放密码，密钥等机密信息。</p><p>但是在日常开发部署时，我们还会遇到一些环境变量的配置：例如你的数据库地址，负载均衡要转发的服务地址等等信息。这部分内容使用 <code>Secret</code> 显然不合适，打包在镜像内耦合又太严重。这里，我们可以借助 <code>Kubernetes ConfigMap</code> 来配置这项事情</p><h3 id="什么是-configmap" tabindex="-1">什么是 ConfigMap ​</h3><p><code>ConfigMap</code> 是 <code>Kubernetes</code> 的一种资源类型，我们可以使用它存放一些环境变量和配置文件。信息存入后，我们可以使用挂载卷的方式挂载进我们的 <code>Pod</code> 内，也可以通过环境变量注入。和 <code>Secret</code> 类型最大的不同是，存在 <code>ConfigMap</code> 内的内容不会加密。</p><h3 id="创建方式" tabindex="-1">创建方式 ​</h3><p>和 <code>Secret</code> 一样， <code>ConfigMap</code> 也支持多种创建方式</p><h4 id="命令行直接创建" tabindex="-1">命令行直接创建 ​</h4><p>第一种是使用命令行直接创建。我们直接使用 <code>kubectl create configmap [config_name]</code> 命令创建即可。格式如下：</p><div class="language-sh vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">kubectl</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> create</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> configmap</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> [config_name] --from-literal</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">[key</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">]=[value]</span></span></code></pre></div><p>在这里， <code>--from-literal</code> 对应一条信息。如果想创建多个 <code>key value</code> 组合，向后重复 <code>--from-literal=[key]=[value]</code> 即可。</p><p>例如我创建一个 <code>mysql</code> 的配置文件，其中包含了服务地址，端口。则可以下面这种格式创建：</p><div class="language-sh vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">kubectl</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> create</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> configmap</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> mysql-config</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> \\</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">--from-literal=MYSQL_HOST=192.168.1.172 </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">\\</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">--from-literal=MYSQL_PORT=3306</span></span></code></pre></div><blockquote><p>这里需要注意，<code>configmap</code> 的名称必须是全小写，特殊符号只能包含 &#39;-&#39; 和 &#39;.&#39;。可以用下面的这个正则表达式校验下看看符不符合规则：</p></blockquote><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">a</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">z0</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">9</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">?</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(.a</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">z0</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">9</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">?</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">*</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;</span><span style="--shiki-light:#B31D28;--shiki-dark:#FDAEB7;--shiki-light-font-style:italic;--shiki-dark-font-style:italic;">)</span></span></code></pre></div><p>创建成功后，我们可以使用 <code>kubectl get cm</code> 查看我们创建过的 <code>configmap</code>：</p><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/302314d80baa4d3dabff6e7a0e525460~tplv-k3u1fbpfcp-jj-mark:3024:0:0:0:q75.awebp" alt="image.png" loading="lazy"></p><p>可以看到，上面的就是我们刚创建的 <code>ConfigMap</code>。里面的 <code>DATA</code> 为 <code>2</code> ，代表有 <code>2</code> 条数据存在。我们直接使用 <code>kubectl describe cm mysql-config</code> 即可查看下这个 <code>ConfigMap</code> 的具体信息：</p><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/695b43d9bdd74108a27be87d2bd848b9~tplv-k3u1fbpfcp-jj-mark:3024:0:0:0:q75.awebp" alt="image.png" loading="lazy"></p><p>这里可以看到刚才我们存放的数据，代表该 <code>configmap</code> 创建成功。</p><h4 id="配置清单创建" tabindex="-1">配置清单创建 ​</h4><p>当然，通过一个命令清单创建的方式也很简单。</p><p>我们新建一个文件，名称为 <code>mysql-config-file.yaml</code> ，填入以下内容：</p><div class="language-yaml vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">yaml</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">apiVersion</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">v1</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">kind</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">ConfigMap</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">metadata</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">  name</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">mysql-config-file</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">data</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">  MYSQL_HOST</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;192.168.1.172&#39;</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">  MYSQL_PORT</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">3306</span></span></code></pre></div><blockquote><p>字符串不要忘记加引号</p></blockquote><p>在这里，相信大部分字段大家已经都非常熟练了。<code>kind</code> 的值为 <code>ConfigMap</code> ，代表声明一个 <code>ConfigMap</code> 类型的资源； <code>metadata.name</code> 代表是该 <code>configmap</code> 的名称；<code>data</code> 是存放数据的地方，数据格式为 <code>key:value</code>。</p><p>按照惯例，我们保存后使用 <code>kubectl apply</code> 命令即可使配置生效：</p><div class="language-sh vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">kubectl</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> apply</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -f</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> ./mysql-config-file.yaml</span></span></code></pre></div><p>生效后，我们直接使用 <code>kubectl describe cm mysql-config-file</code> 查看下配置结果</p><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/67c109552ffe4b589a7c964915dfaa21~tplv-k3u1fbpfcp-jj-mark:3024:0:0:0:q75.awebp" alt="image.png" loading="lazy"></p><p>可以看到，要保存创建的内容成功存入。</p><h4 id="文件创建" tabindex="-1">文件创建 ​</h4><p>第二种方式是将文件加载进去，这种适合挂载配置文件（例如nginx配置文件等等）。这种方式，我们直接使用 <code>kubectl create configmap</code> 命令行创建即可。格式如下：</p><div class="language-sh vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">kubectl</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> create</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> configmap</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> [configname] --from-file</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">[key</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">]=[file_path]</span></span></code></pre></div><p>这里每一条 <code>--from-file</code> 都代表一个文件。<code>key</code>是文件在 <code>configmap</code> 内的 <code>key</code>， <code>file_path</code> 是文件的路径。</p><p>我们创建一个文件，然后将文件内容存入 <code>configmap</code> 中。创建一个名为 <code>env.config</code> 的文件，输入以下内容：</p><div class="language-yaml vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">yaml</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">URL</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">172.168.81.111</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">PATH</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">/root/abcd/efg</span></span></code></pre></div><p>保存后，我们使用 <code>kubectl create configmap</code> 命令将其保存至 <code>configmap</code> 内：</p><div class="language-sh vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">kubectl</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> create</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> configmap</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> env-from-file</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --from-file=env=./env.config</span></span></code></pre></div><p>接着，我们直接使用 <code>kubectl get cm env-from-file -o yaml</code> 来查看下保存进入的内容</p><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/07cdcf8dd4a74400b2236557dffd093d~tplv-k3u1fbpfcp-jj-mark:3024:0:0:0:q75.awebp" alt="image.png" loading="lazy"></p><p>这里我们看到， <code>configmap</code> 直接将我们整个文件内容都保存了进去。 <code>env</code> 则是这个文件的 <code>key</code> 值。</p><h4 id="目录创建" tabindex="-1">目录创建 ​</h4><p>当然，可以将单个文件存入，也可以直接将一个目录下的文件整个存入进去。</p><p>目录创建这里和文件创建的命令差不多，其差别只是将 <code>--from-file</code> 的值从一个 <code>key=value</code>，变成了输入一整个文件夹。</p><div class="language-sh vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">kubectl</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> create</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> configmap</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> [configname] --from-file</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">[dir_path</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">]</span></span></code></pre></div><p>我们创建一个文件夹，下面存放几个文件来测试下。这里我们创建了三个文件，分别是 <code>env1.config</code>，<code>env2.config</code>，<code>env3.config</code> 。内容也和其文件名对应。</p><div class="language-sh vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">mkdir</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> env</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> &amp;&amp; </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">cd</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> ./env</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">echo</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;env1&#39;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> &gt;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> env1.config</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">echo</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;env2&#39;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> &gt;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> env2.config</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">echo</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;env3&#39;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> &gt;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> env3.config</span></span></code></pre></div><p>这样我们使用创建命令，将内容批量存入到 <code>configmap</code> 内：</p><div class="language-sh vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">kubectl</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> create</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> configmap</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> env-from-dir</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --from-file=./</span></span></code></pre></div><p>创建完成后，我们使用 <code>kubectl get cm env-from-dir -o yaml</code> 查看下保存进去的文件内容：</p><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/4babab7086e44746911d540950ad9b14~tplv-k3u1fbpfcp-jj-mark:3024:0:0:0:q75.awebp" alt="image.png" loading="lazy"></p><p>我们看到，文件夹下的文件内容被批量存放了进去。</p><h3 id="使用方式" tabindex="-1">使用方式 ​</h3><p>在了解了其创建方式后，我们来看看如何使用 <code>ConfigMap</code></p><h4 id="环境变量注入" tabindex="-1">环境变量注入 ​</h4><p>注入到环境变量是一种比较常见的方式。在这里，我们编辑下 <code>front-v1</code> 的 <code>deployment</code> 配置文件，来将 <code>configmap</code> 注入进环境变量内：</p><div class="language-yaml vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">yaml</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">env</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">- </span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">name</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">MYSQL_HOST</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">  valueFrom</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">    configMapKeyRef</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">      name</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">mysql-config</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">      key</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">MYSQL_HOST</span></span></code></pre></div><p><code>configmap</code> 的环境变量注入，其实和 <code>Secret</code> 的环境变量注入方式差别不大，只是字段换成了 <code>configMapKeyRef</code> 。<code>name</code> 为要选择注入的 <code>configmap</code> 名称；<code>key</code> 则为 <code>configmap</code> 内的其中一个 <code>key</code>。</p><p>编辑完后，保存并退出。使用 <code>kubectl apply -f</code> 命令生效下配置文件，此时旧 <code>Pod</code> 会被杀死重启创建。</p><div class="language-sh vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">kubectl</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> apply</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -f</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> ./v1.yaml</span></span></code></pre></div><p>生效后，在最新的 <code>Pod</code> 内使用 <code>kubectl exec</code> 命令来看看环境变量注入结果：</p><div class="language-sh vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">kubectl</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> exec</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -it</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> [POD_NAME] -- env </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">|</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> grep</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> MYSQL_HOST</span></span></code></pre></div><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/9e5a829bfdf649ddb2a1bb3c90ecc8d7~tplv-k3u1fbpfcp-jj-mark:3024:0:0:0:q75.awebp" alt="image.png" loading="lazy"></p><p>此时可以看到，我们的环境变量成功的注入了进去。</p><p>可是，如果一条一条地注入环境配置，是不是太麻烦了。怎样才能一次性将整个 <code>ConfigMap</code> 都注入进去呢？</p><p>在这里，我们可以借助 <code>containers.envFrom</code> 字段去一次性批量导入我们的 <code>configmap</code> ：</p><div class="language-yaml vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">yaml</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">envFrom</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">- </span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">configMapRef</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">   name</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">mysql-config</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">   optional</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">true</span></span></code></pre></div><blockquote><p>如果你的configmap中的key含有 &quot;-&quot;，会自动转换为 &quot;_&quot;</p></blockquote><p>这里我们的 <code>name</code> 值为已配置好的 <code>configmap</code>， <code>optional</code> 代表如果没有该 <code>configmap</code> ，容器是否能够正常启动。</p><p>接着我们编辑下 <code>front-v1</code> 的 <code>deployment</code> 配置文件，加入这项配置</p><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/cf7bbb7bedc3438ea277ebf37ebc3079~tplv-k3u1fbpfcp-jj-mark:3024:0:0:0:q75.awebp" alt="image.png" loading="lazy"></p><p>添加后，保存并生效该 <code>deployment</code>，此时 <code>Pod</code> 会杀死重建。新 <code>Pod</code> 启动后，我们使用 <code>kubectl exec</code> 命令看下 <code>Pod</code> 内环境变量注入情况：</p><div class="language-sh vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">kubectl</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> exec</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -it</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> [POD_NAME] -- env </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">|</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> grep</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> MYSQL</span></span></code></pre></div><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/ba42462afbca46399861708e03d35e07~tplv-k3u1fbpfcp-jj-mark:3024:0:0:0:q75.awebp" alt="image.png" loading="lazy"></p><p>此时我们可以看到，环境变量被批量注入了进去。</p><h4 id="存储卷挂载" tabindex="-1">存储卷挂载 ​</h4><p>第二种方式是存储卷挂载。这种方式会将 <code>configmap</code> 里内容中的每个 <code>key</code> 和 <code>value</code>，以独立文件方式以外部挂载卷方式挂载进去（ <code>key</code> 是文件名，<code>value</code> 是文件内容）。这部分的用法和 <code>Secret</code> 的用法很像</p><p>我们编辑下 <code>front-v1</code> 的 <code>deployment</code> 配置文件，修改下配置：</p><p><strong>第一步：在 Pod 层面声明一个外部存储卷。 <code>name</code> 为存储卷名称；<code>configMap</code> 代表存储卷的文件来源为 <code>configMap</code> ； <code>configMap.name</code> 要填入要加载的 <code>configMap</code> 名称。位置如图所示</strong>：</p><div class="language-yaml vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">yaml</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">volumes</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">- </span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">name</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">envfiles</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">  configMap</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">    name</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">env-from-dir</span></span></code></pre></div><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/8509f822779545b5a8519c5360594f2a~tplv-k3u1fbpfcp-jj-mark:3024:0:0:0:q75.awebp" alt="image.png" loading="lazy"></p><p><strong>第二步：在容器镜像层面配置存储卷。 <code>name</code> 的值来源于第一步配置的 <code>name</code> 值； <code>mountPath</code> 为要挂载的目录；<code>readonly</code> 则代表文件是不是只读。位置如图所示</strong>：</p><div class="language-yaml vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">yaml</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">volumeMounts</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">- </span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">name</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">envfiles</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">  mountPath</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">/root/</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">  readOnly</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">true</span></span></code></pre></div><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/e779ce57c4494f828829e49c6af75dc6~tplv-k3u1fbpfcp-jj-mark:3024:0:0:0:q75.awebp" alt="image.png" loading="lazy"></p><p>编辑完后，保存并退出。使用 <code>kubectl apply -f</code> 命令生效下配置文件。</p><div class="language-sh vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">kubectl</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> apply</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -f</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> ./v1.yaml</span></span></code></pre></div><p>待 <code>Pod</code> 杀死重建后，我们来验证下文件是否已经挂载了进去。这里我们使用 <code>kubectl exec</code> 命令看下目录是否这个文件：</p><div class="language-sh vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">kubectl</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> exec</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -it</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> [POD_NAME] -- ls /root</span></span></code></pre></div><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/21968932d27c4802874d409a97a33580~tplv-k3u1fbpfcp-jj-mark:3024:0:0:0:q75.awebp" alt="image.png" loading="lazy"></p><p>可以看到，三个文件都成功地挂载了进去。</p><p>但是，这种方式每次挂载都要将整个文件夹挂载进去，我们如何一次只挂载单个文件呢？这里我们可以借助 <code>volumes.configMap.items[]</code> 字段来配置多个 <code>item</code> 项：</p><div class="language-yaml vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">yaml</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">volumes</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">- </span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">name</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">envfiles</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">  configMap</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">    name</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">env-from-dir</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">    items</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    - </span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">key</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">env1.config</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">      path</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">env1.config</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    - </span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">key</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">env2.config</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">      path</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">env2.config</span></span></code></pre></div><p>这里的 <code>item</code> 是个数组，每一项都是一条 <code>ConfigMap</code> 里的独立字段。</p><p>其中，<code>key</code> 是 <code>ConfigMap</code> 中的字段名称；<code>path</code>则是要挂载的路径（相对于在容器镜像层面配置存储卷配置的 <code>mountPath</code> 字段）。填写保存后退出生效</p><p>接着我们用 <code>kubectl exec</code> 命令验证下挂载结果</p><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/06dd0340a2304f8d917fdb10e8951619~tplv-k3u1fbpfcp-jj-mark:3024:0:0:0:q75.awebp" alt="image.png" loading="lazy"></p><p>结果如我们所愿，只挂载进去我们配置的2个文件。</p><h3 id="结束语" tabindex="-1">结束语 ​</h3><p>本章我们学习了如何使用 <code>ConfigMap</code> 配置服务环境变量。利用 <code>ConfigMap</code> , 我们可以将环境变量外置，与我们的业务代码解耦合。下一章我们就利用 <code>Kubernetes</code> <strong>容忍度和污点</strong>来更好地调度部署我们的 <code>Pod</code></p><p>大家有什么问题，欢迎在评论区讨论提出 👏</p>`,101),t=[n];function l(h,k,d,c,o,g){return a(),i("div",null,t)}const b=s(p,[["render",l]]);export{m as __pageData,b as default};
