import{_ as s}from"./app.BdTF1atn.js";import{j as i,i as a,Z as p}from"./chunks/@vue.D6nrJjhM.js";/* empty css                          */import"./chunks/@vueuse.ErXst1iV.js";const b=JSON.parse('{"title":"","description":"","frontmatter":{},"headers":[],"relativePath":"mdviewer/XIAOCE/Node + React 实战：从 0 到 1 实现记账本 5.98/21 项目部署上线.md","filePath":"mdviewer/XIAOCE/Node + React 实战：从 0 到 1 实现记账本 5.98/21 项目部署上线.md"}'),e={name:"mdviewer/XIAOCE/Node + React 实战：从 0 到 1 实现记账本 5.98/21 项目部署上线.md"},t=p(`<h3 id="前言" tabindex="-1">前言 ​</h3><p>为了能让用户通过线上地址预览项目，我们需要将本次编写的前后端项目部署到服务器上。本章节为大家带来部署 <code>Node</code> 服务端项目和前端项目。</p><h4 id="知识点" tabindex="-1">知识点 ​</h4><ul><li>CentOS 服务器</li><li>配置 ssh</li><li>MySQL 服务器端安装</li><li>egg 服务端部署</li><li>pm2 进程守护</li></ul><p>代码都已经推到 <code>Github</code> 仓库，地址如下所示：</p><blockquote><p>记账本服务端代码仓库地址：github.com/Nick930826/…</p></blockquote><blockquote><p>记账本前端代码仓库地址：github.com/Nick930826/…</p></blockquote><h3 id="正文" tabindex="-1">正文 ​</h3><h4 id="购买服务器" tabindex="-1">购买服务器 ​</h4><p>我们先从服务器的购买谈起，如果已经购买服务器的同学，可以省略这一步的。</p><p>为什么要购买服务器呢，当你本地开发好项目的时候，你只能跑在你的本机电脑上，所以此时你只能独自欣赏自己的项目。别人无法通过访问你的 IP 地址，去浏览你跑在本地的项目。而服务器的能力，就是可以让你把项目跑在服务器上，让用户通过访问你的服务器抛出的<code>IP + 端口号</code>，去浏览你的网页或者使用你抛出的接口。</p><p>服务器的品类也有很多，阿里云、腾讯云、华为云、七牛云等等，都有提供云服务器的功能，这里我选择的是阿里云服务器，同学们可以自行选择。我选择阿里云的原因很简单，它的用户较多，遇到问题的话，网上会有比较多的解决方案，少走弯路。</p><p>购买服务器有两种选择，第一种是「包年包月」，有条件的同学可以选择包年，既然接触了全栈开发，或多或少都需要跟服务器打交道；第二种则是「按量收费」，按量收费的特点是可以根据自己的需要，开启或关闭服务器。</p><p>购买时，注意一点，一定要选择 <code>CentOS</code> 的镜像，版本尽量选择最高版本。因为它是基于 <code>unix</code>，对开发比较友好。</p><p>这是我购买的配置，如下所示：</p><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/dda1ea5c0f1044068c6dac0432d98505~tplv-k3u1fbpfcp-jj-mark:3024:0:0:0:q75.awebp" alt="" loading="lazy"></p><p>用于平时部署简单项目，这样的配置基本上是满足的。但是如果你要运行一些比较大型的项目，并且有多个的话，<code>2G</code> 的内存是不够的，因为考虑到项目会在服务器端进行打包，会占用不少内存，有可能会因为服务器的内存不足，而导致打包失败，到时候再升级内存的话，就会比较费钱。</p><h4 id="ssh-配置" tabindex="-1">ssh 配置 ​</h4><p>购买服务器之后，首先要做的就是登录服务器，市面上不乏可视化的服务器造作软件，但我的建议是指令操作才是一个程序员应该具备的能力。</p><p>在此之前，我们先在本地配置好 <code>ssh</code>。</p><p><strong>什么是 ssh</strong></p><p>百度百科给出的定义：</p><blockquote><p>SSH 为 Secure Shell 的缩写，由 IETF 的网络小组（Network Working Group）所制定；SSH 为建立在应用层基础上的安全协议。SSH 是较可靠，专为远程登录会话和其他网络服务提供安全性的协议。利用 SSH 协议可以有效防止远程管理过程中的信息泄露问题。SSH最初是UNIX系统上的一个程序，后来又迅速扩展到其他操作平台。SSH在正确使用时可弥补网络中的漏洞。SSH客户端适用于多种平台。几乎所有UNIX平台—包括HP-UX、Linux、AIX、Solaris、Digital UNIX、Irix，以及其他平台，都可运行SSH。</p></blockquote><p>我用一句话概括它：</p><blockquote><p>SSH是一种网络协议，用于计算机之间的加密登录。</p></blockquote><p>服务器也是一台计算机，只不过它是远端的计算机，大家买的阿里云、腾讯云等服务器，相当于一台常年开启状态的计算机，可以通过 <code>dos</code> 界面进行操作，也可以通过市面上的服务器可视化工具进行管理。</p><p><strong>本地安装 ssh，实现免密登录</strong></p><p>如果已经安装过，忽略这部分的内容，没有安装的请继续往下看。</p><p>如果开发机器是 <code>Windows</code> 系统，可以先在本地安装好 <code>git</code>，然后通过命令行来到项目的 <code>~</code> 路径下，运行如下指令生成 <code>ssh key</code>：</p><div class="language-sh vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">ssh-keygen</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -t</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> rsa</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -C</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;xxxxx@xxxxx.com&quot;</span></span></code></pre></div><p>上述邮箱地址写邮箱地址，这里不一定要写邮箱，只是为了方便找到生成的 <code>ssh key</code> 是谁的。</p><p>执行完成后，前往 <code>~/.ssh</code> 路径下，查看是否生成好的相应的公钥。笔者的公钥如下所示：</p><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/dafbcae65da04944a8a749940e318240~tplv-k3u1fbpfcp-jj-mark:3024:0:0:0:q75.awebp" alt="" loading="lazy"></p><p><code>id_rsa.pub</code> 文件里面的内容，就是需要的公钥内容。</p><p>拿到本机的公钥之后，进入阿里云服务器，同样先看看服务器是否有设置好公钥，打开 <code>~/.ssh</code> 查看。如果是刚买的服务器，建议先全局安装好 <code>git</code>，然后再去查看 <code>~/.ssh</code>，正常情况下是如下所示：</p><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/ed0a883481f44b17a539c33e525bc719~tplv-k3u1fbpfcp-jj-mark:3024:0:0:0:q75.awebp" alt="" loading="lazy"></p><blockquote><p>如果没有内容，建议按照本地配置 <code>ssh key</code> 的方法，在服务器端再做一次配置。</p></blockquote><p>上图所示的 <code>authorized_keys</code> 文件，便是设置免密登录的配置文件。只需将你本地电脑的 <code>id_rsa.pub</code> 公钥内容，拷贝到 <code>authorized_keys</code> 中并保存，那么你便可以在本地远程免密登录服务器，如下所示：</p><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/0335ca539a2e415e81afeff629947de7~tplv-k3u1fbpfcp-jj-mark:3024:0:0:0:q75.awebp" alt="" loading="lazy"></p><p>如果没有配置好 <code>authorized_keys</code>，那么你每次做上述操作的时候，都会提示你输入服务器的登录密码。这样就会阻碍我们后续通过 <code>pm2</code> 远程自动化登录服务器。</p><p>既然已经配置好了服务器的 <code>ssh</code>，我们将服务器的公钥 <code>id_rsa.pub</code>，拷贝到我们存放代码仓库的权限配置里，这一步的目的是让服务器可以通过 <code>ssh</code> 的方式拉取代码仓库内的最新代码，配置如下：</p><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/e1d303bafe1541019e4efade55c0d047~tplv-k3u1fbpfcp-jj-mark:3024:0:0:0:q75.awebp" alt="" loading="lazy"></p><p>笔者将代码放到了 <code>Github</code> 仓库，上图为 <code>Github</code> 的 <code>Setting</code> 界面，点击 <code>SSH and GPG keys</code>，新建一个 <code>SSH key</code>，将服务器的公钥粘贴进去，完成之后，你便可以在服务器通过 ssh 的方式拉取代码。</p><p>以上操作是对本地计算机和云端服务器的一些基础配置，目的是为后面的操作打下基础。</p><h4 id="mysql-服务器端安装" tabindex="-1">MySQL 服务器端安装 ​</h4><p>第三章笔者讲述了 <code>MySQL</code> 在本地的安装，因为那时我们开发也是在本地，所以配置一个本地数据库足矣。而此时，我们需要将服务端的项目上线，<code>Egg</code> 开发的项目就不能再连接本地数据库，当然，线上服务代码也连接不上我们本地的数据库。</p><p><strong>第一步</strong></p><p>远程登录服务器之后运行以下命令更新 <code>yum</code> 源：</p><div class="language-sh vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">rpm</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -Uvh</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">  http://dev.mysql.com/get/mysql57-community-release-el7-9.noarch.rpm</span></span></code></pre></div><blockquote><p>这里我们使用的 <code>MySQL</code> 版本是 <code>5.7.28</code>。</p></blockquote><p>安装 <code>MySQL</code>，注意这里安装稳定社群版：</p><div class="language-sh vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">yum</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> install</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> mysql-community-server</span></span></code></pre></div><p>全部安装完成之后，可以通过以下命令查看是否安装成功：</p><div class="language-sh vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">[root@iZbp15axph2ymmv3k3i5oxZ </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">~</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">]# mysql --version</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">mysql</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">  Ver</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 14.14</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> Distrib</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> 5.7.28,</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> for</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> Linux</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (x86_64) using  EditLine wrapper</span></span></code></pre></div><p><strong>第二步</strong></p><p>此时需要配置一下安装好后的 <code>MySQL</code>。执行如下命令启动它：</p><div class="language-sh vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">systemctl</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> start</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> mysqld</span></span></code></pre></div><p>设置开机自动启动：</p><div class="language-sh vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">systemctl</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> enable</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> mysqld</span></span></code></pre></div><p>如果遇到一些问题，需要重启数据库的话，执行以下指令：</p><div class="language-sh vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">systemctl</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> restart</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> mysqld</span></span></code></pre></div><p>网上说通过以下命令可以看到初始化密码，因为为了安全考虑，<code>5.7</code> 以后的 <code>MySQL</code> 版本，都会有一个默认的初始密码，可以通过下列指令来获取：</p><div class="language-sh vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">grep</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;temporary password&#39;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> /var/log/mysqld.log</span></span></code></pre></div><p>如果你通过这条命令行能获取到初始密码，那基本上你就可以进入 <code>MySQL</code> 数据库，重制你的密码了。但是我碰到的情况是，<code>mysqld.log</code> 文件为空，没有内容。</p><p>于是经过翻阅资料，查到可以设置一些配置，跳过输入密码然后进入 <code>MySQL</code> 数据库。操作如下：</p><p>1、修改 <code>MySQL</code> 的配置文件（默认为<code>/etc/my.cnf</code>）,在<code>[mysqld]</code>下添加一行<code>skip-grant-tables</code>，如下：</p><div class="language-sh vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">[mysqld]</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">skip-grant-tables</span></span></code></pre></div><p>2、保存配置文件后，重启 <code>MySQL</code> 服务 <code>systemctl restart mysqld</code>。</p><p>3、执行 <code>mysql -u root -p</code> 登录 <code>MySQL</code>，然后不输入密码直接回车。</p><p>4、登录之后，修改密码，操作如下：</p><div class="language-sh vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">update</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> mysql.user</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> set</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> authentication_string=password</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">&#39;123456&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">where</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> user=&#39;root&#39;</span></span></code></pre></div><p>5、记得去阿里云服务 <code>ESC</code> 实例的安全组里把 <code>3306</code> 端口开启，因为 <code>MySQL</code> 启动之后，默认是跑在 <code>3306</code> 端口上的。</p><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/b234851298234de0a3c3dfb01494cf62~tplv-k3u1fbpfcp-jj-mark:3024:0:0:0:q75.awebp" alt="" loading="lazy"></p><p>上述一系列操作的目的，就是将 <code>MySQL</code> 在服务器内成功安装，并且启动。这样我们便可以通过 <code>ip+端口</code> 的形式，在本地通过 <code>DBeaver</code> 远程连接服务器端的数据库，下面是连接操作：</p><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/b0e7e6a059c44bd78532d67b1e192a92~tplv-k3u1fbpfcp-jj-mark:3024:0:0:0:q75.awebp" alt="" loading="lazy"></p><ul><li><p>服务器地址：笔者的地址是 <code>47.99.134.126</code>，这里可以填写你们自己的地址。</p></li><li><p>端口：默认是 <code>3306</code>。</p></li><li><p>用户名：默认是 <code>root</code>。</p></li><li><p>密码：这里的密码就是上述我们安装 <code>MySQL</code> 时，自己设置的密码。</p></li></ul><p>填写完之后，点击底部的确认按钮，便可连接到服务器的 <code>MySQL</code>，如下所示：</p><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/78b133e75fcb4609aee663301d564e35~tplv-k3u1fbpfcp-jj-mark:3024:0:0:0:q75.awebp" alt="" loading="lazy"></p><p>上图所示，笔者已经在服务器端建好了 <code>jue-cost</code> 表，<code>ER图</code> 如上所示。</p><p>这里提供给大家一个 <code>SQL</code> 文件，可以直接在数据库导入 <code>SQL</code> 文件，直接创建好需要的表结构。</p><blockquote><p>SQL文件下载：jue-cost。</p></blockquote><p>新建好一个数据库之后，右键选择导入上述文件即可。当然，你也可以手动新建一个数据库，并在数据库内创建这三张表，可以参照第五章讲述的内容。</p><h4 id="部署服务端代码" tabindex="-1">部署服务端代码 ​</h4><p>接下来我们要做两件事情，第一步先将本地的服务端代码上传到代码仓库，<code>Github</code> 和 <code>Gitee</code> 都可以，只要是一个线上管理的代码仓库便可。这样做的目的是便于后续的代码更新，可以在服务器及时地拉取到最新的代码。</p><p>笔者已经将服务端代码上传到了 <code>Github</code>，地址如下：</p><blockquote><p>github.com/Nick930826/…</p></blockquote><p>这里要注意的是，在 <code>/config/config.default.js</code> 文件中，你需要修改你自己的数据库名和密码，如下：</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">exports</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.mysql </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  // 单数据库信息配置</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  client: {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // host</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    host: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;localhost&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // 端口号</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    port: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // 用户名</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    user: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;root&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // 密码</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    password: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;你自己的数据库密码&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // 数据库名</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    database: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;你自己新建的数据库名称&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  },</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  // 是否加载到 app 上，默认开启</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  app: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">true</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  // 是否加载到 agent 上，默认关闭</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  agent: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">false</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">};</span></span></code></pre></div><p>我们前往服务器拉取最新的服务端代码，如下所示：</p><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/0808f86e22f04106a083a95ab08ea395~tplv-k3u1fbpfcp-jj-mark:3024:0:0:0:q75.awebp" alt="" loading="lazy"></p><p>拉取完成之后，查看文件夹，会多处这么一个项目：</p><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/337ffd64326a474a808d0d08e77bd5dc~tplv-k3u1fbpfcp-jj-mark:3024:0:0:0:q75.awebp" alt="" loading="lazy"></p><p>进入项目，安装 <code>node_modules</code> 包，如下所示：</p><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/2af410c91ac44253a9f825f90363f2d0~tplv-k3u1fbpfcp-jj-mark:3024:0:0:0:q75.awebp" alt="" loading="lazy"></p><p>安装完成之后，执行 <code>npm run start</code>，服务端项目就启动完成了，不用担心它会挂掉，<code>Egg</code> 自带进程守护功能。</p><p>于是乎，项目就被运行在这样一个地址上：</p><blockquote><p>http://47.99.134.126:7009</p></blockquote><p>我们不妨测试以下获取用户信息接口是否能连通，如下所示：</p><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/6aca5db70aa041f88918ae42b9d42ab2~tplv-k3u1fbpfcp-jj-mark:3024:0:0:0:q75.awebp" alt="" loading="lazy"></p><p>目前我们尚未登录，请求时没有携带 <code>token</code>，所以此接口返回了 <code>token</code> 不存在的错误信息。</p><p>这就表明，服务端部署已经成功，你可以通过该接口地址去访问相应的接口，来制作前端页面。</p><h4 id="前端-pm2-部署" tabindex="-1">前端 pm2 部署 ​</h4><p>服务端项目部署完之后，我们继续部署前端项目。先来描述一下前端项目从打包到部署到服务器上的整个过程。</p><p>1、首先我们需要运行 <code>npm run build</code> 对项目进行打包操作，打完包后，在根目录会出现一个 <code>dist</code> 目录，如下所示：</p><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/31733a560b914814a96fc834c2c08e21~tplv-k3u1fbpfcp-jj-mark:3024:0:0:0:q75.awebp" alt="" loading="lazy"></p><p>如上图所示：</p><ul><li><p>assets：存放打包后的静态资源，如 js、css、图片等。</p></li><li><p>index.html：项目入口页面，就是整个项目需要通过这个页面初始化，内部也看到了引入了 index.xxx.js，这是整个项目的 js 脚本。</p></li></ul><p>现在需要想方设法让 <code>index.html</code> 跑在服务器上的某个端口。</p><p>这里，为大家推荐一个比较好用的一个插件，通过命令行安装它：</p><div class="language-sh vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">npm</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> i</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> pushstate-server</span></span></code></pre></div><p><code>pushstate-server</code> 为什么提供了很便捷的启动 web 服务的配置，内部的原理是通过 <code>connect</code> 服务器，开启一个端口，将 <code>dist/index.html</code> 文件作为静态模板输出。</p><p>安装好之后，在 <code>H5</code> 项目的根目录添加 <code>juejue-vite-h5-server</code> 文件，内容如下：</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> server</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> require</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;pushstate-server&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">server.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">start</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">({</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  port: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">5021</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  directory: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;./dist&#39;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">})</span></span></code></pre></div><ul><li><p>port：需要启动的端口号。</p></li><li><p>directory：<code>index.html</code> 所在的目录路径，这里直接写相对路径就好。</p></li></ul><p>配置好上述内容之后，就需要引入 <code>pm2</code> 的概念，它是一个进程管理工具，对于前端而言最重要的功能便是进程守护，通过它启动的 <code>node</code> 服务，服务挂了会自动拉起项目。</p><p>在 <code>H5</code> 项目根目录新增 <code>ecosystem.config.js</code>，在项目本地执行 <code>pm2</code> 的时候，会匹配的项目根目录下的 <code>ecosystem.config.js</code> 文件，并且执行它的配置。配置如下：</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">module</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">exports</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  apps: [</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      name: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;juejue-vite-h5&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      script: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;juejue-vite-h5-server.js&#39;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    },</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  ],</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  deploy: {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    production: {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      user: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;root&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      host: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;47.99.134.126&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      ref: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;origin/master&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      repo: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;git@git.zhlh6.cn:Nick930826/juejue-vite-h5.git&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      path: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;/workspace/juejue-vite-h5&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">      &#39;post-deploy&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;git reset --hard &amp;&amp; git checkout master &amp;&amp; git pull &amp;&amp; npm i --production=false &amp;&amp; npm run build:release &amp;&amp; pm2 startOrReload ecosystem.config.js&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// -production=false 下载全量包</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      env: {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        NODE_ENV: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;production&#39;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><ul><li><p>apps：<code>script</code> 为服务器通过 <code>pm2</code> 要执行的脚本，<code>name</code> 为脚本在 <code>pm2</code> 列表中的名称，这个名称要注意，避免后续其他项目重名，在服务器中你会无法区分是哪个项目。</p></li><li><p>deploy：<code>production</code> 为部署正式环境的配置，这里我就不配置 <code>beta</code> 环境的代码，因为目前就只有一台服务器。</p></li><li><p>production.user：默认 <code>root</code> 用户。</p></li><li><p>production.host：要部署的服务器 <code>IP</code> 地址。</p></li><li><p>production.ref：要部署的代码，在代码仓库中的哪个分之，如果是测试环境，那么这里应该就是 <code>origin/develop</code>，这里我们默认是正式。</p></li><li><p>production.repo：代码存放的地址，这里是我的地址，你可以写你自己的代码仓库地址。</p></li><li><p>production.path：在服务器拉取远程仓库地址之后，存放在服务器中的地址，这里我习惯存放在 <code>workspace</code> 文件夹内，同学们可以根据自己的习惯进行操作。</p></li><li><p>production.post-deploy：需要执行的一些指令，如 <code>git reset</code> 重制、<code>git checkout master</code> 切换分支、<code>git pull</code> 拉取最新代码、<code>npm i</code> 安装依赖、<code>npm run build</code> 打包构建、<code>pm2 startOrReload ecosystem.config.js pm2</code> 执行项目。</p></li></ul><blockquote><p>这里有一点要注意的是，安装依赖的时候，设置 <code>--production=false</code> 的目的是将 <code>devDependencies</code> 中的包也进行安装，否则我们无法进行 <code>vite</code> 打包操作。</p></blockquote><p>首次执行的时候，由于服务器中并没有 <code>juejue-vite-h5</code> 这个项目，所以我们需要初始化一下项目，如下所示：</p><div class="language-sh vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">pm2</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> deploy</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> ecosystem.config.js</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> production</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> setup</span></span></code></pre></div><p>执行上述代码之前，服务器并没有 <code>juejue-vite-h5</code> 项目：</p><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/0025f2fef96a4993b46381a816c62954~tplv-k3u1fbpfcp-jj-mark:3024:0:0:0:q75.awebp" alt="" loading="lazy"></p><p>我们尝试在前端项目中执行上诉指令：</p><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/2d84b7f2926447559e1af44fd0013c22~tplv-k3u1fbpfcp-jj-mark:3024:0:0:0:q75.awebp" alt="" loading="lazy"></p><p>成功之后，查看服务器中是否拉取成功：</p><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/34f5d8adf29844e396257cb00b2920be~tplv-k3u1fbpfcp-jj-mark:3024:0:0:0:q75.awebp" alt="" loading="lazy"></p><p>此时服务器中已经存在 <code>juejue-vite-h5</code> 项目，接下来就是自动化执行整个部署流程，执行指令：</p><div class="language-sh vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">pm2</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> deploy</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> production</span></span></code></pre></div><blockquote><p>注意，代码一定要先提交，因为服务器需要拉取最新的代码，这里必须要保持本地 <code>commit</code> 是没有未提交的。</p></blockquote><p>上述方式如果是服务器的内存是够的情况下，可以正常自动化部署，但是笔者的服务器跑了太多的项目。导致在服务器执行打包操作的时候，内存不足，将部署进程杀死了。</p><p>于是我采用本地将项目打包好，连同 <code>dist</code> 一起上传到仓库，服务器在拉取代码的时候就不用再执行打包操作，直接执行 <code>pm2 startOrReload ecosystem.config.js</code> 操作。所以我们需要修改 <code>ecosystem.config.js</code> 如下：</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;post-deploy&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;git reset --hard &amp;&amp; git checkout master &amp;&amp; git pull &amp;&amp; npm i --production=false &amp;&amp; pm2 startOrReload ecosystem.config.js&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">//</span></span></code></pre></div><p>再次执行 <code>pm2 deploy production</code>，如下所示：</p><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/778635c68e204b6d9f92a8976b3e4004~tplv-k3u1fbpfcp-jj-mark:3024:0:0:0:q75.awebp" alt="" loading="lazy"></p><p>部署成功之后，笔者的前端项目是部署在 <code>5021</code> 端口上的，所以直接访问 <code>http://47.99.134.126:5021</code>，如下所示表示成功部署：</p><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/9f39897abf124f198d294b7090fde885~tplv-k3u1fbpfcp-jj-mark:3024:0:0:0:q75.awebp" alt="" loading="lazy"></p><p>恭喜你，你已经成功将前端项目通过 <code>pm2</code> 部署到服务器，并且正常运行了。后续的更新操作，你可以直接将代码在本地打包完，推到代码仓库后，在项目下运行 <code>pm2 deploy production</code> 就能自动部署到服务器。</p><h3 id="总结" tabindex="-1">总结 ​</h3><p>部署项目的配置过程可能非常艰辛，但是做程序很多时候就是这样，这种方式部署项目的付出回报率是很可观的，你不必再每次打包之后，将项目压缩拖到服务器，而是通过一条简单的指令，一键部署到服务器，大大提高了工作效率。</p><p>如果有条件的同学，使用的是 <code>GitLab</code> 作为代码仓库，还可以通过 <code>CI</code>、<code>CD</code> 进行持续集成，这里不展开分析。</p>`,141),n=[t];function l(d,h,c,o,k,r){return a(),i("div",null,n)}const m=s(e,[["render",l]]);export{b as __pageData,m as default};
