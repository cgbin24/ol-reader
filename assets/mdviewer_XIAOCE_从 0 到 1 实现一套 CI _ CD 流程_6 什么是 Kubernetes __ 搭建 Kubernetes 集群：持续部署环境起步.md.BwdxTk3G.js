import{_ as s}from"./app.BdTF1atn.js";import{j as i,i as a,Z as e}from"./chunks/@vue.D6nrJjhM.js";/* empty css                          */import"./chunks/@vueuse.ErXst1iV.js";const b=JSON.parse('{"title":"","description":"","frontmatter":{},"headers":[],"relativePath":"mdviewer/XIAOCE/从 0 到 1 实现一套 CI & CD 流程/6 什么是 Kubernetes && 搭建 Kubernetes 集群：持续部署环境起步.md","filePath":"mdviewer/XIAOCE/从 0 到 1 实现一套 CI & CD 流程/6 什么是 Kubernetes && 搭建 Kubernetes 集群：持续部署环境起步.md"}'),n={name:"mdviewer/XIAOCE/从 0 到 1 实现一套 CI & CD 流程/6 什么是 Kubernetes && 搭建 Kubernetes 集群：持续部署环境起步.md"},t=e(`<h3 id="什么是-kubernetes" tabindex="-1">什么是 Kubernetes？ ​</h3><p>百科上是这样解释的：</p><blockquote><p>Kubernetes 是 Google 开源的一个容器编排引擎，它支持自动化部署、大规模可伸缩、应用容器化管理。在生产环境中部署一个应用程序时，通常要部署该应用的多个实例以便对应用请求进行负载均衡。</p></blockquote><p>通俗些讲，可以将 <code>Kubernetes</code> 看作是用来是一个部署镜像的平台。可以用来操作多台机器调度部署镜像，大大地降低了运维成本。</p><p>那么， <code>Kubernetes</code> 和 <code>Docker</code> 的关系又是怎样的呢？</p><p><strong>一个形象的比喻：如果你将 <code>docker</code> 看作是飞机，那么 <code>kubernetes</code> 就是飞机场。在飞机场的加持下，飞机可以根据机场调度选择在合适的时间降落或起飞</strong>。</p><p>在 <code>Kubernetes</code> 中，可以使用集群来组织服务器的。集群中会存在一个 <code>Master</code> 节点，该节点是 <code>Kubernetes</code> 集群的控制节点，负责调度集群中其他服务器的资源。其他节点被称为 <code>Node</code> ， <code>Node</code> 可以是物理机也可以是虚拟机。</p><h3 id="基础安装" tabindex="-1">基础安装 ​</h3><p><strong>基础安装章节，Master &amp; Node 节点都需要安装</strong></p><p>第一步我们安装些必备组件。 <code>vim</code> 是 <code>Linux</code> 下的一个文件编辑器； <code>wget</code> 可以用作文件下载使用； <code>ntpdate</code> 则是可以用来同步时区：</p><div class="language-sh vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">yum</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> install</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> vim</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> wget</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> ntpdate</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -y</span></span></code></pre></div><p>接着我们关闭防火墙。因为 <code>**kubernetes</code> 会创建防火墙规则，导致防火墙规则重复**。所以这里我们要将防火墙关闭：</p><div class="language-sh vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">systemctl</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> stop</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> firewalld</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> &amp; </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">systemctl</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> disable</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> firewalld</span></span></code></pre></div><p>这一步需要我们关闭 <code>Swap</code> 分区。 <code>Swap</code> 是 <code>Linux</code> 的交换分区，在系统资源不足时，<code>Swap</code> 分区会启用。这操作会拖慢我们的应用性能。</p><p>应该让新创建的服务自动调度到集群的其他 <code>Node</code> 节点中去，而不是使用 <code>Swap</code> 分区。这里我们将它关闭掉：</p><div class="language-sh vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">#临时关闭</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">swapoff</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -a</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 永久关闭</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">vi</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> /etc/fstab</span></span></code></pre></div><p>找到 <code>/etc/fstab</code> 文件，注释掉下面这一行：</p><div class="language-sh vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">/dev/mapper/centos-swap</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> swap</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> ...</span></span></code></pre></div><p>继续关闭 <code>Selinux</code>。这是为了支持容器可以访问宿主机文件系统所做的，后续也许会优化掉：</p><div class="language-sh vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 暂时关闭 selinux</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">setenforce</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 0</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 永久关闭</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">vi</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> /etc/sysconfig/selinux</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 修改以下参数，设置为disable</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">SELINUX</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">disabled</span></span></code></pre></div><blockquote><p><strong>关于为什么关闭防火墙，selinux，swap。这里有几份更标准的回答：https://www.zhihu.com/question/374752553</strong></p></blockquote><p>接着使用 <code>ntpdate</code> 来统一我们的系统时间和时区，服务器时间与阿里云服务器对齐。</p><div class="language-sh vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 统一时区，为上海时区</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">ln</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -snf</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> /usr/share/zoneinfo/Asia/Shanghai</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> /etc/localtime</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">bash</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -c</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;echo &#39;Asia/Shanghai&#39; &gt; /etc/timezone&quot;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 统一使用阿里服务器进行时间更新</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">ntpdate</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> ntp1.aliyun.com</span></span></code></pre></div><h4 id="安装-docker" tabindex="-1">安装 Docker ​</h4><p>在 <code>kubernetes</code> 中的组件，服务都可以 <code>Docker</code> 镜像方式部署的。所以我们安装 <code>Docker</code> 必不可少。</p><p>在安装 <code>Docker</code> 之前，需要安装 <code>device-mapper-persistent-data</code> 和 <code>lvm2</code> 两个依赖。我们使用 <code>Yum</code> 命令直接安装依赖即可：</p><div class="language-sh vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">yum</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> install</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -y</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> yum-utils</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> device-mapper-persistent-data</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> lvm2</span></span></code></pre></div><blockquote><p><code>device-mapper-persistent-data</code>: 存储驱动，Linux上的许多高级卷管理技术 lvm: 逻辑卷管理器，用于创建逻辑磁盘分区使用</p></blockquote><p>接下来，添加阿里云的 <code>Docker</code> 镜像源，加速 <code>Docker</code> 的安装：</p><div class="language-sh vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">sudo</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> yum-config-manager</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --add-repo</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> http://mirrors.aliyun.com/docker-ce/linux/centos/docker-ce.repo</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">yum</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> install</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> docker-ce</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -y</span></span></code></pre></div><p>我们还需要修改一下<code>docker</code>的<code>cgroupdriver</code>为<code>systemd</code>，这样做是为了避免后面与<code>k8s</code>的冲突。</p><div class="language-sh vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">cat</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> &gt;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> /etc/docker/daemon.json</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> &lt;&lt;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">EOF</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">{</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">  &quot;exec-opts&quot;: [&quot;native.cgroupdriver=systemd&quot;]</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">}</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">EOF</span></span></code></pre></div><p>安装完毕后，我们使用使用 <code>systemctl</code> 启动 <code>Docker</code> 即可</p><div class="language-sh vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">systemctl</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> start</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> docker</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">systemctl</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> enable</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> docker</span></span></code></pre></div><p>执行 <code>docker -v</code> ，如果显示以下 <code>docker</code> 版本的信息，代表 <code>docker</code> 安装成功。</p><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/222a2a0b50414b77909cfde5050373dc~tplv-k3u1fbpfcp-jj-mark:3024:0:0:0:q75.awebp" alt="image.png" loading="lazy"></p><p>我们拉取 <code>Docker</code> 镜像时，一般默认会去 <code>Docker</code> 官方源拉取镜像。但是国内出海网速实在是太慢，所以我们更换为 <code>阿里云镜像仓库</code> 源进行镜像下载加速</p><p>登录阿里云官网，打开 阿里云容器镜像服务。点击左侧菜单最下面的 <code>镜像加速器</code> ，选择 <code>Centos</code> （如下图）</p><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/4b0ba7bb836e4ead8aef34a0ac29166d~tplv-k3u1fbpfcp-jj-mark:3024:0:0:0:q75.awebp" alt="image.png" loading="lazy"></p><p>按照官网的提示，执行命令，即可实现更换 Docker 镜像源地址。</p><p>还记得我们前面安装私有镜像库时的使用提示吗？在安装完 <code>Docker</code> 后，<strong>如果你的私有镜像库是 <code>HTTP</code> 而不是 <code>HTTPS</code> 的话，需要在 <code>/etc/docker/daemon.json</code> 里配置一下你的私有库地址</strong>。</p><p>编辑 <code>/etc/docker/daemon.json</code> 文件，添加 <code>insecure-registries</code> 字段。字段的值是数组，数组的第一项填入你的私有库地址即可（不要忘记后面的逗号）。如示例：</p><div class="language-json vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">json</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  &quot;insecure-registries&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: [</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;http://[私有库地址]:[私有库端口]&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">],</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  &quot;registry-mirrors&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: [</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;https://*****.mirror.aliyuncs.com&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">]</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>保存后退出，重启下 <code>Docker</code> 服务：</p><div class="language-sh vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">sudo</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> systemctl</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> daemon-reload</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">sudo</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> systemctl</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> restart</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> docker.service</span></span></code></pre></div><h4 id="安装-kubernetes-组件" tabindex="-1">安装 Kubernetes 组件 ​</h4><p>从这里我们开始安装 <code>Kubernetes</code> 的相关组件，首先先将安装源更换为为国内的阿里云源：</p><div class="language-sh vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">cat</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> &lt;&lt;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">EOF</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> &gt;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> /etc/yum.repos.d/kubernetes.repo</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">[kubernetes]</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">name=Kubernetes</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">baseurl=http://mirrors.aliyun.com/kubernetes/yum/repos/kubernetes-el7-x86_64</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">enabled=1</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">gpgcheck=0</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">repo_gpgcheck=0</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">gpgkey=http://mirrors.aliyun.com/kubernetes/yum/doc/yum-key.gpg</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">        http://mirrors.aliyun.com/kubernetes/yum/doc/rpm-package-key.gpg</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">EOF</span></span></code></pre></div><p>接着直接使用 <code>yum</code> 命令安装 <code>kubelet</code>、 <code>kubeadm</code>、<code>kubectl</code> 即可，安装完毕后启用 <code>kubelet</code> 即可。</p><div class="language-sh vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">yum</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> install</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -y</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> kubelet-1.23.6</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> kubeadm-1.23.6</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> kubectl-1.23.6</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 启动kubelet</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">systemctl</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> enable</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> kubelet</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> &amp;&amp; </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">systemctl</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> start</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> kubelet</span></span></code></pre></div><blockquote><p><code>kubelet</code> 是 <code>Kubernetes</code> 中的核心组件。它会运行在集群的所有节点上，并负责创建启动服务容器 <code>kubectl</code> 则是<code>Kubernetes</code>的命令行工具。可以用来管理，删除，创建资源 <code>kubeadm</code> 则是用来初始化集群，子节点加入的工具。</p></blockquote><h3 id="master-节点安装" tabindex="-1">Master 节点安装 ​</h3><p><code>Master</code> 节点是集群内的调度和主要节点，<strong>以下部分仅限 <code>Master</code> 节点才能安装</strong>。</p><p>首先，我们使用 <code>hostnamectl</code> 来修改主机名称为 <code>master</code> 。<code>hostnamectl</code> 是 <code>Centos7</code> 出的新命令，可以用来修改主机名称：</p><div class="language-sh vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">hostnamectl</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> set-hostname</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">  master</span></span></code></pre></div><p>接着使用 <code>ip addr</code> 命令，获取本机IP，将其添加到 <code>/etc/hosts</code> 内：</p><div class="language-sh vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># xxx.xxx.xxx.xxx master</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">vim</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> /etc/hosts</span></span></code></pre></div><h4 id="配置-kubernetes-初始化文件" tabindex="-1">配置 Kubernetes 初始化文件 ​</h4><p>接着我们使用 <code>kubeadm config print init-defaults</code> 输出一份默认初始化配置文件，使用 &gt; 操作符即可导出为一份文件，方便我们进行修改。</p><div class="language-sh vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">kubeadm</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> config</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> print</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> init-defaults</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> &gt;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> init-kubeadm.conf</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">vim</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> init-kubeadm.conf</span></span></code></pre></div><p>主要对配置文件做这几件事情：</p><ul><li>更换 <code>Kubernetes</code> 镜像仓库为阿里云镜像仓库，加速组件拉取</li><li>替换 <code>ip</code> 为自己主机 <code>ip</code></li><li>配置 <code>pod</code> 网络为 <code>flannel</code> 网段</li></ul><div class="language-sh vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># imageRepository: k8s.gcr.io 更换k8s镜像仓库</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">imageRepository:</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> registry.cn-hangzhou.aliyuncs.com/google_containers</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># localAPIEndpointc，advertiseAddress为master-ip ，port默认不修改</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">localAPIEndpoint:</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  advertiseAddress:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 192.168.56.101</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  # 此处为master的IP</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  bindPort:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 6443</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 配置子网络</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">networking:</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  dnsDomain:</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> cluster.local</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  serviceSubnet:</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> 10.96.0.0/12</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  podSubnet:</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> 10.244.0.0/16</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">	# 添加这个</span></span></code></pre></div><p>在修改完配置文件后，我们需要使用 <code>kubeadm</code> 拉取我们的默认组件镜像。直接使用 <code>kubeadm config images pull</code> 命令即可</p><div class="language-sh vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">kubeadm</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> config</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> images</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> pull</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --config</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> init-kubeadm.conf</span></span></code></pre></div><h4 id="初始化-kubernetes" tabindex="-1">初始化 Kubernetes ​</h4><p>在镜像拉取后，我们就可以使用刚才编辑好的配置文件去初始化 <code>Kubernetes</code> 集群了。这里直接使用 <code>kubeadm init</code> 命令去初始化即可。</p><div class="language-sh vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">kubeadm</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> init</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --config</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> init-kubeadm.conf</span></span></code></pre></div><p>在静等运行一会后，终端会给出以下提示：</p><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/db8feb814d8549478e7589862b0a9e50~tplv-k3u1fbpfcp-jj-mark:3024:0:0:0:q75.awebp" alt="image.png" loading="lazy"></p><p>其中，红框命令为在 <code>Master</code> 节点需要执行的初始化命令，其作用为将默认的 <code>Kubernetes</code> 认证文件拷贝进 <code>.kube</code> 文件夹内，才能默认使用该配置文件。</p><p>蓝框为需要在 <code>node</code> 节点执行的命令。作用是可以快速将 <code>Node</code> 节点加入到 <code>Master</code> 集群内。</p><h4 id="安装-flannel" tabindex="-1">安装 Flannel ​</h4><p>前面我们在配置文件中，有提到过<strong>配置Pod子网络</strong>，<code>Flannel</code> 主要的作用就是如此。<strong>它的主要作用是通过创建一个虚拟网络，让不同节点下的服务有着全局唯一的IP地址，且服务之前可以互相访问和连接</strong>。</p><p>那么 <code>Flannel</code> 作为 <code>Kubernetes</code> 的一个组件，则使用 <code>Kubernetes</code> 部署服务的方式进行安装。首先下载配置文件：</p><div class="language-sh vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">wget</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> https://raw.githubusercontent.com/coreos/flannel/v0.18.1/Documentation/kube-flannel.yml</span></span></code></pre></div><blockquote><p>在这里，如果提示你 <code>raw.githubusercontent.com</code> 无法访问或连接超时，可以尝试以下办法：</p><ol><li>去 githubusercontent.com.ipaddress.com/raw.githubu… 获取新的IP</li><li>编辑 hosts 文件，将获取的新IP直接映射到域名上</li></ol></blockquote><p>接着我们手动拉取下 <code>flannel</code> 镜像。找到编写镜像名称和版本的地方，使用 <code>docker pull</code> 手动拉取一下镜像：</p><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/a9845d5d48e9482d9cd2d8fe39d6a159~tplv-k3u1fbpfcp-jj-mark:3024:0:0:0:q75.awebp" alt="image.png" loading="lazy"></p><div class="language-sh vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">docker</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> pull</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> quay.io/coreos/flannel:v0.13.0-rc2</span></span></code></pre></div><p>等待镜像拉取结束后，可以使用 <code>kubectl apply</code> 命令加载下服务。</p><div class="language-sh vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">kubectl</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> apply</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -f</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> kube-flannel.yml</span></span></code></pre></div><h4 id="查看启动情况" tabindex="-1">查看启动情况 ​</h4><p>在大约稍后1分钟左右，我们可以使用 <code>kubectl get nodes</code> 命令查看节点的运行状态。如果 <code>STATUS = ready</code>，则代表启动成功。</p><div class="language-sh vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">kubectl</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> get</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> nodes</span></span></code></pre></div><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/f34db98ce655498f859569afce848c14~tplv-k3u1fbpfcp-jj-mark:3024:0:0:0:q75.awebp" alt="image.png" loading="lazy"></p><h3 id="node节点配置" tabindex="-1">Node节点配置 ​</h3><p><strong>在安装 <code>Node</code> 节点前，我们仍然需要操作一遍上面的 <code>基础安装</code></strong>。 <code>Node</code> 节点的地位则是负责运行服务容器，负责接收调度的。</p><p>首先第一步，还是需要先设置一下 <code>hostname</code> 为 <code>node1</code> 。在 <code>node</code> 机器上执行：</p><div class="language-sh vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">hostnamectl</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> set-hostname</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> node1</span></span></code></pre></div><h4 id="拷贝-master-节点配置文件" tabindex="-1">拷贝 Master 节点配置文件 ​</h4><p>接着将 <code>master</code> 节点的配置文件拷贝 <code>k8s</code> 到 <code>node</code> 节点。回到在 <code>master</code> 节点，使用 <code>scp</code> 命令通过 <code>SSH</code>传送文件：</p><div class="language-sh vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">scp</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> $HOME</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">/.kube/config</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> root@node的ip:~/</span></span></code></pre></div><p>随后在 <code>node</code> 节点执行以下命令，归档配置文件：</p><div class="language-sh vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">mkdir</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -p</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> $HOME</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">/.kube</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">sudo</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> mv</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> $HOME</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">/config</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> $HOME</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">/.kube/config</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">sudo</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> chown</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> $(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">id</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -u</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">:</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">$(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">id</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -g</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) $HOME</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">/.kube/config</span></span></code></pre></div><h4 id="加入-master-节点" tabindex="-1">加入 Master 节点 ​</h4><p>我们直接使用刚才在 <code>master</code> 生成的节点加入命令，在 <code>node</code> 机器上执行。让 <code>Node</code> 节点加入到 <code>master</code> 集群内：</p><div class="language-sh vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 这是一条是示例命令！！！！！！</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">kubeadm</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> join</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> 172.16.81.164:6443</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --token</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> abcdef.0123456789abcdef</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> \\</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    --discovery-token-ca-cert-hash</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> sha256:b4a059eeffa2e52f2eea7a5d592be10c994c7715c17bda57bbc3757d4f13903d</span></span></code></pre></div><p>如果刚才的命令丢了，可以在 <code>master</code> 机器上使用 <code>kubeadm token create</code> 重新生成一条命令：</p><div class="language-sh vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">kubeadm</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> token</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> create</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --print-join-command</span></span></code></pre></div><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/9b71c8a1c2734e2ba87867270357302d~tplv-k3u1fbpfcp-jj-mark:3024:0:0:0:q75.awebp" alt="image.png" loading="lazy"></p><h4 id="安装-flannel-1" tabindex="-1">安装 Flannel ​</h4><p><strong>这里和 Master 安装执行方式一样，参考同上。</strong></p><h3 id="结束语" tabindex="-1">结束语 ​</h3><p>在本章，我们从 <code>0-1</code> 部署了一套 <code>Kubernetes</code> 集群。在下一章，我们将在集群内运行我们的第一个应用。加油 💪</p><p>如果你有疑问，欢迎在评论区留言讨论。</p>`,106),p=[t];function l(h,d,k,c,o,r){return a(),i("div",null,p)}const C=s(n,[["render",l]]);export{b as __pageData,C as default};
