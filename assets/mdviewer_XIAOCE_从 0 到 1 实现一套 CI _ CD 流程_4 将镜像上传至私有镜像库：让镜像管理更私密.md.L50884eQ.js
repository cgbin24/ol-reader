import{_ as s}from"./app.BdTF1atn.js";import{j as e,i,Z as a}from"./chunks/@vue.D6nrJjhM.js";/* empty css                          */import"./chunks/@vueuse.ErXst1iV.js";const F=JSON.parse('{"title":"","description":"","frontmatter":{},"headers":[],"relativePath":"mdviewer/XIAOCE/从 0 到 1 实现一套 CI & CD 流程/4 将镜像上传至私有镜像库：让镜像管理更私密.md","filePath":"mdviewer/XIAOCE/从 0 到 1 实现一套 CI & CD 流程/4 将镜像上传至私有镜像库：让镜像管理更私密.md"}'),p={name:"mdviewer/XIAOCE/从 0 到 1 实现一套 CI & CD 流程/4 将镜像上传至私有镜像库：让镜像管理更私密.md"},t=a(`<h3 id="什么是镜像库" tabindex="-1">什么是镜像库 ​</h3><p>字面意思，镜像库就是集中存放镜像的一个文件服务。镜像库在 <code>CI/CD</code> 中，又称 <code>制品库</code> 。构建后的产物称为<strong>制品</strong>，制品则要放到<strong>制品库</strong>做<strong>中转和版本管理</strong>。常用平台有<strong>Nexus</strong>，<strong>Jfrog</strong>，<strong>Harbor</strong>或其他对象存储平台。</p><p>在这里，我们选用 <code>Nexus3</code> 作为自己的镜像库。因为其稳定，性能好，免费，部署方便，且支持类型多，是许多制品库的首选选型。</p><h3 id="部署-nexus-服务" tabindex="-1">部署 Nexus 服务 ​</h3><p>在部署 <code>Nexus</code> 之前，需要先下载 <code>Nexus</code> 的安装包（这里需要另外找个托管服务）</p><div class="language-sh vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">wget</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> https://dependency-fe.oss-cn-beijing.aliyuncs.com/nexus-3.29.0-02-unix.tar.gz</span></span></code></pre></div><p>下载完成后，解压安装包</p><div class="language-sh vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">tar</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -zxvf</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> ./nexus-3.29.0-02-unix.tar.gz</span></span></code></pre></div><p>解压后，我们可以看到有2个文件夹。分别是 <code>nexus-3.29.0-02</code> 和 <code>sonatype-work</code> 。其中，<code>nexus-3.29.0-02</code> 是<code>nexus</code>主程序文件夹，<code>sonatype-work</code> 则是数据文件。</p><h3 id="启动-nexus" tabindex="-1">启动 Nexus ​</h3><p>我们进入 <code>nexus-3.29.0-02</code> 下面的 <code>bin</code> 目录，这里就是 <code>nexus</code> 的主命令目录。我们在 <code>bin</code> 目录下，执行 <code>./nexus start</code> 命令即可启动 <code>nexus</code> ：</p><div class="language-sh vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">./nexus</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> start</span></span></code></pre></div><blockquote><p><code>nexus</code> 还支持停止，重启等命令。可以在 <code>bin</code> 目录下执行 <code>./nexus help</code> 查看更多命令</p></blockquote><p>由于 <code>nexus</code> 默认服务端口是 <code>8081</code>，稍后我们还需要给镜像库访问单独开放一个 <code>8082</code> 端口。这里将 <code>8081</code>，<code>8082</code> 端口添加到防火墙放行规则内（没开防火墙则可以略过）：</p><div class="language-sh vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">firewall-cmd</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --zone=public</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --add-port=8081/tcp</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --permanent</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">firewall-cmd</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --zone=public</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --add-port=8082/tcp</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --permanent</span></span></code></pre></div><p>打开浏览器地址栏，访问 <code>IP:8081</code> 。启动时间比较长，需要耐心等待。在 <code>Nexus</code> 启动后，会进入这个欢迎页面：</p><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/ac8b649b9fd244fcb27f63ac0760be7d~tplv-k3u1fbpfcp-jj-mark:3024:0:0:0:q75.awebp" alt="image.png" loading="lazy"></p><h3 id="配置-nexus" tabindex="-1">配置 Nexus ​</h3><p>进入欢迎页后，点击右上角的登录，会打开登录框。这里需要我们输入 <code>默认管理员密码</code> 进行初始化配置。</p><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/ea453f8c04c246178c6fccb694e0f82b~tplv-k3u1fbpfcp-jj-mark:3024:0:0:0:q75.awebp" alt="image.png" loading="lazy"></p><p>可以在这里找到：</p><div class="language-sh vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">cat</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> /opt/nexus/sonatype-work/nexus3/admin.password</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 0ee35fa5-d773-432b-8e76-6c10c940ccd9</span></span></code></pre></div><p>将文件中获取到的密码输入进去，登录用户名是 <code>admin</code> 。</p><p>接着是修改新密码。修改后，会进入下图这一步。这一步的意思是<strong>是否开启匿名访问</strong>。匿名访问是指：<strong>我们在没有登录的情况下，拉取（推送）制品到制品库，都算匿名访问</strong>。这是个很便捷，也是个危险的行为。</p><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/f9f1668f32d54f28a9221ac9a49764d3~tplv-k3u1fbpfcp-jj-mark:3024:0:0:0:q75.awebp" alt="image.png" loading="lazy"></p><p>例如，这个制品库也支持 <code>node</code> 的 <code>npm</code> 私有库。那么我们在没有 <code>npm login</code> 登录这个制品库之前，就可以进行 <code>npm install npm publish</code>，其实是不太安全的。那么任何一个知道制品库地址的人，都可以任意进行推送和获取资源。</p><p>这里我们为了测试，可以先允许开启匿名访问。选择 <code>Enable anonymous access</code> ，点击下一步。</p><h3 id="创建一个-docker-私服" tabindex="-1">创建一个 Docker 私服 ​</h3><p>登录完成后，点击页面头部导航栏的齿轮图标，选择左侧菜单中的 <code>Repositories</code> ，点击 <code>Create repository</code> 。</p><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/43bd0b01200a42c99d1c9e9e53b4b417~tplv-k3u1fbpfcp-jj-mark:3024:0:0:0:q75.awebp" alt="image.png" loading="lazy"></p><p>点击后，我们可以看到一个列表，这就是 <code>Nexus</code> 所支持的制品库类型。其中有我们要使用的 Docker ，也有我们熟悉的 Npm 。我们在里面找到 <code>Docker</code> ：</p><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/34f6c67c6ac847689802cdd7c30ead0b~tplv-k3u1fbpfcp-jj-mark:3024:0:0:0:q75.awebp" alt="image.png" loading="lazy"></p><p>但是 <code>Docker</code> 有三种，该选哪个呢？</p><h4 id="选择制品库的类型" tabindex="-1">选择制品库的类型 ​</h4><p>在 <code>nexus</code> 中，制品库一般分为以下三种类型：</p><ul><li>proxy: 此类型制品库原则上<strong>只下载，不允许用户推送</strong>。可以理解为<strong>缓存外网制品的制品库</strong>。例如，我们在拉取 <code>nginx</code> 镜像时，如果通过 <code>proxy</code> 类型的制品库，则它会去创建时配置好的外网 <code>docker</code> 镜像源拉取（有点像 <code>cnpm</code> ）到自己的制品库，然后给你。第二次拉取，则不会从外网下载。起到 <code>内网缓存</code> 的作用。</li><li>hosted：此类型制品库和 <code>proxy</code> 相反，原则上 <code>只允许用户推送，不允许缓存</code>。这里只存放自己的私有镜像或制品。</li><li>group：此类型制品库可以将以上两种类型的制品库组合起来。组合后只访问 <code>group</code> 类型制品库，就都可以访问。</li></ul><p>在这里，我们其实不需要<strong>缓存外网镜像</strong>，那么我们只需要 <code>hosted</code> 即可。选择 <code>docker (hosted)</code>。</p><p>我们将启动 <code>Nexus</code> 镜像时，配置好的 <code>Docker</code> 端口（预留了一个 <code>8082</code> 端口）填入 <code>HTTP</code> 输入框内。这里可以先允许匿名拉取镜像。</p><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/6712006470574784a2c1fcd79042fd7f~tplv-k3u1fbpfcp-jj-mark:3024:0:0:0:q75.awebp" alt="image.png" loading="lazy"></p><p>填写完成后，点击最下方的 <strong>Create repository</strong>，保存创建。</p><h4 id="给镜像库添加访问权限" tabindex="-1">给镜像库添加访问权限 ​</h4><p>在我们创建好镜像库后，还需要配置一步访问权限才可以。</p><p>找到页面头部导航栏的 <code>齿轮</code> 图标，选择左侧菜单中的 <code>Realms</code> 。找到右边的 <code>Docker Bearer Token Realm</code> ，将其添加到右边的 <code>Active</code> 内，保存即可。</p><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/87d3da9dd99b4384a4939cbba44e6559~tplv-k3u1fbpfcp-jj-mark:3024:0:0:0:q75.awebp" alt="image.png" loading="lazy"></p><h4 id="查看获取镜像库地址" tabindex="-1">查看获取镜像库地址 ​</h4><p>找到我们刚刚创建的制品，点击上面的 <code>copy</code> ，查看镜像库地址。</p><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/683e82a9e29b4e4ca2ad9ee2ae5db1d5~tplv-k3u1fbpfcp-jj-mark:3024:0:0:0:q75.awebp" alt="image.png" loading="lazy"></p><h3 id="登录制品库" tabindex="-1">登录制品库 ​</h3><p>私服建设完成后，如果私服对外访问地址为HTTP的话，还需要在服务器配置一下才可以使用（HTTPS不需要配置）。</p><p>找到 <code>daemon.json</code> 文件，该文件描述了当前 <code>docker</code> 配置的镜像加速地址，和配置过的私服地址。</p><div class="language-sh vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">vi</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> /etc/docker/daemon.json</span></span></code></pre></div><p>找到 <code>insecure-registries</code> 字段，如果不存在就自己添加一个。值是数组类型，将你的制品库地址填写上去。例如：</p><div class="language-json vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">json</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  &quot;insecure-registries&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> : [</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">    &quot;172.16.81.7:8082&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  ],</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><blockquote><p>注意，nexus 显示的镜像库端口为 nexus 服务端口，要替换为自己配置的端口才有效。</p></blockquote><p>保存并退出，重启 Docker</p><div class="language-sh vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">systemctl</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> restart</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> docker</span></span></code></pre></div><p>接着使用 <code>docker login</code> 命令尝试登录：</p><div class="language-sh vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">docker</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> login</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> 服务IP:端口</span></span></code></pre></div><p>如果提示：<strong>Login Succeeded 则代表登录成功</strong>。</p><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/ec38d4df96944aa29c2e32839907207d~tplv-k3u1fbpfcp-jj-mark:3024:0:0:0:q75.awebp" alt="image.png" loading="lazy"></p><h3 id="推送镜像到制品库" tabindex="-1">推送镜像到制品库 ​</h3><p>在完成镜像库配置后，我们就可以使用 Jenkins 推送自己的镜像到镜像库了。我们找到 Jenkins 任务中设置 Shell 的编辑框，添加一条推送镜像的命令进去：</p><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/f993a2742c2347b89bfd8e97df6cb516~tplv-k3u1fbpfcp-jj-mark:3024:0:0:0:q75.awebp" alt="image.png" loading="lazy"></p><p><strong>注意！</strong></p><p><code>docker</code> 在推送一个镜像时，<strong>镜像的 Tag (名称:版本号) 开头必须带着镜像库的地址，才可以推送到指定的镜像库</strong>。例如 <code>jenkins-test</code> 是不能推送到镜像库的。而 <code>172.16.81.7:8082/jenkins-test</code> 则可以推送到镜像库。</p><p>那我们怎么才能推送镜像上去呢？我们可以重新制作一份带镜像库地址的镜像。找到 Jenkins 的 Shell 编辑框，j将构建的 Shell 脚本修改为以下内容：</p><div class="language-sh vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">#!/bin/sh -l</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">npm</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> install</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --registry=https://registry.npm.taobao.org</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">npm</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> run</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> build</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">docker</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> build</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -t</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> 172.16.81.7:8082/jenkins-test</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> .</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">docker</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> push</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> 172.16.81.7:8082/jenkins-test</span></span></code></pre></div><p>这里将<strong>构建的镜像名称加了镜像库的前缀</strong>，推送镜像也是一样，这样才可以将镜像推送到指定镜像库。保存后并重新构建一次。</p><p>构建后我们发现，报错了。提示信息是没有权限推送</p><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/da21fa661b8047c49cd6fb4e8e9fb81e~tplv-k3u1fbpfcp-jj-mark:3024:0:0:0:q75.awebp" alt="image.png" loading="lazy"></p><h4 id="利用凭据给-shell-注入镜像库用户名密码" tabindex="-1">利用凭据给 Shell 注入镜像库用户名密码 ​</h4><p>没有权限怎么办呢？我们可以使用 <code>docker login</code> 在 <code>shell</code> 脚本里面登录下。想直接在命令里写入用户名和密码，可以直接加 <code>-u 用户名 -p 密码</code> 即可。例如：</p><div class="language-sh vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">docker</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> login</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -u</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;用户名&quot;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -p</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;密码&quot;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> 172.16.81.7:8082</span></span></code></pre></div><p>但这样，我们需要在命令里面写死用户名和密码，无论是安全和友好性上，都是不太合适的。这里我们可以借助 Jenkins 的凭据功能，添加一条用户名密码凭据，然后利用 Shell 变量写入在终端内。</p><p>找到任务的设置界面 =&gt; 构建环境 =&gt; 勾选 Use secret text(s) or file(s) =&gt; 找到左下角的新增按钮，选择 <code>Username and password (separated)</code></p><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/4d4e67f877da446589f4104820e38b45~tplv-k3u1fbpfcp-jj-mark:3024:0:0:0:q75.awebp" alt="image.png" loading="lazy"></p><p>打开后，我们可以添加一条凭据。点击凭据字段下面的添加，弹出以下弹窗，在这里填入你的用户名和密码。ID为凭据名称，描述随意。</p><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/a76671ab85704a52a147dcf136837afa~tplv-k3u1fbpfcp-jj-mark:3024:0:0:0:q75.awebp" alt="image.png" loading="lazy"></p><p>添加后，返回下图模块。在这里选择你刚才添加的凭据，用户名变量可以起名为 <code>DOCKER_LOGIN_USERNAME</code> ，密码可以起名为 <code>DOCKER_LOGIN_PASSWORD</code> 。</p><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/d7e9c346322945ceb7570445308891f2~tplv-k3u1fbpfcp-jj-mark:3024:0:0:0:q75.awebp" alt="image.png" loading="lazy"></p><p>接着找到下面的构建，找到 <code>docker login</code> 命令，将我们保存的用户名和密码变量填写进去：</p><div class="language-sh vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">docker</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> login</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -u</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> $DOCKER_LOGIN_USERNAME </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">-p</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> $DOCKER_LOGIN_PASSWORD </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">172.16.81.7:8082</span></span></code></pre></div><p>接着保存并构建，提示权限通过，构建成功</p><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/34cb09e00869451d8eb9f2222077e54b~tplv-k3u1fbpfcp-jj-mark:3024:0:0:0:q75.awebp" alt="image.png" loading="lazy"></p><h3 id="如何推送已有的镜像到仓库呢" tabindex="-1">如何推送已有的镜像到仓库呢？ ​</h3><p>上面是推送我们现场编译的镜像，镜像名称都可以一条龙约定好。可是面对 load /pull 进来的镜像，我们如何推送到自己的镜像库呢？</p><p>这里可以使用 <code>docker tag</code> 命令给已有的镜像打个标签。在打新Tag时可以在Tag头部加入镜像库地址。如下面格式。</p><div class="language-sh vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># docker tag &lt;镜像ID&gt;/&lt;镜像名称&gt; 新镜像名称[:版本]</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">docker</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> tag</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> bd695e3e4317</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> 172.16.81.150:8082/local/jenkins</span></span></code></pre></div><blockquote><p>查看服务器上的<code>docker</code>镜像列表，可以使用 <code>docker images</code> 查看</p></blockquote><p>这样，就可以重新打一个全新的tag，实现 <code>重命名</code> 功能。</p><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/2de59d65e6544b1a8be6495fec3709cf~tplv-k3u1fbpfcp-jj-mark:3024:0:0:0:q75.awebp" alt="image.png" loading="lazy"></p><p>接着我们使用 <code>docker push</code> 命令就可以进行推送了：</p><div class="language-sh vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">docker</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> push</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> 172.16.81.150:8082/local/jenkins</span></span></code></pre></div><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/9f4dcdec474a45fca405b2d723e8d1d5~tplv-k3u1fbpfcp-jj-mark:3024:0:0:0:q75.awebp" alt="image.png" loading="lazy"></p>`,94),n=[t];function c(d,o,l,h,k,g){return i(),e("div",null,n)}const y=s(p,[["render",c]]);export{F as __pageData,y as default};
