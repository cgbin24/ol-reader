import{_ as s}from"./app.BdTF1atn.js";import{j as i,i as a,Z as n}from"./chunks/@vue.D6nrJjhM.js";/* empty css                          */import"./chunks/@vueuse.ErXst1iV.js";const A=JSON.parse('{"title":"","description":"","frontmatter":{},"headers":[],"relativePath":"mdviewer/XIAOCE/JavaScript 函数式编程实践指南/2 前端视角看编程范式：代码组织の魔法.md","filePath":"mdviewer/XIAOCE/JavaScript 函数式编程实践指南/2 前端视角看编程范式：代码组织の魔法.md"}'),p={name:"mdviewer/XIAOCE/JavaScript 函数式编程实践指南/2 前端视角看编程范式：代码组织の魔法.md"},l=n(`<h3 id="前端视角看编程范式" tabindex="-1">前端视角看编程范式 ​</h3><p>在 JS 世界中，以下三种编程范式是大家一定要了解的：</p><ul><li><p>命令式编程</p></li><li><p>面向对象编程</p></li><li><p>函数式编程</p></li></ul><p>对于许多前端同学来说，入门前端的第一步，接触到的基本都是命令式编程。</p><p>紧接着，随着 JS 知识的精进，你会渐渐地进入面向对象的世界，“模拟继承”、“原型与原型链”是许多同学学习 JS 遇到的第一个系统性难点知识。</p><p>然后，你可能会接触到一些基于 Class 来构建自己组件系统的热门框架（比如旧版本的 React），这将强化你对面向对象风格的熟悉和认同。</p><p><strong>于是，左手命令式、右手面向对象，偶尔（或从不）引入函数式编程的某些特性，这成为了许多同学的前端入行起手式。</strong></p><p>这也解释了为什么对于不少已经上手业务开发的前端同学来说，函数式编程仍然是个神秘而未知的东西。</p><p><strong>对于未知事物，如果我们单纯凭借干巴巴的概念定义去认识它，这需要极强的悟性和心性。</strong></p><p><strong>但如果能够借助对已知事物的理解，一步一步类比推理出对未知事物的认知，我们的学习曲线就将平滑得多，吸收知识的效率也将大大提升。</strong></p><p>在我们已知的编程范式中，面向对象固然经典，但在没有系统学习过函数式编程的情况下，我们很难对这两者进行深入、透彻的对比。因此我将把 OOP VS FP 的辨析放在小册的后半程。</p><p>本节，在整本小册的开篇，我们首先从大家最为熟悉的命令式编程入手，将命令式的思维模式与函数式进行类比，帮助大家借助已知去认识未知、从感性上建立对函数式编程的宏观理解。</p><h3 id="命令式-vs-函数式-过程思维-vs-结果思维" tabindex="-1">命令式 vs 函数式：“过程思维” vs “结果思维” ​</h3><p>命令式编程关注的是一系列具体的执行步骤，当你想要使用一段命令式的代码来达到某个目的，你需要一步一步地告诉计算机应该“怎样做”。</p><p>与命令式编程严格对立的其实是“声明式编程”：不关心“怎样做”，只关心“得到什么”。</p><p>函数式编程是声明式编程的一种。</p><p>具体到范式表达上，函数式编程总是需要我们去思考这样两个问题：</p><ul><li><strong>我想要什么样的输出？</strong></li><li><strong>我应该提供什么样的输入？</strong></li></ul><p>对于这两套思维模式的差异，我们不妨借助生活中的吃饭场景来理解。</p><h3 id="举个生活例子🌰-番茄🍅炒蛋🥚的故事" tabindex="-1">举个生活例子🌰：番茄🍅炒蛋🥚的故事 ​</h3><p>有一天韩梅梅突然很想吃番茄炒蛋，为了吃到这口番茄炒蛋，她想到了命令式做菜和函数式做菜两种思路：</p><h4 id="命令式做菜-让我来告诉你如何炒出番茄炒蛋" tabindex="-1">命令式做菜：让我来告诉你如何炒出番茄炒蛋 ​</h4><p>如果韩梅梅选择了命令式做菜，那么她这时会喊来打游戏打到一半的李雷，把他推进厨房，并按顺序发出如下命令：</p><ol><li>你要把鸡蛋敲开打散，番茄切块备用</li><li>锅里倒油，油热后倒入蛋液</li><li>鸡蛋凝固后，放入西红柿开炒</li><li>加调味，再炒</li><li>大火收汁</li><li>关火</li><li>装盘</li><li>......</li></ol><p>命令式做菜要求韩梅梅必须对做菜的过程了如指掌，每一个步骤她都需要事无巨细地关注到。</p><p><strong>这些具体步骤组成的命令序列，就是一段命令式程序。</strong></p><h4 id="函数式做菜-不关心菜谱-只关心输入与输出" tabindex="-1">函数式做菜：不关心菜谱，只关心输入与输出 ​</h4><p>如果韩梅梅选择了函数式做菜，那么她的体验就会轻松得多。</p><p>同样是喊来打游戏打到一半的李雷，她可以考虑：</p><ol><li><p>从冰箱摸3个番茄和2个鸡蛋，交给李雷，让李雷去厨房想办法弄出这道菜</p></li><li><p>给李雷20块钱，让他去楼下买一份番茄炒蛋上来</p></li><li><p>当然，她也可以打开自己手机里的丑团外卖下一个订单，这样李雷的游戏血条就保住了</p></li></ol><p>此时，对于韩梅梅来说，生产番茄炒蛋的过程就像一个黑盒：</p><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/102ac7e08c014456821b14e79a2a1a07~tplv-k3u1fbpfcp-jj-mark:3024:0:0:0:q75.awebp" alt="1"></p><p>无论是李雷冒着炸厨房的风险试验出这道菜，还是李雷拿着20块钱到楼下买这道菜，亦或是厨师做好菜交给丑团小哥、丑团小哥送上门的这些具体细节，对于韩梅梅来说都是不需要感知的。</p><p>在函数式做菜的过程中，韩梅梅只需要关注两件事情：</p><ul><li><p><strong>我想要什么样的输出？</strong> （一盘番茄炒蛋）</p></li><li><p><strong>我应该提供什么样的输入？</strong> （食材或者钱💰）</p></li></ul><h3 id="举个-coding-例子🌰-员工信息筛选工作流" tabindex="-1">举个 Coding 例子🌰：员工信息筛选工作流 ​</h3><p>接下来我们用一个编码案例，来对两者的差异做更进一步的阐述。</p><p>考虑这样一个场景：</p><p>我们有一个员工信息数据库。现在为了对年龄大于等于 24 岁的员工做生涯指导，需要拉出一张满足条件的员工信息清单，要求清单中每一条信息中间用逗号分隔，并按照年龄升序展示。</p><p>把这个需求简单梳理一下，分三步走：</p><p>对列表进行排序</p><ol><li><p>筛选出 <code>&gt;= 24</code> 岁这个区间内的员工列表</p></li><li><p>针对该列表中的每一条员工数据历史，保存到 <code>logText</code> 中</p></li><li><p>当然，你也可以交换步骤1和步骤2的顺序，这样可以缩小排序范围，提高排序效率。</p></li></ol><p>但就编码内容来说，不管是以什么样的顺序来执行这三个步骤，该写的代码是一点也少不了。</p><p>接下来我就按照 <code>1-&gt;2-&gt;3</code> 这个顺序来给大家写写看。</p><p>按照命令式编程的脑回路来实现，我们不难想到用循环来做。命令式编程的代码如下所示：</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 这里我mock了一组员工信息作为原始数据，实际处理的数据信息量应该比这个大很多</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> peopleList</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> [</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    name: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;John Lee&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    age: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">24</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    career: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;engineer&#39;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  },</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    name: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;Bob Chen&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    age: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">22</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    career: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;engineer&#39;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  },</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    name: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;Lucy Liu&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    age: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">28</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    career: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;PM&#39;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  },</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    name: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;Jack Zhang&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    age: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">26</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    career: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;PM&#39;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  },</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    name: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;Yan Xiu&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    age: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">30</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    career: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;engineer&#39;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">]</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> len</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> peopleList.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">length</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 对员工列表按照年龄【排序】</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">for</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">let</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> i</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;i</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">len;i</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">++</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  // 内层循环用于完成每一轮遍历过程中的重复比较+交换</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  for</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">let</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> j</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;j</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">len</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;j</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">++</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // 若相邻元素前面的数比后面的大</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(peopleList[j].age </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> peopleList[j</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">+</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">].age) {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">      // 交换两者</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      [peopleList[j], peopleList[j</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">+</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">]] </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> [peopleList[j</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">+</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">], peopleList[j]]</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">let</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> logText </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;&#39;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">for</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">let</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> i</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">; i</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">len; i</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">++</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> person</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> peopleList[i]</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  // 【筛选】出年龄符合条件的</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">( person.age </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 24</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> ) {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // 从数组中【提取】目标信息到 logText</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> perLogText</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> \`\${</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">person</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">.</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">name</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">}&#39;s age is \${</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">person</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">.</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">age</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">}\`</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(i</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">!==</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">len</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      logText </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">+=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> \`\${</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">perLogText</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">},\`</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    } </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">else</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      logText </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">+=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> perLogText</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(logText)</span></span></code></pre></div><p>在这段代码中，我们逐个实现了排序、筛选、信息提取这三大块逻辑。</p><p>下面再来看看函数式的解法：</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 定义筛选逻辑</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> ageBiggerThan24</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">person</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> person.age </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 24</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 定义排序逻辑</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> smallAgeFirst</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">a</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">b</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> a.age </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> b.age</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 定义信息提取逻辑</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> generateLogText</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">person</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> perLogText</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> \`\${</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">person</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">.</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">name</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">}&#39;s age is \${</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">person</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">.</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">age</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">}\`</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> perLogText</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> logText</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> peopleList.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">filter</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(ageBiggerThan24)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">                      .</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">sort</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(smallAgeFirst)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">                      .</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">map</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(generateLogText)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">                      .</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">join</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;,&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(logText)</span></span></code></pre></div><p>这段代码在执行结果上和命令式代码是一样的，但内容却非常简洁，也具有更强的可读性。</p><p>作为用户，我不需要了解每个函数内部都执行了哪些语句，仅仅通过函数名就可以推断出来这个调用链做了哪些事情。</p><p>此外，声明式代码定义的 <code>ageBiggerThan24</code>、 <code>sortByAge</code>、<code>getLogText</code>等方法，是可以被复用的。</p><p>而命令式代码中的比大小、排序、字符串处理等逻辑，更像是“一锤子买卖”，执行完也就过去了，日后想要实现相同的逻辑，只能靠复制粘贴。</p><h3 id="思考-函数式编程是怎样解决问题的" tabindex="-1">思考：函数式编程是怎样解决问题的 ​</h3><p>有同学这时候可能会纳闷儿了：这段代码不就是几个简单的数组方法调用么？这也叫函数式编程？就这？</p><p>首先，尽管对于一些“原教旨主义者”来说，数组方法的函数式确实不够彻底——因为这些函数仍然是作为数组对象的实例方法存在的，尚存一些 OOP 的”余孽“。</p><p>但 JS 本身就是多范式的语言，对 JS 来说，<strong>数组方法确实是非常重要的函数式编程工具</strong>。这一点我们在后续的章节里还会反复验证。</p><p>接下来我们看回楼上的示例代码，它的背后表达了一种与命令式编程截然相反的脑回路：</p><p><strong>以“输入”和“输出”为轴心，来组织程序</strong>。</p><p>具体到代码里来说，我们首先可以根据需求明确输入输出：</p><p>输入是一个 <code>peopleList</code>（员工列表），而输出是一个 <code>logText</code>（逗号分隔的字符串）。</p><p>以输入为起点，输出为终点，我们就可以拉起来这样一条数据转换的“流水线”：</p><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/b6625bce5f774b088ef71cc6e41f5ecd~tplv-k3u1fbpfcp-jj-mark:3024:0:0:0:q75.awebp" alt="2"></p><p>此时中间的 Operation 对我们来说还是一个黑盒，但我们可以通过进一步分析数据的变换来明确出黑盒中的函数组合：</p><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/4275ed8ed75e493090b739a16a7f095e~tplv-k3u1fbpfcp-jj-mark:3024:0:0:0:q75.awebp" alt="3"></p><p>对于流水线中的每一个步骤、每一个函数调用，我们<strong>仍然不必去关注其内部的执行细节，只需要关注函数的输入与输出。</strong></p><p>每一个函数都是一个逻辑块，每一个逻辑块都代表着一次变换。</p><p>在函数式编程的代码组织模式下，我们关注的不再是具体逻辑的实现，而是<strong>对“变换”的组合。</strong></p><p>这个过程其实和工厂生产果汁的过程很相似。</p><p>我们放几个橙子🍊到流水线的入口，它会经历去皮、压榨、滤渣等几个环节。</p><p>函数式编程中的“函数”就像流水线上的一个个工序，这些工序吃进去原材料，吐出目标产物。</p><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/735d36ff233d4e9f87405e9e280ebb40~tplv-k3u1fbpfcp-jj-mark:3024:0:0:0:q75.awebp" alt="4"></p><p>作为一个流水线工人，我不需要知道每一个工序的执行细节，我只要能把不同工序的机器组装到一起就可以了。</p><h3 id="小结" tabindex="-1">小结 ​</h3><p>命令式编程对许多同学来说，是真正意义上的“入行起手式”。</p><p>本节我们以命令式编程为引子，意在帮助大家认识函数式编程 <strong>“结果导向”</strong> 的思维方式、以及 <strong>【抽象+组合】</strong> 的行为方法论。</p><p>在小册的调研阶段，我注意到不少同学对于范式的认识和思考比较欠缺——不仅仅对于函数式编程缺乏了解，甚至对于自己每天都在使用的命令式、面向对象等范式也无法给出系统的理解，最终导致在实践和面试中都吃了很多亏。</p><p>因此，对于范式相关的基础知识，我会讲得比较详细。也希望大家在理解这些内容之后，能够去主动思考一些平时没空去思考、但是对自己真正有益的问题。</p><p>通过本节的学习，相信你不仅能够建立对函数式编程的初步认识，更能够深化自己对命令式编程的理解。</p><p>最重要的是，<strong>你将开始主动去思考一些略高于编码本身的问题</strong>。而这样的思考，将会贯穿我们整本小册。</p><p>下一节，我们将进入正题，从函数式编程的基本功开始，一窥它的全貌。</p><p>（阅读过程中有任何想法或疑问，或者单纯希望和笔者交个朋友啥的，欢迎大家添加我的微信xyalinode与我交流哈~）</p>`,82),h=[l];function k(t,e,E,r,g,d){return a(),i("div",null,h)}const C=s(p,[["render",k]]);export{A as __pageData,C as default};
