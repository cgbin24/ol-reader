import{_ as e}from"./app.BdTF1atn.js";import{j as i,i as s,Z as p}from"./chunks/@vue.D6nrJjhM.js";/* empty css                          */import"./chunks/@vueuse.ErXst1iV.js";const u=JSON.parse('{"title":"","description":"","frontmatter":{},"headers":[],"relativePath":"mdviewer/XIAOCE/从 0 到 1 实现一套 CI & CD 流程/3 使用 Jenkins 构建镜像：将你的应用打包成镜像.md","filePath":"mdviewer/XIAOCE/从 0 到 1 实现一套 CI & CD 流程/3 使用 Jenkins 构建镜像：将你的应用打包成镜像.md"}'),a={name:"mdviewer/XIAOCE/从 0 到 1 实现一套 CI & CD 流程/3 使用 Jenkins 构建镜像：将你的应用打包成镜像.md"},t=p(`<h3 id="前言" tabindex="-1">前言 ​</h3><p>在上一章中，我们安装了 <code>Docker</code> 和 <code>Jenkins</code>，并实现了将两者打通。在这一章中，我们则使用 <code>Jenkins</code> 集成 <code>Git</code> 来构建 <code>Docker</code> 镜像，为后面的部署准备镜像资源。</p><h3 id="_1-安装-nodejs-环境" tabindex="-1">1. 安装 Nodejs 环境 ​</h3><p>在上一章，我们其实并没有在服务端安装 <code>Node</code> 环境。如果想要安装 <code>Node</code> 环境，有以下两个办法：</p><ul><li>源码编译：这种方式是将 <code>Node</code> 源码拉下来后，在服务器端编译完成后才可以使用。时间比较长，流程也略复杂</li><li>使用 <code>Jenkins Plugin</code> 中 <code>NodeJS</code> 插件自动配置安装</li></ul><p>在这里，我们可以选择第二种方式来安装，既方便又省力。</p><p>我们打开 <code>Jenkins</code> 首页，找到左侧的<strong>系统配置 =&gt; 插件管理 =&gt; 可选插件</strong>，搜索 <code>Node</code> 。选中 <code>NodeJS</code> 后，点击左下角的 <code>直接安装</code> 开始安装插件</p><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/af15b14b65be4b38bf87af45e5d43355~tplv-k3u1fbpfcp-jj-mark:3024:0:0:0:q75.awebp" alt="image.png"></p><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/f3a9417b4dd345e3af0e472c1dbc5382~tplv-k3u1fbpfcp-jj-mark:3024:0:0:0:q75.awebp" alt="image.png"></p><p>等待安装完毕后，返回 <code>Jenkins</code> 首页。找到 <strong>Global Tool Configuration =&gt; NodeJS =&gt; 新增NodeJS</strong></p><p>接着回到 <code>Jenkins</code> 首页，找到左侧的 <code>系统配置</code> ，选择 <code>全局工具配置</code></p><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/b4d011a030654fdcba23410206ceb96b~tplv-k3u1fbpfcp-jj-mark:3024:0:0:0:q75.awebp" alt="image.png"></p><p>找到下面的 <code>NodeJS</code> ，点击 <code>NodeJS</code> 安装，选择相应的版本填写信息保存即可。</p><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/c88a0f1aca984f4e8d7a48c275444a13~tplv-k3u1fbpfcp-jj-mark:3024:0:0:0:q75.awebp" alt="image.png"></p><h4 id="如何使用" tabindex="-1">如何使用 ​</h4><p>那我们在任务中如何使用呢？我们只需要在任务的<strong>配置</strong>中，找到<strong>构建环境</strong>，选中 <code>Provide Node &amp; npm bin/ folder to PATH</code> ，选择刚才配置好的 <code>NodeJS</code> 即可。</p><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/18178ea08b724669b9138035e970b0cd~tplv-k3u1fbpfcp-jj-mark:3024:0:0:0:q75.awebp" alt="image.png"></p><p>第一次执行会下载对应的 <code>Node</code> 版本，后续不会下载。</p><h3 id="_2-使用-ssh-协议集成-git-仓库源" tabindex="-1">2. 使用 SSH 协议集成 Git 仓库源 ​</h3><p>这一步，我们使用 <code>Jenkins</code> 集成外部 <code>Git</code> 仓库，实现对真实代码的拉取和构建。在这里，我们选用 Gitee 作为我们的代码源 （<strong>没有打广告，单纯觉得 Gitee 教学方便</strong>）。 这里准备一个 <code>vue-cli</code> 项目来演示构建。</p><h4 id="_2-1-生成公钥私钥" tabindex="-1">2.1 生成公钥私钥 ​</h4><p>首先，我们先来配置公钥和私钥。这是 <code>Jenkins</code> 访问 <code>Git</code> 私有库的常用认证方式。我们可以使用 <code>ssh-keygen</code> 命令即可生成公钥私钥。在本地机器执行生成即可。这里的邮箱可以换成你自己的邮箱：</p><div class="language-sh vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">ssh-keygen</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -t</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> rsa</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -C</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;janlay884181317@gmail.com&quot;</span></span></code></pre></div><p>执行后，会遇到第一步步骤： <code>Enter file in which to save the key</code> 。</p><p>这一步是询问你要将公钥私钥文件放在哪里。默认是放在 <code>~/.ssh/id_rsa</code> 下，当然也可以选择输入你自己的路径。一路回车即可。</p><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/e18113ddac8546fd853909226c3e420c~tplv-k3u1fbpfcp-jj-mark:3024:0:0:0:q75.awebp" alt="image.png"></p><p>结束后，你会得到两个文件。分别是 <code>xxx</code> 和 <code>xxx.pub</code>。</p><p>其中，<code>xxx</code> 是<strong>私钥文件</strong>，<code>xxx.pub</code> 是对应的<strong>公钥文件</strong>。我们<strong>需要在 <code>Git</code> 端配置公钥，在 <code>Jenkins</code> 端使用私钥与 <code>Git</code> 进行身份校验</strong>。</p><h4 id="_2-2-在-gitee-配置公钥" tabindex="-1">2.2 在 Gitee 配置公钥 ​</h4><p>在 <code>Gitee</code> 中，如果你要配置公钥有2种方式：仓库公钥 和 个人公钥。<strong>其中，如果配置了仓库公钥，则该公钥只能对配置的仓库进行访问。如果配置了个人公钥，则账号下所有私有仓库都可以访问</strong>。</p><p>这里我们就以配置个人公钥为例子。首先打开右上角的<strong>设置</strong> ，点击下面的 <strong>安全设置 =&gt; SSH公钥</strong></p><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/95182328abdf49aa939f064f32adcd48~tplv-k3u1fbpfcp-jj-mark:3024:0:0:0:q75.awebp" alt="image.png"></p><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/dae8c76538eb4ea982da0a8b728a2506~tplv-k3u1fbpfcp-jj-mark:3024:0:0:0:q75.awebp" alt="image.png"></p><p>在下方有个添加公钥，填入信息即可。</p><p>其中的标题为公钥标题，这里可以自定义标题；公钥则为刚才生成的 <code>xxx.pub</code> 文件。使用 <code>cat</code> 命令查看下文件内容，将内容填入输入框并保存。接着去 <code>Jenkins</code> 端配置<strong>私钥</strong></p><div class="language-sh vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">cat</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> xxx.pub</span></span></code></pre></div><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/5f1ea3af56074ddca2c63f6d96140f55~tplv-k3u1fbpfcp-jj-mark:3024:0:0:0:q75.awebp" alt="image.png"></p><h4 id="_2-3-在-jenkins-配置私钥" tabindex="-1">2.3 在 Jenkins 配置私钥 ​</h4><p>回到 <code>Jenkins</code>。在 <code>Jenkins</code> 中，<code>私钥/密码</code> 等认证信息都是以 <code>凭证</code> 的方式管理的，所以可以做到全局都通用。 我们可以在配置任务时，来添加一个自己的凭证。点击项目的 配置，依次找到 <strong>源码管理 =&gt; Git =&gt; Repositories</strong></p><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/bbb0b11f177948399833587cf654f260~tplv-k3u1fbpfcp-jj-mark:3024:0:0:0:q75.awebp" alt="image.png"></p><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/c159aff675614ba2b23009ca1db7ee2d~tplv-k3u1fbpfcp-jj-mark:3024:0:0:0:q75.awebp" alt="image.png"></p><p>这里的 <code>Repository URL</code> 则是我们的仓库地址， <code>SSH</code> 地址格式为 <code>git@gitee.com:xxx/xxx.git</code> 。可以从仓库首页中的 <code>克隆/下载 =&gt; SSH</code> 中看到</p><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/b95a6aa8166d40978008dd0d2503c026~tplv-k3u1fbpfcp-jj-mark:3024:0:0:0:q75.awebp" alt="image.png"></p><p>重点是 <strong>Credentials</strong> 这一项，这里则是我们选择认证凭证的地方。我们可以点击右侧 <code>添加 =&gt; Jenkins</code> 按钮添加一条新的凭证认证信息。</p><p>点击后会打开一个弹窗，这是 <code>Jenkins</code> 添加凭证的弹窗。选择类型中的 <code>SSH Username with private key</code> 这一项。接着填写信息即可：</p><ul><li>ID：这条认证凭证在 <code>Jenkins</code> 中的名称是什么</li><li>描述：描述信息</li><li>Username：用户名（邮箱）</li><li>Private Key：这里则是我们填写私钥的地方。点击 <code>Add</code> 按钮，<strong>将 xxx 私钥文件内所有文件内容全部复制过去（包含开头的 BEGIN OPENSSH PRIVATE KEY 和结尾的 END OPENSSH PRIVATE KEY）</strong></li></ul><p>接着点击添加按钮，保存凭证。</p><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/45dd2d9f71d3461a9dc3056fe8f3ece5~tplv-k3u1fbpfcp-jj-mark:3024:0:0:0:q75.awebp" alt="image.png"></p><p>保存后，在 <code>Credentials</code> 下拉列表中选择你添加的凭证。</p><p>如果没有出现红色无权限提示，则代表身份校验成功，可以正常访问。</p><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/8c2dd6fd36f84405bc21ae40e1753eb3~tplv-k3u1fbpfcp-jj-mark:3024:0:0:0:q75.awebp" alt="image.png"></p><h3 id="_3-构建镜像" tabindex="-1">3. 构建镜像 ​</h3><p>在我们将环境准备就绪后，就可以开始构建镜像了。不过，我们需要先准备个 <code>DockerFile</code> 才可以构建镜像。那什么是 <code>DockerFile</code> 呢？</p><h4 id="_3-1-编写-dockerfile" tabindex="-1">3.1 编写 Dockerfile ​</h4><p><strong>什么是 Dockerfile</strong></p><p><code>Dockerfile</code> 是一个 <code>Docker</code> 镜像的基础描述文件，里面描述了<strong>生成一个镜像所需要的执行步骤</strong>。我们也可以自定义一份 <code>Dockerfile</code> 来创建一个自己的镜像。</p><p>例如下面的步骤，使用 <code>Dockerfile</code> 可描述为：</p><ul><li>基于 <code>nginx:1.15</code> 镜像做底座。</li><li>拷贝本地 <code>html</code> 文件夹内的文件，到镜像内 <code>/etc/nginx/html</code> 文件夹。</li><li>拷贝本地 <code>conf</code> 文件夹内的文件，到镜像内 <code>/etc/nginx/</code> 文件夹。</li></ul><div class="language-dockerfile vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">dockerfile</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">FROM</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> nginx:1.15-alpine</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">COPY</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> html /etc/nginx/html</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">COPY</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> conf /etc/nginx/</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">WORKDIR</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> /etc/nginx/html</span></span></code></pre></div><p>编写完成后，怎么生成镜像呢？我们只需要使用 <code>docker build</code> 命令就可以构建一个镜像了：</p><div class="language-sh vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">docker</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> build</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -t</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> imagename:version</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> .</span></span></code></pre></div><blockquote><p><code>-t</code>: 声明要打一个镜像的Tag标签，紧跟着的后面就是标签。标签格式为 镜像名:版本 . ：声明要寻找dockerfile文件的路径，. 代表当前路径下寻找。默认文件名为 Dockerfile。 关于更多 DockerFile 的语法，详细可以看这里 www.runoob.com/docker/dock…</p></blockquote><p>因为我们的镜像只包含一个 <code>nginx</code>，所以 <code>dockerfile</code> 内容比较简单。我们只需要在代码根目录下新建一个名为 <code>Dockerfile</code> 的文件，输入以下内容，并将其提交到代码库即可。</p><div class="language-sh vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">vi</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> Dockerfile</span></span></code></pre></div><div class="language-dockerfile vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">dockerfile</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">FROM</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> nginx:1.15-alpine</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">COPY</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> html /etc/nginx/html</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">COPY</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> conf /etc/nginx/</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">WORKDIR</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> /etc/nginx/html</span></span></code></pre></div><div class="language-sh vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">git</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> add</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> ./Dockerfile</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">git</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> commit</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -m</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;chore: add dockerfile&quot;</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">git</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> push</span></span></code></pre></div><h4 id="_3-2-jenkins-端配置" tabindex="-1">3.2 Jenkins 端配置 ​</h4><p>在代码源和 <code>DockerFile</code> 准备就绪后，我们只需在 <code>Jenkins</code> 端配置下要执行的 <code>Shell</code> 脚本即可。找到项目的配置，依次找到<strong>构建 =&gt; Execute shell</strong>。输入以下脚本：</p><div class="language-sh vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">#!/bin/sh -l</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">npm</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> install</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --registry=https://registry.npm.taobao.org</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">npm</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> run</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> build</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">docker</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> build</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -t</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> jenkins-test</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> .</span></span></code></pre></div><p>这里脚本很简单，主要是<strong>安装依赖 =&gt; 构建文件 =&gt; 构建镜像</strong>。填写完毕后保存</p><h3 id="_4-执行任务" tabindex="-1">4. 执行任务 ​</h3><p>保存后我们去手动触发执行下任务。当未抛出错误时，代表任务执行成功</p><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/42601c020857402aab4d1e16bbafc6e2~tplv-k3u1fbpfcp-jj-mark:3024:0:0:0:q75.awebp" alt="image.png"></p><h3 id="本章总结" tabindex="-1">本章总结 ​</h3><p>在这一章，我们学会了使用 <code>Jenkins</code> 构建了自己的前端镜像。下一章我们将安装自己的私有镜像库，将镜像上传在镜像库内。</p>`,75),n=[t];function c(d,o,l,h,k,g){return s(),i("div",null,n)}const F=e(a,[["render",c]]);export{u as __pageData,F as default};
